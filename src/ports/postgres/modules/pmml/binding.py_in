# ./pmml.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:9ed00422f9d4efece49c164c09f9f90fec8a9887
# Generated 2014-04-25 13:50:42.696625 by PyXB version 1.2.3
# Namespace http://www.dmg.org/PMML-4_0

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:43bbd554-ccbb-11e3-ae04-10ddb1d1c25f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(u'http://www.dmg.org/PMML-4_0', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.dmg.org/PMML-4_0}MINING-FUNCTION
class MINING_FUNCTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MINING-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 42, 2)
    _Documentation = None
MINING_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MINING_FUNCTION, enum_prefix=None)
MINING_FUNCTION.associationRules = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'associationRules', tag=u'associationRules')
MINING_FUNCTION.sequences = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'sequences', tag=u'sequences')
MINING_FUNCTION.classification = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'classification', tag=u'classification')
MINING_FUNCTION.regression = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'regression', tag=u'regression')
MINING_FUNCTION.clustering = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'clustering', tag=u'clustering')
MINING_FUNCTION.timeSeries = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'timeSeries', tag=u'timeSeries')
MINING_FUNCTION._InitializeFacetMap(MINING_FUNCTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'MINING-FUNCTION', MINING_FUNCTION)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}NUMBER
class NUMBER (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'NUMBER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 66, 2)
    _Documentation = None
NUMBER._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'NUMBER', NUMBER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}INT-NUMBER
class INT_NUMBER (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'INT-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 70, 2)
    _Documentation = None
INT_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'INT-NUMBER', INT_NUMBER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}REAL-NUMBER
class REAL_NUMBER (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'REAL-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 74, 2)
    _Documentation = None
REAL_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'REAL-NUMBER', REAL_NUMBER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}PROB-NUMBER
class PROB_NUMBER (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'PROB-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 78, 2)
    _Documentation = None
PROB_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'PROB-NUMBER', PROB_NUMBER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}PERCENTAGE-NUMBER
class PERCENTAGE_NUMBER (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'PERCENTAGE-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 82, 2)
    _Documentation = None
PERCENTAGE_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'PERCENTAGE-NUMBER', PERCENTAGE_NUMBER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}FIELD-NAME
class FIELD_NAME (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'FIELD-NAME')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 86, 2)
    _Documentation = None
FIELD_NAME._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'FIELD-NAME', FIELD_NAME)

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 93, 6)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.int = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'int', tag=u'int')
STD_ANON.real = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'real', tag=u'real')
STD_ANON.string = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'string', tag=u'string')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_ (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.int."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 144, 4)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.int
STD_ANON_._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_2 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.int."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 149, 4)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.int
STD_ANON_2._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_3 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.double."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 154, 4)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.double
STD_ANON_3._InitializeFacetMap()

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 165, 8)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.diagonal = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=u'diagonal', tag=u'diagonal')
STD_ANON_4.symmetric = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=u'symmetric', tag=u'symmetric')
STD_ANON_4.any = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=u'any', tag=u'any')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 249, 8)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.n0 = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=u'0', tag=u'n0')
STD_ANON_5.n1 = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=u'1', tag=u'n1')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}OPTYPE
class OPTYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OPTYPE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 258, 2)
    _Documentation = None
OPTYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OPTYPE, enum_prefix=None)
OPTYPE.categorical = OPTYPE._CF_enumeration.addEnumeration(unicode_value=u'categorical', tag=u'categorical')
OPTYPE.ordinal = OPTYPE._CF_enumeration.addEnumeration(unicode_value=u'ordinal', tag=u'ordinal')
OPTYPE.continuous = OPTYPE._CF_enumeration.addEnumeration(unicode_value=u'continuous', tag=u'continuous')
OPTYPE._InitializeFacetMap(OPTYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'OPTYPE', OPTYPE)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}DATATYPE
class DATATYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'DATATYPE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 265, 2)
    _Documentation = None
DATATYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DATATYPE, enum_prefix=None)
DATATYPE.string = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'string', tag=u'string')
DATATYPE.integer = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'integer', tag=u'integer')
DATATYPE.float = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'float', tag=u'float')
DATATYPE.double = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'double', tag=u'double')
DATATYPE.boolean = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'boolean', tag=u'boolean')
DATATYPE.date = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'date', tag=u'date')
DATATYPE.time = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'time', tag=u'time')
DATATYPE.dateTime = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateTime', tag=u'dateTime')
DATATYPE.dateDaysSince0 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[0]', tag=u'dateDaysSince0')
DATATYPE.dateDaysSince1960 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1960]', tag=u'dateDaysSince1960')
DATATYPE.dateDaysSince1970 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1970]', tag=u'dateDaysSince1970')
DATATYPE.dateDaysSince1980 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1980]', tag=u'dateDaysSince1980')
DATATYPE.timeSeconds = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'timeSeconds', tag=u'timeSeconds')
DATATYPE.dateTimeSecondsSince0 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecondsSince[0]', tag=u'dateTimeSecondsSince0')
DATATYPE.dateTimeSecondsSince1960 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecondsSince[1960]', tag=u'dateTimeSecondsSince1960')
DATATYPE.dateTimeSecondsSince1970 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecondsSince[1970]', tag=u'dateTimeSecondsSince1970')
DATATYPE.dateTimeSecondsSince1980 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecondsSince[1980]', tag=u'dateTimeSecondsSince1980')
DATATYPE._InitializeFacetMap(DATATYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'DATATYPE', DATATYPE)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 294, 8)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.valid = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=u'valid', tag=u'valid')
STD_ANON_6.invalid = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=u'invalid', tag=u'invalid')
STD_ANON_6.missing = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=u'missing', tag=u'missing')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 310, 8)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.openClosed = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'openClosed', tag=u'openClosed')
STD_ANON_7.openOpen = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'openOpen', tag=u'openOpen')
STD_ANON_7.closedOpen = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'closedOpen', tag=u'closedOpen')
STD_ANON_7.closedClosed = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'closedClosed', tag=u'closedClosed')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 373, 8)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.no = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=u'no', tag=u'no')
STD_ANON_8.yes = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=u'yes', tag=u'yes')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 494, 8)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.indicator = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'indicator', tag=u'indicator')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 557, 8)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.count = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'count', tag=u'count')
STD_ANON_10.sum = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'sum', tag=u'sum')
STD_ANON_10.average = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'average', tag=u'average')
STD_ANON_10.min = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'min', tag=u'min')
STD_ANON_10.max = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'max', tag=u'max')
STD_ANON_10.multiset = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'multiset', tag=u'multiset')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}FIELD-USAGE-TYPE
class FIELD_USAGE_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'FIELD-USAGE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 597, 2)
    _Documentation = None
FIELD_USAGE_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FIELD_USAGE_TYPE, enum_prefix=None)
FIELD_USAGE_TYPE.active = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'active', tag=u'active')
FIELD_USAGE_TYPE.predicted = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'predicted', tag=u'predicted')
FIELD_USAGE_TYPE.supplementary = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'supplementary', tag=u'supplementary')
FIELD_USAGE_TYPE.group = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'group', tag=u'group')
FIELD_USAGE_TYPE.order = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'order', tag=u'order')
FIELD_USAGE_TYPE.frequencyWeight = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'frequencyWeight', tag=u'frequencyWeight')
FIELD_USAGE_TYPE.analysisWeight = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=u'analysisWeight', tag=u'analysisWeight')
FIELD_USAGE_TYPE._InitializeFacetMap(FIELD_USAGE_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'FIELD-USAGE-TYPE', FIELD_USAGE_TYPE)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}OUTLIER-TREATMENT-METHOD
class OUTLIER_TREATMENT_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OUTLIER-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 608, 2)
    _Documentation = None
OUTLIER_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OUTLIER_TREATMENT_METHOD, enum_prefix=None)
OUTLIER_TREATMENT_METHOD.asIs = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asIs', tag=u'asIs')
OUTLIER_TREATMENT_METHOD.asMissingValues = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asMissingValues', tag=u'asMissingValues')
OUTLIER_TREATMENT_METHOD.asExtremeValues = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asExtremeValues', tag=u'asExtremeValues')
OUTLIER_TREATMENT_METHOD._InitializeFacetMap(OUTLIER_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'OUTLIER-TREATMENT-METHOD', OUTLIER_TREATMENT_METHOD)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}MISSING-VALUE-TREATMENT-METHOD
class MISSING_VALUE_TREATMENT_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MISSING-VALUE-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 615, 2)
    _Documentation = None
MISSING_VALUE_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MISSING_VALUE_TREATMENT_METHOD, enum_prefix=None)
MISSING_VALUE_TREATMENT_METHOD.asIs = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asIs', tag=u'asIs')
MISSING_VALUE_TREATMENT_METHOD.asMean = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asMean', tag=u'asMean')
MISSING_VALUE_TREATMENT_METHOD.asMode = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asMode', tag=u'asMode')
MISSING_VALUE_TREATMENT_METHOD.asMedian = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asMedian', tag=u'asMedian')
MISSING_VALUE_TREATMENT_METHOD.asValue = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asValue', tag=u'asValue')
MISSING_VALUE_TREATMENT_METHOD._InitializeFacetMap(MISSING_VALUE_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'MISSING-VALUE-TREATMENT-METHOD', MISSING_VALUE_TREATMENT_METHOD)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}INVALID-VALUE-TREATMENT-METHOD
class INVALID_VALUE_TREATMENT_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'INVALID-VALUE-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 624, 2)
    _Documentation = None
INVALID_VALUE_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=INVALID_VALUE_TREATMENT_METHOD, enum_prefix=None)
INVALID_VALUE_TREATMENT_METHOD.returnInvalid = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'returnInvalid', tag=u'returnInvalid')
INVALID_VALUE_TREATMENT_METHOD.asIs = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asIs', tag=u'asIs')
INVALID_VALUE_TREATMENT_METHOD.asMissing = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=u'asMissing', tag=u'asMissing')
INVALID_VALUE_TREATMENT_METHOD._InitializeFacetMap(INVALID_VALUE_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'INVALID-VALUE-TREATMENT-METHOD', INVALID_VALUE_TREATMENT_METHOD)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 651, 8)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.n0 = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'0', tag=u'n0')
STD_ANON_11.n1 = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'1', tag=u'n1')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 734, 8)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.Model = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'Model', tag=u'Model')
STD_ANON_12.Error = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'Error', tag=u'Error')
STD_ANON_12.Total = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'Total', tag=u'Total')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 769, 8)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.n0 = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=u'0', tag=u'n0')
STD_ANON_13.n1 = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=u'1', tag=u'n1')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 800, 8)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.recommendation = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=u'recommendation', tag=u'recommendation')
STD_ANON_14.exclusiveRecommendation = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=u'exclusiveRecommendation', tag=u'exclusiveRecommendation')
STD_ANON_14.ruleAssociation = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=u'ruleAssociation', tag=u'ruleAssociation')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 810, 8)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.confidence = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=u'confidence', tag=u'confidence')
STD_ANON_15.support = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=u'support', tag=u'support')
STD_ANON_15.lift = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=u'lift', tag=u'lift')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 819, 8)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.descending = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=u'descending', tag=u'descending')
STD_ANON_16.ascending = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=u'ascending', tag=u'ascending')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}RESULT-FEATURE
class RESULT_FEATURE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'RESULT-FEATURE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 829, 2)
    _Documentation = None
RESULT_FEATURE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RESULT_FEATURE, enum_prefix=None)
RESULT_FEATURE.predictedValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'predictedValue', tag=u'predictedValue')
RESULT_FEATURE.predictedDisplayValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'predictedDisplayValue', tag=u'predictedDisplayValue')
RESULT_FEATURE.probability = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'probability', tag=u'probability')
RESULT_FEATURE.residual = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'residual', tag=u'residual')
RESULT_FEATURE.standardError = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'standardError', tag=u'standardError')
RESULT_FEATURE.clusterId = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'clusterId', tag=u'clusterId')
RESULT_FEATURE.clusterAffinity = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'clusterAffinity', tag=u'clusterAffinity')
RESULT_FEATURE.entityId = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'entityId', tag=u'entityId')
RESULT_FEATURE.entityAffinity = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'entityAffinity', tag=u'entityAffinity')
RESULT_FEATURE.warning = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'warning', tag=u'warning')
RESULT_FEATURE.ruleValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'ruleValue', tag=u'ruleValue')
RESULT_FEATURE._InitializeFacetMap(RESULT_FEATURE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'RESULT-FEATURE', RESULT_FEATURE)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}RULE-FEATURE
class RULE_FEATURE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'RULE-FEATURE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 844, 2)
    _Documentation = None
RULE_FEATURE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RULE_FEATURE, enum_prefix=None)
RULE_FEATURE.antecedent = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'antecedent', tag=u'antecedent')
RULE_FEATURE.consequent = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'consequent', tag=u'consequent')
RULE_FEATURE.rule = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'rule', tag=u'rule')
RULE_FEATURE.ruleId = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'ruleId', tag=u'ruleId')
RULE_FEATURE.confidence = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'confidence', tag=u'confidence')
RULE_FEATURE.support = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'support', tag=u'support')
RULE_FEATURE.lift = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=u'lift', tag=u'lift')
RULE_FEATURE._InitializeFacetMap(RULE_FEATURE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'RULE-FEATURE', RULE_FEATURE)

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 872, 8)
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.round = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=u'round', tag=u'round')
STD_ANON_17.ceiling = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=u'ceiling', tag=u'ceiling')
STD_ANON_17.floor = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=u'floor', tag=u'floor')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}ACTIVATION-FUNCTION
class ACTIVATION_FUNCTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ACTIVATION-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 957, 2)
    _Documentation = None
ACTIVATION_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ACTIVATION_FUNCTION, enum_prefix=None)
ACTIVATION_FUNCTION.threshold = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'threshold', tag=u'threshold')
ACTIVATION_FUNCTION.logistic = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'logistic', tag=u'logistic')
ACTIVATION_FUNCTION.tanh = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'tanh', tag=u'tanh')
ACTIVATION_FUNCTION.identity = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'identity', tag=u'identity')
ACTIVATION_FUNCTION.exponential = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'exponential', tag=u'exponential')
ACTIVATION_FUNCTION.reciprocal = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'reciprocal', tag=u'reciprocal')
ACTIVATION_FUNCTION.square = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'square', tag=u'square')
ACTIVATION_FUNCTION.Gauss = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'Gauss', tag=u'Gauss')
ACTIVATION_FUNCTION.sine = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'sine', tag=u'sine')
ACTIVATION_FUNCTION.cosine = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'cosine', tag=u'cosine')
ACTIVATION_FUNCTION.Elliott = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'Elliott', tag=u'Elliott')
ACTIVATION_FUNCTION.arctan = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'arctan', tag=u'arctan')
ACTIVATION_FUNCTION.radialBasis = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'radialBasis', tag=u'radialBasis')
ACTIVATION_FUNCTION._InitializeFacetMap(ACTIVATION_FUNCTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ACTIVATION-FUNCTION', ACTIVATION_FUNCTION)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}NN-NORMALIZATION-METHOD
class NN_NORMALIZATION_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'NN-NORMALIZATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 974, 2)
    _Documentation = None
NN_NORMALIZATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NN_NORMALIZATION_METHOD, enum_prefix=None)
NN_NORMALIZATION_METHOD.none = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
NN_NORMALIZATION_METHOD.simplemax = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'simplemax', tag=u'simplemax')
NN_NORMALIZATION_METHOD.softmax = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'softmax', tag=u'softmax')
NN_NORMALIZATION_METHOD._InitializeFacetMap(NN_NORMALIZATION_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'NN-NORMALIZATION-METHOD', NN_NORMALIZATION_METHOD)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}NN-NEURON-ID
class NN_NEURON_ID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'NN-NEURON-ID')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 981, 2)
    _Documentation = None
NN_NEURON_ID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'NN-NEURON-ID', NN_NEURON_ID)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}NN-NEURON-IDREF
class NN_NEURON_IDREF (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'NN-NEURON-IDREF')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 984, 2)
    _Documentation = None
NN_NEURON_IDREF._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'NN-NEURON-IDREF', NN_NEURON_IDREF)

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1046, 8)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.centerBased = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=u'centerBased', tag=u'centerBased')
STD_ANON_18.distributionBased = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=u'distributionBased', tag=u'distributionBased')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1103, 8)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.true = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value=u'true', tag=u'true')
STD_ANON_19.false = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value=u'false', tag=u'false')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}COMPARE-FUNCTION
class COMPARE_FUNCTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'COMPARE-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1123, 2)
    _Documentation = None
COMPARE_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=COMPARE_FUNCTION, enum_prefix=None)
COMPARE_FUNCTION.absDiff = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'absDiff', tag=u'absDiff')
COMPARE_FUNCTION.gaussSim = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'gaussSim', tag=u'gaussSim')
COMPARE_FUNCTION.delta = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'delta', tag=u'delta')
COMPARE_FUNCTION.equal = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'equal', tag=u'equal')
COMPARE_FUNCTION.table = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'table', tag=u'table')
COMPARE_FUNCTION._InitializeFacetMap(COMPARE_FUNCTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'COMPARE-FUNCTION', COMPARE_FUNCTION)

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1149, 8)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.distance = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=u'distance', tag=u'distance')
STD_ANON_20.similarity = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=u'similarity', tag=u'similarity')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1324, 8)
    _Documentation = None
STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.binarySplit = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=u'binarySplit', tag=u'binarySplit')
STD_ANON_21.multiSplit = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=u'multiSplit', tag=u'multiSplit')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1369, 8)
    _Documentation = None
STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.equal = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'equal', tag=u'equal')
STD_ANON_22.notEqual = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'notEqual', tag=u'notEqual')
STD_ANON_22.lessThan = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'lessThan', tag=u'lessThan')
STD_ANON_22.lessOrEqual = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'lessOrEqual', tag=u'lessOrEqual')
STD_ANON_22.greaterThan = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'greaterThan', tag=u'greaterThan')
STD_ANON_22.greaterOrEqual = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'greaterOrEqual', tag=u'greaterOrEqual')
STD_ANON_22.isMissing = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'isMissing', tag=u'isMissing')
STD_ANON_22.isNotMissing = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=u'isNotMissing', tag=u'isNotMissing')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1394, 8)
    _Documentation = None
STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.or_ = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=u'or', tag=u'or_')
STD_ANON_23.and_ = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=u'and', tag=u'and_')
STD_ANON_23.xor = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=u'xor', tag=u'xor')
STD_ANON_23.surrogate = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=u'surrogate', tag=u'surrogate')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1413, 8)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.isIn = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value=u'isIn', tag=u'isIn')
STD_ANON_24.isNotIn = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value=u'isNotIn', tag=u'isNotIn')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}MISSING-VALUE-STRATEGY
class MISSING_VALUE_STRATEGY (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MISSING-VALUE-STRATEGY')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1446, 2)
    _Documentation = None
MISSING_VALUE_STRATEGY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MISSING_VALUE_STRATEGY, enum_prefix=None)
MISSING_VALUE_STRATEGY.lastPrediction = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'lastPrediction', tag=u'lastPrediction')
MISSING_VALUE_STRATEGY.nullPrediction = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'nullPrediction', tag=u'nullPrediction')
MISSING_VALUE_STRATEGY.defaultChild = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'defaultChild', tag=u'defaultChild')
MISSING_VALUE_STRATEGY.weightedConfidence = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'weightedConfidence', tag=u'weightedConfidence')
MISSING_VALUE_STRATEGY.aggregateNodes = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'aggregateNodes', tag=u'aggregateNodes')
MISSING_VALUE_STRATEGY.none = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
MISSING_VALUE_STRATEGY._InitializeFacetMap(MISSING_VALUE_STRATEGY._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'MISSING-VALUE-STRATEGY', MISSING_VALUE_STRATEGY)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}NO-TRUE-CHILD-STRATEGY
class NO_TRUE_CHILD_STRATEGY (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'NO-TRUE-CHILD-STRATEGY')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1456, 2)
    _Documentation = None
NO_TRUE_CHILD_STRATEGY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NO_TRUE_CHILD_STRATEGY, enum_prefix=None)
NO_TRUE_CHILD_STRATEGY.returnNullPrediction = NO_TRUE_CHILD_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'returnNullPrediction', tag=u'returnNullPrediction')
NO_TRUE_CHILD_STRATEGY.returnLastPrediction = NO_TRUE_CHILD_STRATEGY._CF_enumeration.addEnumeration(unicode_value=u'returnLastPrediction', tag=u'returnLastPrediction')
NO_TRUE_CHILD_STRATEGY._InitializeFacetMap(NO_TRUE_CHILD_STRATEGY._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'NO-TRUE-CHILD-STRATEGY', NO_TRUE_CHILD_STRATEGY)

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1481, 8)
    _Documentation = None
STD_ANON_25._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_25, enum_prefix=None)
STD_ANON_25.linearRegression = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value=u'linearRegression', tag=u'linearRegression')
STD_ANON_25.stepwisePolynomialRegression = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value=u'stepwisePolynomialRegression', tag=u'stepwisePolynomialRegression')
STD_ANON_25.logisticRegression = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value=u'logisticRegression', tag=u'logisticRegression')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}REGRESSIONNORMALIZATIONMETHOD
class REGRESSIONNORMALIZATIONMETHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'REGRESSIONNORMALIZATIONMETHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1493, 2)
    _Documentation = None
REGRESSIONNORMALIZATIONMETHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=REGRESSIONNORMALIZATIONMETHOD, enum_prefix=None)
REGRESSIONNORMALIZATIONMETHOD.none = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
REGRESSIONNORMALIZATIONMETHOD.simplemax = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'simplemax', tag=u'simplemax')
REGRESSIONNORMALIZATIONMETHOD.softmax = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'softmax', tag=u'softmax')
REGRESSIONNORMALIZATIONMETHOD.logit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'logit', tag=u'logit')
REGRESSIONNORMALIZATIONMETHOD.probit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'probit', tag=u'probit')
REGRESSIONNORMALIZATIONMETHOD.cloglog = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'cloglog', tag=u'cloglog')
REGRESSIONNORMALIZATIONMETHOD.exp = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'exp', tag=u'exp')
REGRESSIONNORMALIZATIONMETHOD.loglog = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'loglog', tag=u'loglog')
REGRESSIONNORMALIZATIONMETHOD.cauchit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=u'cauchit', tag=u'cauchit')
REGRESSIONNORMALIZATIONMETHOD._InitializeFacetMap(REGRESSIONNORMALIZATIONMETHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'REGRESSIONNORMALIZATIONMETHOD', REGRESSIONNORMALIZATIONMETHOD)

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1586, 8)
    _Documentation = None
STD_ANON_26._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_26, enum_prefix=None)
STD_ANON_26.weightedSum = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value=u'weightedSum', tag=u'weightedSum')
STD_ANON_26.weightedMax = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value=u'weightedMax', tag=u'weightedMax')
STD_ANON_26.firstHit = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value=u'firstHit', tag=u'firstHit')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}SVM-CLASSIFICATION-METHOD
class SVM_CLASSIFICATION_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'SVM-CLASSIFICATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1657, 2)
    _Documentation = None
SVM_CLASSIFICATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SVM_CLASSIFICATION_METHOD, enum_prefix=None)
SVM_CLASSIFICATION_METHOD.OneAgainstAll = SVM_CLASSIFICATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'OneAgainstAll', tag=u'OneAgainstAll')
SVM_CLASSIFICATION_METHOD.OneAgainstOne = SVM_CLASSIFICATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'OneAgainstOne', tag=u'OneAgainstOne')
SVM_CLASSIFICATION_METHOD._InitializeFacetMap(SVM_CLASSIFICATION_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'SVM-CLASSIFICATION-METHOD', SVM_CLASSIFICATION_METHOD)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}SVM-REPRESENTATION
class SVM_REPRESENTATION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'SVM-REPRESENTATION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1663, 2)
    _Documentation = None
SVM_REPRESENTATION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SVM_REPRESENTATION, enum_prefix=None)
SVM_REPRESENTATION.SupportVectors = SVM_REPRESENTATION._CF_enumeration.addEnumeration(unicode_value=u'SupportVectors', tag=u'SupportVectors')
SVM_REPRESENTATION.Coefficients = SVM_REPRESENTATION._CF_enumeration.addEnumeration(unicode_value=u'Coefficients', tag=u'Coefficients')
SVM_REPRESENTATION._InitializeFacetMap(SVM_REPRESENTATION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'SVM-REPRESENTATION', SVM_REPRESENTATION)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}VECTOR-ID
class VECTOR_ID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'VECTOR-ID')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1707, 2)
    _Documentation = None
VECTOR_ID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'VECTOR-ID', VECTOR_ID)

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1856, 8)
    _Documentation = None
STD_ANON_27._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_27, enum_prefix=None)
STD_ANON_27.termFrequency = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=u'termFrequency', tag=u'termFrequency')
STD_ANON_27.binary = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=u'binary', tag=u'binary')
STD_ANON_27.logarithmic = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=u'logarithmic', tag=u'logarithmic')
STD_ANON_27.augmentedNormalizedTermFrequency = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=u'augmentedNormalizedTermFrequency', tag=u'augmentedNormalizedTermFrequency')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1866, 8)
    _Documentation = None
STD_ANON_28._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_28, enum_prefix=None)
STD_ANON_28.inverseDocumentFrequency = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=u'inverseDocumentFrequency', tag=u'inverseDocumentFrequency')
STD_ANON_28.none = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
STD_ANON_28.GFIDF = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=u'GFIDF', tag=u'GFIDF')
STD_ANON_28.normal = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
STD_ANON_28.probabilisticInverse = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=u'probabilisticInverse', tag=u'probabilisticInverse')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1877, 8)
    _Documentation = None
STD_ANON_29._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_29, enum_prefix=None)
STD_ANON_29.none = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
STD_ANON_29.cosine = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=u'cosine', tag=u'cosine')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1892, 8)
    _Documentation = None
STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.euclidean = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value=u'euclidean', tag=u'euclidean')
STD_ANON_30.cosine = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value=u'cosine', tag=u'cosine')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1924, 8)
    _Documentation = None
STD_ANON_31._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_31, enum_prefix=None)
STD_ANON_31.regression = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'regression', tag=u'regression')
STD_ANON_31.generalLinear = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'generalLinear', tag=u'generalLinear')
STD_ANON_31.multinomialLogistic = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'multinomialLogistic', tag=u'multinomialLogistic')
STD_ANON_31.ordinalMultinomial = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'ordinalMultinomial', tag=u'ordinalMultinomial')
STD_ANON_31.generalizedLinear = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'generalizedLinear', tag=u'generalizedLinear')
STD_ANON_31.CoxRegression = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=u'CoxRegression', tag=u'CoxRegression')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1945, 6)
    _Documentation = None
STD_ANON_32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_32, enum_prefix=None)
STD_ANON_32.binomial = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'binomial', tag=u'binomial')
STD_ANON_32.gamma = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'gamma', tag=u'gamma')
STD_ANON_32.igauss = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'igauss', tag=u'igauss')
STD_ANON_32.negbin = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'negbin', tag=u'negbin')
STD_ANON_32.normal = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'normal', tag=u'normal')
STD_ANON_32.poisson = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'poisson', tag=u'poisson')
STD_ANON_32.tweedie = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=u'tweedie', tag=u'tweedie')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2038, 8)
    _Documentation = None
STD_ANON_33._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_33, enum_prefix=None)
STD_ANON_33.model = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value=u'model', tag=u'model')
STD_ANON_33.robust = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value=u'robust', tag=u'robust')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}CUMULATIVE-LINK-FUNCTION
class CUMULATIVE_LINK_FUNCTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CUMULATIVE-LINK-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2120, 2)
    _Documentation = None
CUMULATIVE_LINK_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CUMULATIVE_LINK_FUNCTION, enum_prefix=None)
CUMULATIVE_LINK_FUNCTION.logit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'logit', tag=u'logit')
CUMULATIVE_LINK_FUNCTION.probit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'probit', tag=u'probit')
CUMULATIVE_LINK_FUNCTION.cloglog = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'cloglog', tag=u'cloglog')
CUMULATIVE_LINK_FUNCTION.loglog = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'loglog', tag=u'loglog')
CUMULATIVE_LINK_FUNCTION.cauchit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'cauchit', tag=u'cauchit')
CUMULATIVE_LINK_FUNCTION._InitializeFacetMap(CUMULATIVE_LINK_FUNCTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'CUMULATIVE-LINK-FUNCTION', CUMULATIVE_LINK_FUNCTION)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}LINK-FUNCTION
class LINK_FUNCTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'LINK-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2129, 2)
    _Documentation = None
LINK_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LINK_FUNCTION, enum_prefix=None)
LINK_FUNCTION.cloglog = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'cloglog', tag=u'cloglog')
LINK_FUNCTION.identity = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'identity', tag=u'identity')
LINK_FUNCTION.log = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'log', tag=u'log')
LINK_FUNCTION.logc = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'logc', tag=u'logc')
LINK_FUNCTION.logit = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'logit', tag=u'logit')
LINK_FUNCTION.loglog = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'loglog', tag=u'loglog')
LINK_FUNCTION.negbin = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'negbin', tag=u'negbin')
LINK_FUNCTION.oddspower = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'oddspower', tag=u'oddspower')
LINK_FUNCTION.power = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'power', tag=u'power')
LINK_FUNCTION.probit = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=u'probit', tag=u'probit')
LINK_FUNCTION._InitializeFacetMap(LINK_FUNCTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'LINK-FUNCTION', LINK_FUNCTION)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}ELEMENT-ID
class ELEMENT_ID (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ELEMENT-ID')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2191, 2)
    _Documentation = None
ELEMENT_ID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ELEMENT-ID', ELEMENT_ID)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}DELIMITER
class DELIMITER (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'DELIMITER')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2206, 2)
    _Documentation = None
DELIMITER._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DELIMITER, enum_prefix=None)
DELIMITER.sameTimeWindow = DELIMITER._CF_enumeration.addEnumeration(unicode_value=u'sameTimeWindow', tag=u'sameTimeWindow')
DELIMITER.acrossTimeWindows = DELIMITER._CF_enumeration.addEnumeration(unicode_value=u'acrossTimeWindows', tag=u'acrossTimeWindows')
DELIMITER._InitializeFacetMap(DELIMITER._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'DELIMITER', DELIMITER)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}GAP
class GAP (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'GAP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2212, 2)
    _Documentation = None
GAP._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GAP, enum_prefix=None)
GAP.true = GAP._CF_enumeration.addEnumeration(unicode_value=u'true', tag=u'true')
GAP.false = GAP._CF_enumeration.addEnumeration(unicode_value=u'false', tag=u'false')
GAP.unknown = GAP._CF_enumeration.addEnumeration(unicode_value=u'unknown', tag=u'unknown')
GAP._InitializeFacetMap(GAP._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'GAP', GAP)

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2447, 8)
    _Documentation = None
STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.training = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=u'training', tag=u'training')
STD_ANON_34.test = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=u'test', tag=u'test')
STD_ANON_34.validation = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=u'validation', tag=u'validation')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}MULTIPLE-MODEL-METHOD
class MULTIPLE_MODEL_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MULTIPLE-MODEL-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2676, 2)
    _Documentation = None
MULTIPLE_MODEL_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MULTIPLE_MODEL_METHOD, enum_prefix=None)
MULTIPLE_MODEL_METHOD.majorityVote = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'majorityVote', tag=u'majorityVote')
MULTIPLE_MODEL_METHOD.weightedMajorityVote = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'weightedMajorityVote', tag=u'weightedMajorityVote')
MULTIPLE_MODEL_METHOD.average = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'average', tag=u'average')
MULTIPLE_MODEL_METHOD.weightedAverage = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'weightedAverage', tag=u'weightedAverage')
MULTIPLE_MODEL_METHOD.median = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'median', tag=u'median')
MULTIPLE_MODEL_METHOD.max = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'max', tag=u'max')
MULTIPLE_MODEL_METHOD.sum = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'sum', tag=u'sum')
MULTIPLE_MODEL_METHOD.selectFirst = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'selectFirst', tag=u'selectFirst')
MULTIPLE_MODEL_METHOD.selectAll = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=u'selectAll', tag=u'selectAll')
MULTIPLE_MODEL_METHOD._InitializeFacetMap(MULTIPLE_MODEL_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'MULTIPLE-MODEL-METHOD', MULTIPLE_MODEL_METHOD)

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2746, 8)
    _Documentation = None
STD_ANON_35._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_35, enum_prefix=None)
STD_ANON_35.binarySplit = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value=u'binarySplit', tag=u'binarySplit')
STD_ANON_35.multiSplit = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value=u'multiSplit', tag=u'multiSplit')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_enumeration)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}TIMESERIES-ALGORITHM
class TIMESERIES_ALGORITHM (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TIMESERIES-ALGORITHM')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2777, 2)
    _Documentation = None
TIMESERIES_ALGORITHM._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIMESERIES_ALGORITHM, enum_prefix=None)
TIMESERIES_ALGORITHM.ARIMA = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=u'ARIMA', tag=u'ARIMA')
TIMESERIES_ALGORITHM.ExponentialSmoothing = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=u'ExponentialSmoothing', tag=u'ExponentialSmoothing')
TIMESERIES_ALGORITHM.SeasonalTrendDecomposition = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=u'SeasonalTrendDecomposition', tag=u'SeasonalTrendDecomposition')
TIMESERIES_ALGORITHM.SpectralAnalysis = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=u'SpectralAnalysis', tag=u'SpectralAnalysis')
TIMESERIES_ALGORITHM._InitializeFacetMap(TIMESERIES_ALGORITHM._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TIMESERIES-ALGORITHM', TIMESERIES_ALGORITHM)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}TIMESERIES-USAGE
class TIMESERIES_USAGE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TIMESERIES-USAGE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2799, 2)
    _Documentation = None
TIMESERIES_USAGE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIMESERIES_USAGE, enum_prefix=None)
TIMESERIES_USAGE.original = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=u'original', tag=u'original')
TIMESERIES_USAGE.logical = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=u'logical', tag=u'logical')
TIMESERIES_USAGE.prediction = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=u'prediction', tag=u'prediction')
TIMESERIES_USAGE._InitializeFacetMap(TIMESERIES_USAGE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TIMESERIES-USAGE', TIMESERIES_USAGE)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}TIME-ANCHOR
class TIME_ANCHOR (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TIME-ANCHOR')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2839, 2)
    _Documentation = None
TIME_ANCHOR._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIME_ANCHOR, enum_prefix=None)
TIME_ANCHOR.dateTimeMillisecdondsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeMillisecdondsSince[0]', tag=u'dateTimeMillisecdondsSince0')
TIME_ANCHOR.dateTimeMillisecdondsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeMillisecdondsSince[1960]', tag=u'dateTimeMillisecdondsSince1960')
TIME_ANCHOR.dateTimeMillisecdondsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeMillisecdondsSince[1970]', tag=u'dateTimeMillisecdondsSince1970')
TIME_ANCHOR.dateTimeMillisecdondsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeMillisecdondsSince[1980]', tag=u'dateTimeMillisecdondsSince1980')
TIME_ANCHOR.dateTimeSecdondsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecdondsSince[0]', tag=u'dateTimeSecdondsSince0')
TIME_ANCHOR.dateTimeSecdondsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecdondsSince[1960]', tag=u'dateTimeSecdondsSince1960')
TIME_ANCHOR.dateTimeSecdondsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecdondsSince[1970]', tag=u'dateTimeSecdondsSince1970')
TIME_ANCHOR.dateTimeSecdondsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateTimeSecdondsSince[1980]', tag=u'dateTimeSecdondsSince1980')
TIME_ANCHOR.dateDaysSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[0]', tag=u'dateDaysSince0')
TIME_ANCHOR.dateDaysSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1960]', tag=u'dateDaysSince1960')
TIME_ANCHOR.dateDaysSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1970]', tag=u'dateDaysSince1970')
TIME_ANCHOR.dateDaysSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateDaysSince[1980]', tag=u'dateDaysSince1980')
TIME_ANCHOR.dateMonthsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateMonthsSince[0]', tag=u'dateMonthsSince0')
TIME_ANCHOR.dateMonthsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateMonthsSince[1960]', tag=u'dateMonthsSince1960')
TIME_ANCHOR.dateMonthsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateMonthsSince[1970]', tag=u'dateMonthsSince1970')
TIME_ANCHOR.dateMonthsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateMonthsSince[1980]', tag=u'dateMonthsSince1980')
TIME_ANCHOR.dateYearsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=u'dateYearsSince[0]', tag=u'dateYearsSince0')
TIME_ANCHOR._InitializeFacetMap(TIME_ANCHOR._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TIME-ANCHOR', TIME_ANCHOR)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}VALID-TIME-SPEC
class VALID_TIME_SPEC (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'VALID-TIME-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2860, 2)
    _Documentation = None
VALID_TIME_SPEC._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VALID_TIME_SPEC, enum_prefix=None)
VALID_TIME_SPEC.includeAll = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=u'includeAll', tag=u'includeAll')
VALID_TIME_SPEC.includeFromTo = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=u'includeFromTo', tag=u'includeFromTo')
VALID_TIME_SPEC.excludeFromTo = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=u'excludeFromTo', tag=u'excludeFromTo')
VALID_TIME_SPEC.includeSet = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=u'includeSet', tag=u'includeSet')
VALID_TIME_SPEC.excludeSet = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=u'excludeSet', tag=u'excludeSet')
VALID_TIME_SPEC._InitializeFacetMap(VALID_TIME_SPEC._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'VALID-TIME-SPEC', VALID_TIME_SPEC)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}TIME-EXCEPTION-TYPE
class TIME_EXCEPTION_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TIME-EXCEPTION-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2878, 2)
    _Documentation = None
TIME_EXCEPTION_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIME_EXCEPTION_TYPE, enum_prefix=None)
TIME_EXCEPTION_TYPE.exclude = TIME_EXCEPTION_TYPE._CF_enumeration.addEnumeration(unicode_value=u'exclude', tag=u'exclude')
TIME_EXCEPTION_TYPE.include = TIME_EXCEPTION_TYPE._CF_enumeration.addEnumeration(unicode_value=u'include', tag=u'include')
TIME_EXCEPTION_TYPE._InitializeFacetMap(TIME_EXCEPTION_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TIME-EXCEPTION-TYPE', TIME_EXCEPTION_TYPE)

# Atomic simple type: {http://www.dmg.org/PMML-4_0}INTERPOLATION-METHOD
class INTERPOLATION_METHOD (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'INTERPOLATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2884, 2)
    _Documentation = None
INTERPOLATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=INTERPOLATION_METHOD, enum_prefix=None)
INTERPOLATION_METHOD.none = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
INTERPOLATION_METHOD.linear = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'linear', tag=u'linear')
INTERPOLATION_METHOD.exponentialSpline = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'exponentialSpline', tag=u'exponentialSpline')
INTERPOLATION_METHOD.cubicSpline = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=u'cubicSpline', tag=u'cubicSpline')
INTERPOLATION_METHOD._InitializeFacetMap(INTERPOLATION_METHOD._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'INTERPOLATION-METHOD', INTERPOLATION_METHOD)

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2902, 8)
    _Documentation = None
STD_ANON_36._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_36, enum_prefix=None)
STD_ANON_36.none = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
STD_ANON_36.logarithmic = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=u'logarithmic', tag=u'logarithmic')
STD_ANON_36.squareroot = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=u'squareroot', tag=u'squareroot')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2918, 8)
    _Documentation = None
STD_ANON_37._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_37, enum_prefix=None)
STD_ANON_37.additive = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value=u'additive', tag=u'additive')
STD_ANON_37.multiplicative = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value=u'multiplicative', tag=u'multiplicative')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_38 (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2942, 8)
    _Documentation = None
STD_ANON_38._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_38, enum_prefix=None)
STD_ANON_38.additive = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=u'additive', tag=u'additive')
STD_ANON_38.damped_additive = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=u'damped_additive', tag=u'damped_additive')
STD_ANON_38.multiplicative = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=u'multiplicative', tag=u'multiplicative')
STD_ANON_38.damped_multiplicative = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=u'damped_multiplicative', tag=u'damped_multiplicative')
STD_ANON_38.double_exponential = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=u'double_exponential', tag=u'double_exponential')
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_enumeration)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 7, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}MiningBuildTask uses Python identifier MiningBuildTask
    __MiningBuildTask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningBuildTask'), 'MiningBuildTask', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0MiningBuildTask', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 35, 2), )


    MiningBuildTask = property(__MiningBuildTask.value, __MiningBuildTask.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Header uses Python identifier Header
    __Header = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Header'), 'Header', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0Header', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 189, 2), )


    Header = property(__Header.value, __Header.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DataDictionary uses Python identifier DataDictionary
    __DataDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DataDictionary'), 'DataDictionary', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0DataDictionary', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 224, 2), )


    DataDictionary = property(__DataDictionary.value, __DataDictionary.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TransformationDictionary uses Python identifier TransformationDictionary
    __TransformationDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TransformationDictionary'), 'TransformationDictionary', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0TransformationDictionary', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 420, 2), )


    TransformationDictionary = property(__TransformationDictionary.value, __TransformationDictionary.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralNetwork uses Python identifier NeuralNetwork
    __NeuralNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork'), 'NeuralNetwork', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0NeuralNetwork', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 898, 2), )


    NeuralNetwork = property(__NeuralNetwork.value, __NeuralNetwork.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ClusteringModel uses Python identifier ClusteringModel
    __ClusteringModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel'), 'ClusteringModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0ClusteringModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1026, 2), )


    ClusteringModel = property(__ClusteringModel.value, __ClusteringModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}AssociationModel uses Python identifier AssociationModel
    __AssociationModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'AssociationModel'), 'AssociationModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0AssociationModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1233, 2), )


    AssociationModel = property(__AssociationModel.value, __AssociationModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TreeModel uses Python identifier TreeModel
    __TreeModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TreeModel'), 'TreeModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0TreeModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1303, 2), )


    TreeModel = property(__TreeModel.value, __TreeModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RegressionModel uses Python identifier RegressionModel
    __RegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel'), 'RegressionModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0RegressionModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1462, 2), )


    RegressionModel = property(__RegressionModel.value, __RegressionModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RuleSetModel uses Python identifier RuleSetModel
    __RuleSetModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel'), 'RuleSetModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0RuleSetModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1547, 2), )


    RuleSetModel = property(__RuleSetModel.value, __RuleSetModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SupportVectorMachineModel uses Python identifier SupportVectorMachineModel
    __SupportVectorMachineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel'), 'SupportVectorMachineModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0SupportVectorMachineModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1626, 2), )


    SupportVectorMachineModel = property(__SupportVectorMachineModel.value, __SupportVectorMachineModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextModel uses Python identifier TextModel
    __TextModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextModel'), 'TextModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0TextModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1789, 2), )


    TextModel = property(__TextModel.value, __TextModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}GeneralRegressionModel uses Python identifier GeneralRegressionModel
    __GeneralRegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel'), 'GeneralRegressionModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0GeneralRegressionModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1901, 2), )


    GeneralRegressionModel = property(__GeneralRegressionModel.value, __GeneralRegressionModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SequenceModel uses Python identifier SequenceModel
    __SequenceModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SequenceModel'), 'SequenceModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0SequenceModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2143, 2), )


    SequenceModel = property(__SequenceModel.value, __SequenceModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NaiveBayesModel uses Python identifier NaiveBayesModel
    __NaiveBayesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel'), 'NaiveBayesModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0NaiveBayesModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2320, 2), )


    NaiveBayesModel = property(__NaiveBayesModel.value, __NaiveBayesModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningModel uses Python identifier MiningModel
    __MiningModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningModel'), 'MiningModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0MiningModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2622, 2), )


    MiningModel = property(__MiningModel.value, __MiningModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TimeSeriesModel uses Python identifier TimeSeriesModel
    __TimeSeriesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeSeriesModel'), 'TimeSeriesModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_httpwww_dmg_orgPMML_4_0TimeSeriesModel', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2755, 2), )


    TimeSeriesModel = property(__TimeSeriesModel.value, __TimeSeriesModel.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 32, 6)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 32, 6)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __MiningBuildTask.name() : __MiningBuildTask,
        __Extension.name() : __Extension,
        __Header.name() : __Header,
        __DataDictionary.name() : __DataDictionary,
        __TransformationDictionary.name() : __TransformationDictionary,
        __NeuralNetwork.name() : __NeuralNetwork,
        __ClusteringModel.name() : __ClusteringModel,
        __AssociationModel.name() : __AssociationModel,
        __TreeModel.name() : __TreeModel,
        __RegressionModel.name() : __RegressionModel,
        __RuleSetModel.name() : __RuleSetModel,
        __SupportVectorMachineModel.name() : __SupportVectorMachineModel,
        __TextModel.name() : __TextModel,
        __GeneralRegressionModel.name() : __GeneralRegressionModel,
        __SequenceModel.name() : __SequenceModel,
        __NaiveBayesModel.name() : __NaiveBayesModel,
        __MiningModel.name() : __MiningModel,
        __TimeSeriesModel.name() : __TimeSeriesModel
    })
    _AttributeMap.update({
        __version.name() : __version
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 36, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON__httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 53, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute extender uses Python identifier extender
    __extender = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extender'), 'extender', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_2_extender', pyxb.binding.datatypes.string)
    __extender._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 59, 10)
    __extender._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 59, 10)

    extender = property(__extender.value, __extender.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_2_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 60, 10)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 60, 10)

    name = property(__name.value, __name.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_2_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 61, 10)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 61, 10)

    value_ = property(__value.value, __value.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({

    })
    _AttributeMap.update({
        __extender.name() : __extender,
        __name.name() : __name,
        __value.name() : __value
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 190, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Application uses Python identifier Application
    __Application = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Application'), 'Application', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_httpwww_dmg_orgPMML_4_0Application', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 201, 2), )


    Application = property(__Application.value, __Application.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Annotation uses Python identifier Annotation
    __Annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Annotation'), 'Annotation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_httpwww_dmg_orgPMML_4_0Annotation', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 210, 2), )


    Annotation = property(__Annotation.value, __Annotation.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Timestamp uses Python identifier Timestamp
    __Timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Timestamp'), 'Timestamp', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_httpwww_dmg_orgPMML_4_0Timestamp', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 217, 2), )


    Timestamp = property(__Timestamp.value, __Timestamp.set, None, None)


    # Attribute copyright uses Python identifier copyright
    __copyright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'copyright'), 'copyright', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_copyright', pyxb.binding.datatypes.string, required=True)
    __copyright._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 197, 6)
    __copyright._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 197, 6)

    copyright = property(__copyright.value, __copyright.set, None, None)


    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_3_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 198, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 198, 6)

    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Application.name() : __Application,
        __Annotation.name() : __Annotation,
        __Timestamp.name() : __Timestamp
    })
    _AttributeMap.update({
        __copyright.name() : __copyright,
        __description.name() : __description
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 202, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_4_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_4_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 206, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 206, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_4_version', pyxb.binding.datatypes.string)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 207, 6)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 207, 6)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __version.name() : __version
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 211, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_5_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 218, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_6_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 225, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_7_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DataField uses Python identifier DataField
    __DataField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DataField'), 'DataField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_7_httpwww_dmg_orgPMML_4_0DataField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 234, 2), )


    DataField = property(__DataField.value, __DataField.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Taxonomy uses Python identifier Taxonomy
    __Taxonomy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy'), 'Taxonomy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_7_httpwww_dmg_orgPMML_4_0Taxonomy', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 351, 2), )


    Taxonomy = property(__Taxonomy.value, __Taxonomy.set, None, None)


    # Attribute numberOfFields uses Python identifier numberOfFields
    __numberOfFields = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfFields'), 'numberOfFields', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_7_numberOfFields', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfFields._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 231, 6)
    __numberOfFields._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 231, 6)

    numberOfFields = property(__numberOfFields.value, __numberOfFields.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DataField.name() : __DataField,
        __Taxonomy.name() : __Taxonomy
    })
    _AttributeMap.update({
        __numberOfFields.name() : __numberOfFields
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 343, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Apply uses Python identifier Apply
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Apply'), 'Apply', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0Apply', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2), )


    Apply = property(__Apply.value, __Apply.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Constant uses Python identifier Constant
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Constant'), 'Constant', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0Constant', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2), )


    Constant = property(__Constant.value, __Constant.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldRef uses Python identifier FieldRef
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), 'FieldRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0FieldRef', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2), )


    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormContinuous uses Python identifier NormContinuous
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), 'NormContinuous', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0NormContinuous', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2), )


    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormDiscrete uses Python identifier NormDiscrete
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), 'NormDiscrete', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0NormDiscrete', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2), )


    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Discretize uses Python identifier Discretize
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), 'Discretize', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0Discretize', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2), )


    Discretize = property(__Discretize.value, __Discretize.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MapValues uses Python identifier MapValues
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), 'MapValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0MapValues', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2), )


    MapValues = property(__MapValues.value, __MapValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Aggregate uses Python identifier Aggregate
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), 'Aggregate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_httpwww_dmg_orgPMML_4_0Aggregate', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2), )


    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)


    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_8_function', pyxb.binding.datatypes.string, required=True)
    __function._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 348, 6)
    __function._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 348, 6)

    function = property(__function.value, __function.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Apply.name() : __Apply,
        __Constant.name() : __Constant,
        __FieldRef.name() : __FieldRef,
        __NormContinuous.name() : __NormContinuous,
        __NormDiscrete.name() : __NormDiscrete,
        __Discretize.name() : __Discretize,
        __MapValues.name() : __MapValues,
        __Aggregate.name() : __Aggregate
    })
    _AttributeMap.update({
        __function.name() : __function
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 352, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_9_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ChildParent uses Python identifier ChildParent
    __ChildParent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ChildParent'), 'ChildParent', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_9_httpwww_dmg_orgPMML_4_0ChildParent', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 360, 2), )


    ChildParent = property(__ChildParent.value, __ChildParent.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_9_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 357, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 357, 6)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ChildParent.name() : __ChildParent
    })
    _AttributeMap.update({
        __name.name() : __name
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 383, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_10_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 390, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_11_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_11_httpwww_dmg_orgPMML_4_0row', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 397, 2), )


    row = property(__row.value, __row.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __row.name() : __row
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 398, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({

    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 421, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_13_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DefineFunction uses Python identifier DefineFunction
    __DefineFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DefineFunction'), 'DefineFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_13_httpwww_dmg_orgPMML_4_0DefineFunction', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 323, 2), )


    DefineFunction = property(__DefineFunction.value, __DefineFunction.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DerivedField uses Python identifier DerivedField
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), 'DerivedField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_13_httpwww_dmg_orgPMML_4_0DerivedField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2), )


    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DefineFunction.name() : __DefineFunction,
        __DerivedField.name() : __DerivedField
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 430, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_14_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DerivedField uses Python identifier DerivedField
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), 'DerivedField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_14_httpwww_dmg_orgPMML_4_0DerivedField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2), )


    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DerivedField.name() : __DerivedField
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 517, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_15_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Interval uses Python identifier Interval
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Interval'), 'Interval', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_15_httpwww_dmg_orgPMML_4_0Interval', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2), )


    Interval = property(__Interval.value, __Interval.set, None, None)


    # Attribute binValue uses Python identifier binValue
    __binValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'binValue'), 'binValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_15_binValue', pyxb.binding.datatypes.string, required=True)
    __binValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 522, 6)
    __binValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 522, 6)

    binValue = property(__binValue.value, __binValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Interval.name() : __Interval
    })
    _AttributeMap.update({
        __binValue.name() : __binValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 573, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_16_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningField uses Python identifier MiningField
    __MiningField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningField'), 'MiningField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_16_httpwww_dmg_orgPMML_4_0MiningField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 580, 2), )


    MiningField = property(__MiningField.value, __MiningField.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __MiningField.name() : __MiningField
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 632, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_17_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}UnivariateStats uses Python identifier UnivariateStats
    __UnivariateStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'UnivariateStats'), 'UnivariateStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_17_httpwww_dmg_orgPMML_4_0UnivariateStats', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 639, 2), )


    UnivariateStats = property(__UnivariateStats.value, __UnivariateStats.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __UnivariateStats.name() : __UnivariateStats
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 695, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_18_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_18_httpwww_dmg_orgPMML_4_0Array', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute modalValue uses Python identifier modalValue
    __modalValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modalValue'), 'modalValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_18_modalValue', pyxb.binding.datatypes.string)
    __modalValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 700, 6)
    __modalValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 700, 6)

    modalValue = property(__modalValue.value, __modalValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __modalValue.name() : __modalValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 779, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_19_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}OutputField uses Python identifier OutputField
    __OutputField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'OutputField'), 'OutputField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_19_httpwww_dmg_orgPMML_4_0OutputField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 786, 2), )


    OutputField = property(__OutputField.value, __OutputField.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __OutputField.name() : __OutputField
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 856, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_20_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Target uses Python identifier Target
    __Target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Target'), 'Target', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_20_httpwww_dmg_orgPMML_4_0Target', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 863, 2), )


    Target = property(__Target.value, __Target.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Target.name() : __Target
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 926, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_21_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralInput uses Python identifier NeuralInput
    __NeuralInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralInput'), 'NeuralInput', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_21_httpwww_dmg_orgPMML_4_0NeuralInput', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 987, 2), )


    NeuralInput = property(__NeuralInput.value, __NeuralInput.set, None, None)


    # Attribute numberOfInputs uses Python identifier numberOfInputs
    __numberOfInputs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfInputs'), 'numberOfInputs', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_21_numberOfInputs', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfInputs._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 931, 6)
    __numberOfInputs._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 931, 6)

    numberOfInputs = property(__numberOfInputs.value, __numberOfInputs.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __NeuralInput.name() : __NeuralInput
    })
    _AttributeMap.update({
        __numberOfInputs.name() : __numberOfInputs
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 949, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_22_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralOutput uses Python identifier NeuralOutput
    __NeuralOutput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutput'), 'NeuralOutput', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_22_httpwww_dmg_orgPMML_4_0NeuralOutput', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1017, 2), )


    NeuralOutput = property(__NeuralOutput.value, __NeuralOutput.set, None, None)


    # Attribute numberOfOutputs uses Python identifier numberOfOutputs
    __numberOfOutputs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfOutputs'), 'numberOfOutputs', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_22_numberOfOutputs', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfOutputs._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 954, 6)
    __numberOfOutputs._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 954, 6)

    numberOfOutputs = property(__numberOfOutputs.value, __numberOfOutputs.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __NeuralOutput.name() : __NeuralOutput
    })
    _AttributeMap.update({
        __numberOfOutputs.name() : __numberOfOutputs
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1057, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_23_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_23_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1065, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Partition uses Python identifier Partition
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Partition'), 'Partition', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_httpwww_dmg_orgPMML_4_0Partition', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2), )


    Partition = property(__Partition.value, __Partition.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}KohonenMap uses Python identifier KohonenMap
    __KohonenMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'KohonenMap'), 'KohonenMap', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_httpwww_dmg_orgPMML_4_0KohonenMap', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1077, 2), )


    KohonenMap = property(__KohonenMap.value, __KohonenMap.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Covariances uses Python identifier Covariances
    __Covariances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Covariances'), 'Covariances', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_httpwww_dmg_orgPMML_4_0Covariances', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1087, 2), )


    Covariances = property(__Covariances.value, __Covariances.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1073, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1073, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_24_size', pyxb.binding.datatypes.nonNegativeInteger)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1074, 6)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1074, 6)

    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array,
        __Partition.name() : __Partition,
        __KohonenMap.name() : __KohonenMap,
        __Covariances.name() : __Covariances
    })
    _AttributeMap.update({
        __name.name() : __name,
        __size.name() : __size
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1078, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_25_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute coord1 uses Python identifier coord1
    __coord1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coord1'), 'coord1', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_25_coord1', pyxb.binding.datatypes.float)
    __coord1._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1082, 6)
    __coord1._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1082, 6)

    coord1 = property(__coord1.value, __coord1.set, None, None)


    # Attribute coord2 uses Python identifier coord2
    __coord2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coord2'), 'coord2', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_25_coord2', pyxb.binding.datatypes.float)
    __coord2._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1083, 6)
    __coord2._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1083, 6)

    coord2 = property(__coord2.value, __coord2.set, None, None)


    # Attribute coord3 uses Python identifier coord3
    __coord3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coord3'), 'coord3', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_25_coord3', pyxb.binding.datatypes.float)
    __coord3._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1084, 6)
    __coord3._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1084, 6)

    coord3 = property(__coord3.value, __coord3.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __coord1.name() : __coord1,
        __coord2.name() : __coord2,
        __coord3.name() : __coord3
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1088, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_26_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_26_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1116, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_27_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_27_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1162, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_28_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1169, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_29_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1176, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_30_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1183, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_31_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1198, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_32_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1205, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_33_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1212, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_34_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1283, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_35_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute itemRef uses Python identifier itemRef
    __itemRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'itemRef'), 'itemRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_35_itemRef', pyxb.binding.datatypes.string, required=True)
    __itemRef._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1287, 6)
    __itemRef._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1287, 6)

    itemRef = property(__itemRef.value, __itemRef.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __itemRef.name() : __itemRef
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1423, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_36_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1430, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_37_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1618, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimplePredicate uses Python identifier SimplePredicate
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), 'SimplePredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0SimplePredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2), )


    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundPredicate uses Python identifier CompoundPredicate
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), 'CompoundPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0CompoundPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2), )


    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleSetPredicate uses Python identifier SimpleSetPredicate
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), 'SimpleSetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0SimpleSetPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2), )


    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}True uses Python identifier True_
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'True'), 'True_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0True', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2), )


    True_ = property(__True.value, __True.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}False uses Python identifier False_
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'False'), 'False_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0False', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2), )


    False_ = property(__False.value, __False.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleRule uses Python identifier SimpleRule
    __SimpleRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule'), 'SimpleRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0SimpleRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1602, 2), )


    SimpleRule = property(__SimpleRule.value, __SimpleRule.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundRule uses Python identifier CompoundRule
    __CompoundRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule'), 'CompoundRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_38_httpwww_dmg_orgPMML_4_0CompoundRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1617, 2), )


    CompoundRule = property(__CompoundRule.value, __CompoundRule.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __SimplePredicate.name() : __SimplePredicate,
        __CompoundPredicate.name() : __CompoundPredicate,
        __SimpleSetPredicate.name() : __SimpleSetPredicate,
        __True.name() : __True,
        __False.name() : __False,
        __SimpleRule.name() : __SimpleRule,
        __CompoundRule.name() : __CompoundRule
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1670, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_39_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_39_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1674, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1674, 6)

    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __description.name() : __description
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1815, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_40_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_40_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Taxonomy uses Python identifier Taxonomy
    __Taxonomy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy'), 'Taxonomy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_40_httpwww_dmg_orgPMML_4_0Taxonomy', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 351, 2), )


    Taxonomy = property(__Taxonomy.value, __Taxonomy.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array,
        __Taxonomy.name() : __Taxonomy
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1824, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_41_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextDocument uses Python identifier TextDocument
    __TextDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextDocument'), 'TextDocument', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_41_httpwww_dmg_orgPMML_4_0TextDocument', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1831, 2), )


    TextDocument = property(__TextDocument.value, __TextDocument.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TextDocument.name() : __TextDocument
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1843, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_42_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_42_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1969, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_43_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Parameter uses Python identifier Parameter
    __Parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Parameter'), 'Parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_43_httpwww_dmg_orgPMML_4_0Parameter', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1976, 2), )


    Parameter = property(__Parameter.value, __Parameter.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Parameter.name() : __Parameter
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1987, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_44_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Predictor uses Python identifier Predictor
    __Predictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Predictor'), 'Predictor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_44_httpwww_dmg_orgPMML_4_0Predictor', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2002, 2), )


    Predictor = property(__Predictor.value, __Predictor.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Predictor.name() : __Predictor
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1995, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_45_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Predictor uses Python identifier Predictor
    __Predictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Predictor'), 'Predictor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_45_httpwww_dmg_orgPMML_4_0Predictor', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2002, 2), )


    Predictor = property(__Predictor.value, __Predictor.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Predictor.name() : __Predictor
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2013, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_46_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PPCell uses Python identifier PPCell
    __PPCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PPCell'), 'PPCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_46_httpwww_dmg_orgPMML_4_0PPCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2020, 2), )


    PPCell = property(__PPCell.value, __PPCell.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __PPCell.name() : __PPCell
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2061, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_47_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PCell uses Python identifier PCell
    __PCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PCell'), 'PCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_47_httpwww_dmg_orgPMML_4_0PCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2068, 2), )


    PCell = property(__PCell.value, __PCell.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __PCell.name() : __PCell
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2112, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_48_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Value'), 'Value', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_48_httpwww_dmg_orgPMML_4_0Value', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2), )


    Value = property(__Value.value, __Value.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Interval uses Python identifier Interval
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Interval'), 'Interval', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_48_httpwww_dmg_orgPMML_4_0Interval', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2), )


    Interval = property(__Interval.value, __Interval.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Value.name() : __Value,
        __Interval.name() : __Interval
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2307, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_49_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Time'), 'Time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_49_httpwww_dmg_orgPMML_4_0Time', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2), )


    Time = property(__Time.value, __Time.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SequenceReference uses Python identifier SequenceReference
    __SequenceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference'), 'SequenceReference', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_49_httpwww_dmg_orgPMML_4_0SequenceReference', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2298, 2), )


    SequenceReference = property(__SequenceReference.value, __SequenceReference.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Time.name() : __Time,
        __SequenceReference.name() : __SequenceReference
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2314, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_50_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Time'), 'Time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_50_httpwww_dmg_orgPMML_4_0Time', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2), )


    Time = property(__Time.value, __Time.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SequenceReference uses Python identifier SequenceReference
    __SequenceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference'), 'SequenceReference', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_50_httpwww_dmg_orgPMML_4_0SequenceReference', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2298, 2), )


    SequenceReference = property(__SequenceReference.value, __SequenceReference.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Time.name() : __Time,
        __SequenceReference.name() : __SequenceReference
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2342, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_51_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BayesInput uses Python identifier BayesInput
    __BayesInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BayesInput'), 'BayesInput', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_51_httpwww_dmg_orgPMML_4_0BayesInput', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2349, 2), )


    BayesInput = property(__BayesInput.value, __BayesInput.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __BayesInput.name() : __BayesInput
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2350, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_52_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DerivedField uses Python identifier DerivedField
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), 'DerivedField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_52_httpwww_dmg_orgPMML_4_0DerivedField', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2), )


    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PairCounts uses Python identifier PairCounts
    __PairCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PairCounts'), 'PairCounts', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_52_httpwww_dmg_orgPMML_4_0PairCounts', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2368, 2), )


    PairCounts = property(__PairCounts.value, __PairCounts.set, None, None)


    # Attribute fieldName uses Python identifier fieldName
    __fieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldName'), 'fieldName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_52_fieldName', pyxb.binding.datatypes.string, required=True)
    __fieldName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2356, 6)
    __fieldName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2356, 6)

    fieldName = property(__fieldName.value, __fieldName.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DerivedField.name() : __DerivedField,
        __PairCounts.name() : __PairCounts
    })
    _AttributeMap.update({
        __fieldName.name() : __fieldName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2360, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_53_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TargetValueCounts uses Python identifier TargetValueCounts
    __TargetValueCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts'), 'TargetValueCounts', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_53_httpwww_dmg_orgPMML_4_0TargetValueCounts', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2377, 2), )


    TargetValueCounts = property(__TargetValueCounts.value, __TargetValueCounts.set, None, None)


    # Attribute fieldName uses Python identifier fieldName
    __fieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldName'), 'fieldName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_53_fieldName', pyxb.binding.datatypes.string, required=True)
    __fieldName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2365, 6)
    __fieldName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2365, 6)

    fieldName = property(__fieldName.value, __fieldName.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TargetValueCounts.name() : __TargetValueCounts
    })
    _AttributeMap.update({
        __fieldName.name() : __fieldName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2369, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_54_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TargetValueCounts uses Python identifier TargetValueCounts
    __TargetValueCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts'), 'TargetValueCounts', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_54_httpwww_dmg_orgPMML_4_0TargetValueCounts', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2377, 2), )


    TargetValueCounts = property(__TargetValueCounts.value, __TargetValueCounts.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_54_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2374, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2374, 6)

    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TargetValueCounts.name() : __TargetValueCounts
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2378, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_55_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TargetValueCount uses Python identifier TargetValueCount
    __TargetValueCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCount'), 'TargetValueCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_55_httpwww_dmg_orgPMML_4_0TargetValueCount', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2385, 2), )


    TargetValueCount = property(__TargetValueCount.value, __TargetValueCount.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TargetValueCount.name() : __TargetValueCount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2406, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_56_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}VerificationField uses Python identifier VerificationField
    __VerificationField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'VerificationField'), 'VerificationField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_56_httpwww_dmg_orgPMML_4_0VerificationField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2413, 2), )


    VerificationField = property(__VerificationField.value, __VerificationField.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __VerificationField.name() : __VerificationField
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2414, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_57_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_57_field', pyxb.binding.datatypes.string, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2418, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2418, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute column uses Python identifier column
    __column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'column'), 'column', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_57_column', pyxb.binding.datatypes.string)
    __column._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2419, 6)
    __column._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2419, 6)

    column = property(__column.value, __column.set, None, None)


    # Attribute precision uses Python identifier precision
    __precision = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'precision'), 'precision', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_57_precision', pyxb.binding.datatypes.double, unicode_default=u'1E-6')
    __precision._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2420, 6)
    __precision._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2420, 6)

    precision = property(__precision.value, __precision.set, None, None)


    # Attribute zeroThreshold uses Python identifier zeroThreshold
    __zeroThreshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zeroThreshold'), 'zeroThreshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_57_zeroThreshold', pyxb.binding.datatypes.double, unicode_default=u'1E-16')
    __zeroThreshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2421, 6)
    __zeroThreshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2421, 6)

    zeroThreshold = property(__zeroThreshold.value, __zeroThreshold.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field,
        __column.name() : __column,
        __precision.name() : __precision,
        __zeroThreshold.name() : __zeroThreshold
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2425, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_58_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PredictiveModelQuality uses Python identifier PredictiveModelQuality
    __PredictiveModelQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PredictiveModelQuality'), 'PredictiveModelQuality', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_58_httpwww_dmg_orgPMML_4_0PredictiveModelQuality', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2436, 2), )


    PredictiveModelQuality = property(__PredictiveModelQuality.value, __PredictiveModelQuality.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ClusteringModelQuality uses Python identifier ClusteringModelQuality
    __ClusteringModelQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModelQuality'), 'ClusteringModelQuality', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_58_httpwww_dmg_orgPMML_4_0ClusteringModelQuality', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2461, 2), )


    ClusteringModelQuality = property(__ClusteringModelQuality.value, __ClusteringModelQuality.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Correlations uses Python identifier Correlations
    __Correlations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Correlations'), 'Correlations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_58_httpwww_dmg_orgPMML_4_0Correlations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2588, 2), )


    Correlations = property(__Correlations.value, __Correlations.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __PredictiveModelQuality.name() : __PredictiveModelQuality,
        __ClusteringModelQuality.name() : __ClusteringModelQuality,
        __Correlations.name() : __Correlations
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2482, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_59_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LiftGraph uses Python identifier LiftGraph
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), 'LiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_59_httpwww_dmg_orgPMML_4_0LiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2), )


    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LiftGraph.name() : __LiftGraph
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2490, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_60_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LiftGraph uses Python identifier LiftGraph
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), 'LiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_60_httpwww_dmg_orgPMML_4_0LiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2), )


    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LiftGraph.name() : __LiftGraph
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2498, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_61_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LiftGraph uses Python identifier LiftGraph
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), 'LiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_61_httpwww_dmg_orgPMML_4_0LiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2), )


    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LiftGraph.name() : __LiftGraph
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2506, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_62_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}XCoordinates uses Python identifier XCoordinates
    __XCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates'), 'XCoordinates', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_62_httpwww_dmg_orgPMML_4_0XCoordinates', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2516, 2), )


    XCoordinates = property(__XCoordinates.value, __XCoordinates.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}YCoordinates uses Python identifier YCoordinates
    __YCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates'), 'YCoordinates', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_62_httpwww_dmg_orgPMML_4_0YCoordinates', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2524, 2), )


    YCoordinates = property(__YCoordinates.value, __YCoordinates.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BoundaryValues uses Python identifier BoundaryValues
    __BoundaryValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues'), 'BoundaryValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_62_httpwww_dmg_orgPMML_4_0BoundaryValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2532, 2), )


    BoundaryValues = property(__BoundaryValues.value, __BoundaryValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BoundaryValueMeans uses Python identifier BoundaryValueMeans
    __BoundaryValueMeans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValueMeans'), 'BoundaryValueMeans', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_62_httpwww_dmg_orgPMML_4_0BoundaryValueMeans', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2540, 2), )


    BoundaryValueMeans = property(__BoundaryValueMeans.value, __BoundaryValueMeans.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __XCoordinates.name() : __XCoordinates,
        __YCoordinates.name() : __YCoordinates,
        __BoundaryValues.name() : __BoundaryValues,
        __BoundaryValueMeans.name() : __BoundaryValueMeans
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2517, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_63_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_63_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2525, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_64_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_64_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2533, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_65_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_65_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2541, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_66_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_66_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2549, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ROCGraph uses Python identifier ROCGraph
    __ROCGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ROCGraph'), 'ROCGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_httpwww_dmg_orgPMML_4_0ROCGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2561, 2), )


    ROCGraph = property(__ROCGraph.value, __ROCGraph.set, None, None)


    # Attribute positiveTargetFieldValue uses Python identifier positiveTargetFieldValue
    __positiveTargetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'positiveTargetFieldValue'), 'positiveTargetFieldValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_positiveTargetFieldValue', pyxb.binding.datatypes.string, required=True)
    __positiveTargetFieldValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2554, 6)
    __positiveTargetFieldValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2554, 6)

    positiveTargetFieldValue = property(__positiveTargetFieldValue.value, __positiveTargetFieldValue.set, None, None)


    # Attribute positiveTargetFieldDisplayValue uses Python identifier positiveTargetFieldDisplayValue
    __positiveTargetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'positiveTargetFieldDisplayValue'), 'positiveTargetFieldDisplayValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_positiveTargetFieldDisplayValue', pyxb.binding.datatypes.string)
    __positiveTargetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2556, 6)
    __positiveTargetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2556, 6)

    positiveTargetFieldDisplayValue = property(__positiveTargetFieldDisplayValue.value, __positiveTargetFieldDisplayValue.set, None, None)


    # Attribute negativeTargetFieldValue uses Python identifier negativeTargetFieldValue
    __negativeTargetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'negativeTargetFieldValue'), 'negativeTargetFieldValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_negativeTargetFieldValue', pyxb.binding.datatypes.string)
    __negativeTargetFieldValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2557, 6)
    __negativeTargetFieldValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2557, 6)

    negativeTargetFieldValue = property(__negativeTargetFieldValue.value, __negativeTargetFieldValue.set, None, None)


    # Attribute negativeTargetFieldDisplayValue uses Python identifier negativeTargetFieldDisplayValue
    __negativeTargetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'negativeTargetFieldDisplayValue'), 'negativeTargetFieldDisplayValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_67_negativeTargetFieldDisplayValue', pyxb.binding.datatypes.string)
    __negativeTargetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2558, 6)
    __negativeTargetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2558, 6)

    negativeTargetFieldDisplayValue = property(__negativeTargetFieldDisplayValue.value, __negativeTargetFieldDisplayValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ROCGraph.name() : __ROCGraph
    })
    _AttributeMap.update({
        __positiveTargetFieldValue.name() : __positiveTargetFieldValue,
        __positiveTargetFieldDisplayValue.name() : __positiveTargetFieldDisplayValue,
        __negativeTargetFieldValue.name() : __negativeTargetFieldValue,
        __negativeTargetFieldDisplayValue.name() : __negativeTargetFieldDisplayValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2562, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_68_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}XCoordinates uses Python identifier XCoordinates
    __XCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates'), 'XCoordinates', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_68_httpwww_dmg_orgPMML_4_0XCoordinates', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2516, 2), )


    XCoordinates = property(__XCoordinates.value, __XCoordinates.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}YCoordinates uses Python identifier YCoordinates
    __YCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates'), 'YCoordinates', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_68_httpwww_dmg_orgPMML_4_0YCoordinates', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2524, 2), )


    YCoordinates = property(__YCoordinates.value, __YCoordinates.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BoundaryValues uses Python identifier BoundaryValues
    __BoundaryValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues'), 'BoundaryValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_68_httpwww_dmg_orgPMML_4_0BoundaryValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2532, 2), )


    BoundaryValues = property(__BoundaryValues.value, __BoundaryValues.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __XCoordinates.name() : __XCoordinates,
        __YCoordinates.name() : __YCoordinates,
        __BoundaryValues.name() : __BoundaryValues
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2572, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_69_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_69_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ClassLabels uses Python identifier ClassLabels
    __ClassLabels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ClassLabels'), 'ClassLabels', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_69_httpwww_dmg_orgPMML_4_0ClassLabels', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2580, 2), )


    ClassLabels = property(__ClassLabels.value, __ClassLabels.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix,
        __ClassLabels.name() : __ClassLabels
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2581, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_70_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_70_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2589, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_71_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CorrelationFields uses Python identifier CorrelationFields
    __CorrelationFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CorrelationFields'), 'CorrelationFields', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_71_httpwww_dmg_orgPMML_4_0CorrelationFields', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2598, 2), )


    CorrelationFields = property(__CorrelationFields.value, __CorrelationFields.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CorrelationValues uses Python identifier CorrelationValues
    __CorrelationValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CorrelationValues'), 'CorrelationValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_71_httpwww_dmg_orgPMML_4_0CorrelationValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2606, 2), )


    CorrelationValues = property(__CorrelationValues.value, __CorrelationValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CorrelationMethods uses Python identifier CorrelationMethods
    __CorrelationMethods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CorrelationMethods'), 'CorrelationMethods', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_71_httpwww_dmg_orgPMML_4_0CorrelationMethods', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2614, 2), )


    CorrelationMethods = property(__CorrelationMethods.value, __CorrelationMethods.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __CorrelationFields.name() : __CorrelationFields,
        __CorrelationValues.name() : __CorrelationValues,
        __CorrelationMethods.name() : __CorrelationMethods
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2599, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_72_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_72_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2607, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_73_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_73_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2615, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_74_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_74_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({

    })



# Complex type {http://www.dmg.org/PMML-4_0}ArrayType with content type MIXED
class ArrayType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.dmg.org/PMML-4_0}ArrayType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ArrayType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 90, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpwww_dmg_orgPMML_4_0_ArrayType_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 91, 4)
    __n._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 91, 4)

    n = property(__n.value, __n.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_ArrayType_type', STD_ANON, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 92, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 92, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __n.name() : __n,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'ArrayType', ArrayType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 124, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Indices uses Python identifier Indices
    __Indices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Indices'), 'Indices', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_75_httpwww_dmg_orgPMML_4_0Indices', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 143, 2), )


    Indices = property(__Indices.value, __Indices.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}INT-Entries uses Python identifier INT_Entries
    __INT_Entries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'INT-Entries'), 'INT_Entries', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_75_httpwww_dmg_orgPMML_4_0INT_Entries', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 148, 2), )


    INT_Entries = property(__INT_Entries.value, __INT_Entries.set, None, None)


    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_75_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 129, 6)
    __n._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 129, 6)

    n = property(__n.value, __n.set, None, None)


    # Attribute defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultValue'), 'defaultValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_75_defaultValue', INT_NUMBER, unicode_default=u'0')
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 130, 6)
    __defaultValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 130, 6)

    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)

    _ElementMap.update({
        __Indices.name() : __Indices,
        __INT_Entries.name() : __INT_Entries
    })
    _AttributeMap.update({
        __n.name() : __n,
        __defaultValue.name() : __defaultValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 134, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Indices uses Python identifier Indices
    __Indices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Indices'), 'Indices', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_76_httpwww_dmg_orgPMML_4_0Indices', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 143, 2), )


    Indices = property(__Indices.value, __Indices.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}REAL-Entries uses Python identifier REAL_Entries
    __REAL_Entries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'REAL-Entries'), 'REAL_Entries', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_76_httpwww_dmg_orgPMML_4_0REAL_Entries', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 153, 2), )


    REAL_Entries = property(__REAL_Entries.value, __REAL_Entries.set, None, None)


    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_76_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 139, 6)
    __n._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 139, 6)

    n = property(__n.value, __n.set, None, None)


    # Attribute defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultValue'), 'defaultValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_76_defaultValue', REAL_NUMBER, unicode_default=u'0')
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 140, 6)
    __defaultValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 140, 6)

    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)

    _ElementMap.update({
        __Indices.name() : __Indices,
        __REAL_Entries.name() : __REAL_Entries
    })
    _AttributeMap.update({
        __n.name() : __n,
        __defaultValue.name() : __defaultValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 159, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_httpwww_dmg_orgPMML_4_0Array', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MatCell uses Python identifier MatCell
    __MatCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MatCell'), 'MatCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_httpwww_dmg_orgPMML_4_0MatCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 179, 2), )


    MatCell = property(__MatCell.value, __MatCell.set, None, None)


    # Attribute kind uses Python identifier kind
    __kind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kind'), 'kind', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_kind', STD_ANON_4, unicode_default=u'any')
    __kind._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 164, 6)
    __kind._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 164, 6)

    kind = property(__kind.value, __kind.set, None, None)


    # Attribute nbRows uses Python identifier nbRows
    __nbRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nbRows'), 'nbRows', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_nbRows', INT_NUMBER)
    __nbRows._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 173, 6)
    __nbRows._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 173, 6)

    nbRows = property(__nbRows.value, __nbRows.set, None, None)


    # Attribute nbCols uses Python identifier nbCols
    __nbCols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nbCols'), 'nbCols', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_nbCols', INT_NUMBER)
    __nbCols._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 174, 6)
    __nbCols._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 174, 6)

    nbCols = property(__nbCols.value, __nbCols.set, None, None)


    # Attribute diagDefault uses Python identifier diagDefault
    __diagDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'diagDefault'), 'diagDefault', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_diagDefault', REAL_NUMBER)
    __diagDefault._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 175, 6)
    __diagDefault._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 175, 6)

    diagDefault = property(__diagDefault.value, __diagDefault.set, None, None)


    # Attribute offDiagDefault uses Python identifier offDiagDefault
    __offDiagDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'offDiagDefault'), 'offDiagDefault', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_77_offDiagDefault', REAL_NUMBER)
    __offDiagDefault._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 176, 6)
    __offDiagDefault._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 176, 6)

    offDiagDefault = property(__offDiagDefault.value, __offDiagDefault.set, None, None)

    _ElementMap.update({
        __Array.name() : __Array,
        __MatCell.name() : __MatCell
    })
    _AttributeMap.update({
        __kind.name() : __kind,
        __nbRows.name() : __nbRows,
        __nbCols.name() : __nbCols,
        __diagDefault.name() : __diagDefault,
        __offDiagDefault.name() : __offDiagDefault
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 180, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute row uses Python identifier row
    __row = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'row'), 'row', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_78_row', INT_NUMBER, required=True)
    __row._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 183, 10)
    __row._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 183, 10)

    row = property(__row.value, __row.set, None, None)


    # Attribute col uses Python identifier col
    __col = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'col'), 'col', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_78_col', INT_NUMBER, required=True)
    __col._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 184, 10)
    __col._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 184, 10)

    col = property(__col.value, __col.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __row.name() : __row,
        __col.name() : __col
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 235, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Value'), 'Value', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_httpwww_dmg_orgPMML_4_0Value', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2), )


    Value = property(__Value.value, __Value.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Interval uses Python identifier Interval
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Interval'), 'Interval', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_httpwww_dmg_orgPMML_4_0Interval', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2), )


    Interval = property(__Interval.value, __Interval.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 243, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 243, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 244, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 244, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 245, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 245, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_dataType', DATATYPE, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 246, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 246, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)


    # Attribute taxonomy uses Python identifier taxonomy
    __taxonomy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'taxonomy'), 'taxonomy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_taxonomy', pyxb.binding.datatypes.string)
    __taxonomy._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 247, 6)
    __taxonomy._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 247, 6)

    taxonomy = property(__taxonomy.value, __taxonomy.set, None, None)


    # Attribute isCyclic uses Python identifier isCyclic
    __isCyclic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isCyclic'), 'isCyclic', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_79_isCyclic', STD_ANON_5, unicode_default=u'0')
    __isCyclic._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 248, 6)
    __isCyclic._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 248, 6)

    isCyclic = property(__isCyclic.value, __isCyclic.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Value.name() : __Value,
        __Interval.name() : __Interval
    })
    _AttributeMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __optype.name() : __optype,
        __dataType.name() : __dataType,
        __taxonomy.name() : __taxonomy,
        __isCyclic.name() : __isCyclic
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 287, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_80_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_80_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 291, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 291, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute displayValue uses Python identifier displayValue
    __displayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayValue'), 'displayValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_80_displayValue', pyxb.binding.datatypes.string)
    __displayValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 292, 6)
    __displayValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 292, 6)

    displayValue = property(__displayValue.value, __displayValue.set, None, None)


    # Attribute property uses Python identifier property_
    __property = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'property'), 'property_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_80_property', STD_ANON_6, unicode_default=u'valid')
    __property._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 293, 6)
    __property._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 293, 6)

    property_ = property(__property.value, __property.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __value.name() : __value,
        __displayValue.name() : __displayValue,
        __property.name() : __property
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 305, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_81_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute closure uses Python identifier closure
    __closure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'closure'), 'closure', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_81_closure', STD_ANON_7, required=True)
    __closure._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 309, 6)
    __closure._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 309, 6)

    closure = property(__closure.value, __closure.set, None, None)


    # Attribute leftMargin uses Python identifier leftMargin
    __leftMargin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'leftMargin'), 'leftMargin', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_81_leftMargin', NUMBER)
    __leftMargin._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 319, 6)
    __leftMargin._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 319, 6)

    leftMargin = property(__leftMargin.value, __leftMargin.set, None, None)


    # Attribute rightMargin uses Python identifier rightMargin
    __rightMargin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rightMargin'), 'rightMargin', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_81_rightMargin', NUMBER)
    __rightMargin._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 320, 6)
    __rightMargin._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 320, 6)

    rightMargin = property(__rightMargin.value, __rightMargin.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __closure.name() : __closure,
        __leftMargin.name() : __leftMargin,
        __rightMargin.name() : __rightMargin
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 324, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ParameterField uses Python identifier ParameterField
    __ParameterField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ParameterField'), 'ParameterField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0ParameterField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 335, 2), )


    ParameterField = property(__ParameterField.value, __ParameterField.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Apply uses Python identifier Apply
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Apply'), 'Apply', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0Apply', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2), )


    Apply = property(__Apply.value, __Apply.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Constant uses Python identifier Constant
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Constant'), 'Constant', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0Constant', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2), )


    Constant = property(__Constant.value, __Constant.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldRef uses Python identifier FieldRef
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), 'FieldRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0FieldRef', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2), )


    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormContinuous uses Python identifier NormContinuous
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), 'NormContinuous', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0NormContinuous', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2), )


    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormDiscrete uses Python identifier NormDiscrete
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), 'NormDiscrete', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0NormDiscrete', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2), )


    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Discretize uses Python identifier Discretize
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), 'Discretize', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0Discretize', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2), )


    Discretize = property(__Discretize.value, __Discretize.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MapValues uses Python identifier MapValues
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), 'MapValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0MapValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2), )


    MapValues = property(__MapValues.value, __MapValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Aggregate uses Python identifier Aggregate
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), 'Aggregate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_httpwww_dmg_orgPMML_4_0Aggregate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2), )


    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 330, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 330, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 331, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 331, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_82_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 332, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 332, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ParameterField.name() : __ParameterField,
        __Apply.name() : __Apply,
        __Constant.name() : __Constant,
        __FieldRef.name() : __FieldRef,
        __NormContinuous.name() : __NormContinuous,
        __NormDiscrete.name() : __NormDiscrete,
        __Discretize.name() : __Discretize,
        __MapValues.name() : __MapValues,
        __Aggregate.name() : __Aggregate
    })
    _AttributeMap.update({
        __name.name() : __name,
        __optype.name() : __optype,
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 336, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_83_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 337, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 337, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_83_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 338, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 338, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_83_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 339, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 339, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __name.name() : __name,
        __optype.name() : __optype,
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 361, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TableLocator uses Python identifier TableLocator
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TableLocator'), 'TableLocator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_httpwww_dmg_orgPMML_4_0TableLocator', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 382, 2), )


    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}InlineTable uses Python identifier InlineTable
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), 'InlineTable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_httpwww_dmg_orgPMML_4_0InlineTable', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2), )


    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)


    # Attribute childField uses Python identifier childField
    __childField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'childField'), 'childField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_childField', pyxb.binding.datatypes.string, required=True)
    __childField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 369, 6)
    __childField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 369, 6)

    childField = property(__childField.value, __childField.set, None, None)


    # Attribute parentField uses Python identifier parentField
    __parentField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentField'), 'parentField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_parentField', pyxb.binding.datatypes.string, required=True)
    __parentField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 370, 6)
    __parentField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 370, 6)

    parentField = property(__parentField.value, __parentField.set, None, None)


    # Attribute parentLevelField uses Python identifier parentLevelField
    __parentLevelField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentLevelField'), 'parentLevelField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_parentLevelField', pyxb.binding.datatypes.string)
    __parentLevelField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 371, 6)
    __parentLevelField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 371, 6)

    parentLevelField = property(__parentLevelField.value, __parentLevelField.set, None, None)


    # Attribute isRecursive uses Python identifier isRecursive
    __isRecursive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isRecursive'), 'isRecursive', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_84_isRecursive', STD_ANON_8, unicode_default=u'no')
    __isRecursive._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 372, 6)
    __isRecursive._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 372, 6)

    isRecursive = property(__isRecursive.value, __isRecursive.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TableLocator.name() : __TableLocator,
        __InlineTable.name() : __InlineTable
    })
    _AttributeMap.update({
        __childField.name() : __childField,
        __parentField.name() : __parentField,
        __parentLevelField.name() : __parentLevelField,
        __isRecursive.name() : __isRecursive
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 438, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Value'), 'Value', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Value', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2), )


    Value = property(__Value.value, __Value.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Apply uses Python identifier Apply
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Apply'), 'Apply', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Apply', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2), )


    Apply = property(__Apply.value, __Apply.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Constant uses Python identifier Constant
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Constant'), 'Constant', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Constant', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2), )


    Constant = property(__Constant.value, __Constant.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldRef uses Python identifier FieldRef
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), 'FieldRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0FieldRef', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2), )


    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormContinuous uses Python identifier NormContinuous
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), 'NormContinuous', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0NormContinuous', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2), )


    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NormDiscrete uses Python identifier NormDiscrete
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), 'NormDiscrete', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0NormDiscrete', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2), )


    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Discretize uses Python identifier Discretize
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), 'Discretize', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Discretize', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2), )


    Discretize = property(__Discretize.value, __Discretize.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MapValues uses Python identifier MapValues
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), 'MapValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0MapValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2), )


    MapValues = property(__MapValues.value, __MapValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Aggregate uses Python identifier Aggregate
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), 'Aggregate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_httpwww_dmg_orgPMML_4_0Aggregate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2), )


    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_name', FIELD_NAME)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 444, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 444, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 445, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 445, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 446, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 446, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_85_dataType', DATATYPE, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 447, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 447, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Value.name() : __Value,
        __Apply.name() : __Apply,
        __Constant.name() : __Constant,
        __FieldRef.name() : __FieldRef,
        __NormContinuous.name() : __NormContinuous,
        __NormDiscrete.name() : __NormDiscrete,
        __Discretize.name() : __Discretize,
        __MapValues.name() : __MapValues,
        __Aggregate.name() : __Aggregate
    })
    _AttributeMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __optype.name() : __optype,
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 451, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_86_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 454, 10)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 454, 10)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 460, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_87_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_87_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 464, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 464, 6)

    field = property(__field.value, __field.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 468, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_88_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LinearNorm uses Python identifier LinearNorm
    __LinearNorm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LinearNorm'), 'LinearNorm', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_88_httpwww_dmg_orgPMML_4_0LinearNorm', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 478, 2), )


    LinearNorm = property(__LinearNorm.value, __LinearNorm.set, None, None)


    # Attribute mapMissingTo uses Python identifier mapMissingTo
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapMissingTo'), 'mapMissingTo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_88_mapMissingTo', NUMBER)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 473, 6)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 473, 6)

    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_88_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 474, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 474, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute outliers uses Python identifier outliers
    __outliers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outliers'), 'outliers', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_88_outliers', OUTLIER_TREATMENT_METHOD, unicode_default=u'asIs')
    __outliers._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 475, 6)
    __outliers._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 475, 6)

    outliers = property(__outliers.value, __outliers.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LinearNorm.name() : __LinearNorm
    })
    _AttributeMap.update({
        __mapMissingTo.name() : __mapMissingTo,
        __field.name() : __field,
        __outliers.name() : __outliers
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 479, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_89_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute orig uses Python identifier orig
    __orig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orig'), 'orig', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_89_orig', NUMBER, required=True)
    __orig._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 483, 6)
    __orig._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 483, 6)

    orig = property(__orig.value, __orig.set, None, None)


    # Attribute norm uses Python identifier norm
    __norm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'norm'), 'norm', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_89_norm', NUMBER, required=True)
    __norm._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 484, 6)
    __norm._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 484, 6)

    norm = property(__norm.value, __norm.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __orig.name() : __orig,
        __norm.name() : __norm
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 488, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_90_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_90_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 492, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 492, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute method uses Python identifier method
    __method = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'method'), 'method', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_90_method', STD_ANON_9, fixed=True, unicode_default=u'indicator')
    __method._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 493, 6)
    __method._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 493, 6)

    method = property(__method.value, __method.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_90_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 500, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 500, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute mapMissingTo uses Python identifier mapMissingTo
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapMissingTo'), 'mapMissingTo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_90_mapMissingTo', NUMBER)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 501, 6)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 501, 6)

    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field,
        __method.name() : __method,
        __value.name() : __value,
        __mapMissingTo.name() : __mapMissingTo
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 505, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DiscretizeBin uses Python identifier DiscretizeBin
    __DiscretizeBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DiscretizeBin'), 'DiscretizeBin', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_httpwww_dmg_orgPMML_4_0DiscretizeBin', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 516, 2), )


    DiscretizeBin = property(__DiscretizeBin.value, __DiscretizeBin.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 510, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 510, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute mapMissingTo uses Python identifier mapMissingTo
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapMissingTo'), 'mapMissingTo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 511, 6)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 511, 6)

    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)


    # Attribute defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultValue'), 'defaultValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_defaultValue', pyxb.binding.datatypes.string)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 512, 6)
    __defaultValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 512, 6)

    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_91_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 513, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 513, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DiscretizeBin.name() : __DiscretizeBin
    })
    _AttributeMap.update({
        __field.name() : __field,
        __mapMissingTo.name() : __mapMissingTo,
        __defaultValue.name() : __defaultValue,
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 526, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TableLocator uses Python identifier TableLocator
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TableLocator'), 'TableLocator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_httpwww_dmg_orgPMML_4_0TableLocator', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 382, 2), )


    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}InlineTable uses Python identifier InlineTable
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), 'InlineTable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_httpwww_dmg_orgPMML_4_0InlineTable', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2), )


    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldColumnPair uses Python identifier FieldColumnPair
    __FieldColumnPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldColumnPair'), 'FieldColumnPair', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_httpwww_dmg_orgPMML_4_0FieldColumnPair', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 541, 2), )


    FieldColumnPair = property(__FieldColumnPair.value, __FieldColumnPair.set, None, None)


    # Attribute mapMissingTo uses Python identifier mapMissingTo
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapMissingTo'), 'mapMissingTo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 535, 6)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 535, 6)

    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)


    # Attribute defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultValue'), 'defaultValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_defaultValue', pyxb.binding.datatypes.string)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 536, 6)
    __defaultValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 536, 6)

    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)


    # Attribute outputColumn uses Python identifier outputColumn
    __outputColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outputColumn'), 'outputColumn', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_outputColumn', pyxb.binding.datatypes.string, required=True)
    __outputColumn._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 537, 6)
    __outputColumn._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 537, 6)

    outputColumn = property(__outputColumn.value, __outputColumn.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_92_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 538, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 538, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TableLocator.name() : __TableLocator,
        __InlineTable.name() : __InlineTable,
        __FieldColumnPair.name() : __FieldColumnPair
    })
    _AttributeMap.update({
        __mapMissingTo.name() : __mapMissingTo,
        __defaultValue.name() : __defaultValue,
        __outputColumn.name() : __outputColumn,
        __dataType.name() : __dataType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 542, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_93_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_93_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 546, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 546, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute column uses Python identifier column
    __column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'column'), 'column', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_93_column', pyxb.binding.datatypes.string, required=True)
    __column._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 547, 6)
    __column._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 547, 6)

    column = property(__column.value, __column.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field,
        __column.name() : __column
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 551, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_94_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_94_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 555, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 555, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_94_function', STD_ANON_10, required=True)
    __function._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 556, 6)
    __function._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 556, 6)

    function = property(__function.value, __function.set, None, None)


    # Attribute groupField uses Python identifier groupField
    __groupField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'groupField'), 'groupField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_94_groupField', FIELD_NAME)
    __groupField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 568, 6)
    __groupField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 568, 6)

    groupField = property(__groupField.value, __groupField.set, None, None)


    # Attribute sqlWhere uses Python identifier sqlWhere
    __sqlWhere = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqlWhere'), 'sqlWhere', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_94_sqlWhere', pyxb.binding.datatypes.string)
    __sqlWhere._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 569, 6)
    __sqlWhere._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 569, 6)

    sqlWhere = property(__sqlWhere.value, __sqlWhere.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field,
        __function.name() : __function,
        __groupField.name() : __groupField,
        __sqlWhere.name() : __sqlWhere
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 581, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 585, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 585, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute usageType uses Python identifier usageType
    __usageType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usageType'), 'usageType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_usageType', FIELD_USAGE_TYPE, unicode_default=u'active')
    __usageType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 586, 6)
    __usageType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 586, 6)

    usageType = property(__usageType.value, __usageType.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 587, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 587, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute importance uses Python identifier importance
    __importance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'importance'), 'importance', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_importance', PROB_NUMBER)
    __importance._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 588, 6)
    __importance._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 588, 6)

    importance = property(__importance.value, __importance.set, None, None)


    # Attribute outliers uses Python identifier outliers
    __outliers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outliers'), 'outliers', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_outliers', OUTLIER_TREATMENT_METHOD, unicode_default=u'asIs')
    __outliers._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 589, 6)
    __outliers._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 589, 6)

    outliers = property(__outliers.value, __outliers.set, None, None)


    # Attribute lowValue uses Python identifier lowValue
    __lowValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lowValue'), 'lowValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_lowValue', NUMBER)
    __lowValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 590, 6)
    __lowValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 590, 6)

    lowValue = property(__lowValue.value, __lowValue.set, None, None)


    # Attribute highValue uses Python identifier highValue
    __highValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'highValue'), 'highValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_highValue', NUMBER)
    __highValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 591, 6)
    __highValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 591, 6)

    highValue = property(__highValue.value, __highValue.set, None, None)


    # Attribute missingValueReplacement uses Python identifier missingValueReplacement
    __missingValueReplacement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValueReplacement'), 'missingValueReplacement', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_missingValueReplacement', pyxb.binding.datatypes.string)
    __missingValueReplacement._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 592, 6)
    __missingValueReplacement._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 592, 6)

    missingValueReplacement = property(__missingValueReplacement.value, __missingValueReplacement.set, None, None)


    # Attribute missingValueTreatment uses Python identifier missingValueTreatment
    __missingValueTreatment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValueTreatment'), 'missingValueTreatment', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_missingValueTreatment', MISSING_VALUE_TREATMENT_METHOD)
    __missingValueTreatment._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 593, 6)
    __missingValueTreatment._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 593, 6)

    missingValueTreatment = property(__missingValueTreatment.value, __missingValueTreatment.set, None, None)


    # Attribute invalidValueTreatment uses Python identifier invalidValueTreatment
    __invalidValueTreatment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalidValueTreatment'), 'invalidValueTreatment', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_95_invalidValueTreatment', INVALID_VALUE_TREATMENT_METHOD, unicode_default=u'returnInvalid')
    __invalidValueTreatment._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 594, 6)
    __invalidValueTreatment._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 594, 6)

    invalidValueTreatment = property(__invalidValueTreatment.value, __invalidValueTreatment.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __usageType.name() : __usageType,
        __optype.name() : __optype,
        __importance.name() : __importance,
        __outliers.name() : __outliers,
        __lowValue.name() : __lowValue,
        __highValue.name() : __highValue,
        __missingValueReplacement.name() : __missingValueReplacement,
        __missingValueTreatment.name() : __missingValueTreatment,
        __invalidValueTreatment.name() : __invalidValueTreatment
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 640, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Counts uses Python identifier Counts
    __Counts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Counts'), 'Counts', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0Counts', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 660, 2), )


    Counts = property(__Counts.value, __Counts.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NumericInfo uses Python identifier NumericInfo
    __NumericInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo'), 'NumericInfo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0NumericInfo', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 671, 2), )


    NumericInfo = property(__NumericInfo.value, __NumericInfo.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DiscrStats uses Python identifier DiscrStats
    __DiscrStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DiscrStats'), 'DiscrStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0DiscrStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 694, 2), )


    DiscrStats = property(__DiscrStats.value, __DiscrStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ContStats uses Python identifier ContStats
    __ContStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ContStats'), 'ContStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0ContStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 703, 2), )


    ContStats = property(__ContStats.value, __ContStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Anova uses Python identifier Anova
    __Anova = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Anova'), 'Anova', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_httpwww_dmg_orgPMML_4_0Anova', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 719, 2), )


    Anova = property(__Anova.value, __Anova.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_field', FIELD_NAME)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 649, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 649, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute weighted uses Python identifier weighted
    __weighted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weighted'), 'weighted', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_96_weighted', STD_ANON_11, unicode_default=u'0')
    __weighted._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 650, 6)
    __weighted._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 650, 6)

    weighted = property(__weighted.value, __weighted.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Counts.name() : __Counts,
        __NumericInfo.name() : __NumericInfo,
        __DiscrStats.name() : __DiscrStats,
        __ContStats.name() : __ContStats,
        __Anova.name() : __Anova
    })
    _AttributeMap.update({
        __field.name() : __field,
        __weighted.name() : __weighted
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 661, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_97_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute totalFreq uses Python identifier totalFreq
    __totalFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalFreq'), 'totalFreq', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_97_totalFreq', NUMBER, required=True)
    __totalFreq._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 665, 6)
    __totalFreq._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 665, 6)

    totalFreq = property(__totalFreq.value, __totalFreq.set, None, None)


    # Attribute missingFreq uses Python identifier missingFreq
    __missingFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingFreq'), 'missingFreq', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_97_missingFreq', NUMBER)
    __missingFreq._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 666, 6)
    __missingFreq._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 666, 6)

    missingFreq = property(__missingFreq.value, __missingFreq.set, None, None)


    # Attribute invalidFreq uses Python identifier invalidFreq
    __invalidFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalidFreq'), 'invalidFreq', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_97_invalidFreq', NUMBER)
    __invalidFreq._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 667, 6)
    __invalidFreq._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 667, 6)

    invalidFreq = property(__invalidFreq.value, __invalidFreq.set, None, None)


    # Attribute cardinality uses Python identifier cardinality
    __cardinality = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cardinality'), 'cardinality', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_97_cardinality', pyxb.binding.datatypes.nonNegativeInteger)
    __cardinality._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 668, 6)
    __cardinality._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 668, 6)

    cardinality = property(__cardinality.value, __cardinality.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __totalFreq.name() : __totalFreq,
        __missingFreq.name() : __missingFreq,
        __invalidFreq.name() : __invalidFreq,
        __cardinality.name() : __cardinality
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 672, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Quantile uses Python identifier Quantile
    __Quantile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Quantile'), 'Quantile', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_httpwww_dmg_orgPMML_4_0Quantile', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 685, 2), )


    Quantile = property(__Quantile.value, __Quantile.set, None, None)


    # Attribute minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimum'), 'minimum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_minimum', NUMBER)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 677, 6)
    __minimum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 677, 6)

    minimum = property(__minimum.value, __minimum.set, None, None)


    # Attribute maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximum'), 'maximum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_maximum', NUMBER)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 678, 6)
    __maximum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 678, 6)

    maximum = property(__maximum.value, __maximum.set, None, None)


    # Attribute mean uses Python identifier mean
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mean'), 'mean', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_mean', NUMBER)
    __mean._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 679, 6)
    __mean._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 679, 6)

    mean = property(__mean.value, __mean.set, None, None)


    # Attribute standardDeviation uses Python identifier standardDeviation
    __standardDeviation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'standardDeviation'), 'standardDeviation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_standardDeviation', NUMBER)
    __standardDeviation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 680, 6)
    __standardDeviation._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 680, 6)

    standardDeviation = property(__standardDeviation.value, __standardDeviation.set, None, None)


    # Attribute median uses Python identifier median
    __median = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'median'), 'median', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_median', NUMBER)
    __median._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 681, 6)
    __median._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 681, 6)

    median = property(__median.value, __median.set, None, None)


    # Attribute interQuartileRange uses Python identifier interQuartileRange
    __interQuartileRange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interQuartileRange'), 'interQuartileRange', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_98_interQuartileRange', NUMBER)
    __interQuartileRange._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 682, 6)
    __interQuartileRange._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 682, 6)

    interQuartileRange = property(__interQuartileRange.value, __interQuartileRange.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Quantile.name() : __Quantile
    })
    _AttributeMap.update({
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __mean.name() : __mean,
        __standardDeviation.name() : __standardDeviation,
        __median.name() : __median,
        __interQuartileRange.name() : __interQuartileRange
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 686, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_99_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute quantileLimit uses Python identifier quantileLimit
    __quantileLimit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'quantileLimit'), 'quantileLimit', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_99_quantileLimit', PERCENTAGE_NUMBER, required=True)
    __quantileLimit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 690, 6)
    __quantileLimit._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 690, 6)

    quantileLimit = property(__quantileLimit.value, __quantileLimit.set, None, None)


    # Attribute quantileValue uses Python identifier quantileValue
    __quantileValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'quantileValue'), 'quantileValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_99_quantileValue', NUMBER, required=True)
    __quantileValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 691, 6)
    __quantileValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 691, 6)

    quantileValue = property(__quantileValue.value, __quantileValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __quantileLimit.name() : __quantileLimit,
        __quantileValue.name() : __quantileValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 704, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_100_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_100_httpwww_dmg_orgPMML_4_0Array', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Interval uses Python identifier Interval
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Interval'), 'Interval', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_100_httpwww_dmg_orgPMML_4_0Interval', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2), )


    Interval = property(__Interval.value, __Interval.set, None, None)


    # Attribute totalValuesSum uses Python identifier totalValuesSum
    __totalValuesSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalValuesSum'), 'totalValuesSum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_100_totalValuesSum', NUMBER)
    __totalValuesSum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 710, 6)
    __totalValuesSum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 710, 6)

    totalValuesSum = property(__totalValuesSum.value, __totalValuesSum.set, None, None)


    # Attribute totalSquaresSum uses Python identifier totalSquaresSum
    __totalSquaresSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalSquaresSum'), 'totalSquaresSum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_100_totalSquaresSum', NUMBER)
    __totalSquaresSum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 711, 6)
    __totalSquaresSum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 711, 6)

    totalSquaresSum = property(__totalSquaresSum.value, __totalSquaresSum.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array,
        __Interval.name() : __Interval
    })
    _AttributeMap.update({
        __totalValuesSum.name() : __totalValuesSum,
        __totalSquaresSum.name() : __totalSquaresSum
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 720, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_101_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}AnovaRow uses Python identifier AnovaRow
    __AnovaRow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'AnovaRow'), 'AnovaRow', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_101_httpwww_dmg_orgPMML_4_0AnovaRow', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 728, 2), )


    AnovaRow = property(__AnovaRow.value, __AnovaRow.set, None, None)


    # Attribute target uses Python identifier target
    __target = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'target'), 'target', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_101_target', FIELD_NAME)
    __target._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 725, 6)
    __target._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 725, 6)

    target = property(__target.value, __target.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __AnovaRow.name() : __AnovaRow
    })
    _AttributeMap.update({
        __target.name() : __target
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 729, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_type', STD_ANON_12, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 733, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 733, 6)

    type = property(__type.value, __type.set, None, None)


    # Attribute sumOfSquares uses Python identifier sumOfSquares
    __sumOfSquares = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sumOfSquares'), 'sumOfSquares', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_sumOfSquares', NUMBER, required=True)
    __sumOfSquares._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 742, 6)
    __sumOfSquares._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 742, 6)

    sumOfSquares = property(__sumOfSquares.value, __sumOfSquares.set, None, None)


    # Attribute degreesOfFreedom uses Python identifier degreesOfFreedom
    __degreesOfFreedom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'degreesOfFreedom'), 'degreesOfFreedom', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_degreesOfFreedom', NUMBER, required=True)
    __degreesOfFreedom._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 743, 6)
    __degreesOfFreedom._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 743, 6)

    degreesOfFreedom = property(__degreesOfFreedom.value, __degreesOfFreedom.set, None, None)


    # Attribute meanOfSquares uses Python identifier meanOfSquares
    __meanOfSquares = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meanOfSquares'), 'meanOfSquares', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_meanOfSquares', NUMBER)
    __meanOfSquares._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 744, 6)
    __meanOfSquares._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 744, 6)

    meanOfSquares = property(__meanOfSquares.value, __meanOfSquares.set, None, None)


    # Attribute fValue uses Python identifier fValue
    __fValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fValue'), 'fValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_fValue', NUMBER)
    __fValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 745, 6)
    __fValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 745, 6)

    fValue = property(__fValue.value, __fValue.set, None, None)


    # Attribute pValue uses Python identifier pValue
    __pValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pValue'), 'pValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_102_pValue', PROB_NUMBER)
    __pValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 746, 6)
    __pValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 746, 6)

    pValue = property(__pValue.value, __pValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __type.name() : __type,
        __sumOfSquares.name() : __sumOfSquares,
        __degreesOfFreedom.name() : __degreesOfFreedom,
        __meanOfSquares.name() : __meanOfSquares,
        __fValue.name() : __fValue,
        __pValue.name() : __pValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 750, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_103_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PartitionFieldStats uses Python identifier PartitionFieldStats
    __PartitionFieldStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PartitionFieldStats'), 'PartitionFieldStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_103_httpwww_dmg_orgPMML_4_0PartitionFieldStats', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 759, 2), )


    PartitionFieldStats = property(__PartitionFieldStats.value, __PartitionFieldStats.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_103_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 755, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 755, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_103_size', NUMBER)
    __size._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 756, 6)
    __size._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 756, 6)

    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __PartitionFieldStats.name() : __PartitionFieldStats
    })
    _AttributeMap.update({
        __name.name() : __name,
        __size.name() : __size
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 760, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_httpwww_dmg_orgPMML_4_0Array', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Counts uses Python identifier Counts
    __Counts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Counts'), 'Counts', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_httpwww_dmg_orgPMML_4_0Counts', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 660, 2), )


    Counts = property(__Counts.value, __Counts.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NumericInfo uses Python identifier NumericInfo
    __NumericInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo'), 'NumericInfo', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_httpwww_dmg_orgPMML_4_0NumericInfo', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 671, 2), )


    NumericInfo = property(__NumericInfo.value, __NumericInfo.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 767, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 767, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute weighted uses Python identifier weighted
    __weighted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weighted'), 'weighted', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_104_weighted', STD_ANON_13, unicode_default=u'0')
    __weighted._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 768, 6)
    __weighted._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 768, 6)

    weighted = property(__weighted.value, __weighted.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array,
        __Counts.name() : __Counts,
        __NumericInfo.name() : __NumericInfo
    })
    _AttributeMap.update({
        __field.name() : __field,
        __weighted.name() : __weighted
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 787, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 791, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 791, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 792, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 792, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 793, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 793, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 794, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 794, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)


    # Attribute targetField uses Python identifier targetField
    __targetField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetField'), 'targetField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_targetField', FIELD_NAME)
    __targetField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 795, 6)
    __targetField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 795, 6)

    targetField = property(__targetField.value, __targetField.set, None, None)


    # Attribute feature uses Python identifier feature
    __feature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'feature'), 'feature', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_feature', RESULT_FEATURE)
    __feature._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 796, 6)
    __feature._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 796, 6)

    feature = property(__feature.value, __feature.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 797, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 797, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute ruleFeature uses Python identifier ruleFeature
    __ruleFeature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ruleFeature'), 'ruleFeature', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_ruleFeature', RULE_FEATURE, unicode_default=u'consequent')
    __ruleFeature._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 798, 6)
    __ruleFeature._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 798, 6)

    ruleFeature = property(__ruleFeature.value, __ruleFeature.set, None, None)


    # Attribute algorithm uses Python identifier algorithm
    __algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithm'), 'algorithm', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_algorithm', STD_ANON_14, unicode_default=u'exclusiveRecommendation')
    __algorithm._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 799, 6)
    __algorithm._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 799, 6)

    algorithm = property(__algorithm.value, __algorithm.set, None, None)


    # Attribute rank uses Python identifier rank
    __rank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rank'), 'rank', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_rank', INT_NUMBER, unicode_default=u'1')
    __rank._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 808, 6)
    __rank._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 808, 6)

    rank = property(__rank.value, __rank.set, None, None)


    # Attribute rankBasis uses Python identifier rankBasis
    __rankBasis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rankBasis'), 'rankBasis', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_rankBasis', STD_ANON_15, unicode_default=u'confidence')
    __rankBasis._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 809, 6)
    __rankBasis._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 809, 6)

    rankBasis = property(__rankBasis.value, __rankBasis.set, None, None)


    # Attribute rankOrder uses Python identifier rankOrder
    __rankOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rankOrder'), 'rankOrder', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_rankOrder', STD_ANON_16, unicode_default=u'descending')
    __rankOrder._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 818, 6)
    __rankOrder._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 818, 6)

    rankOrder = property(__rankOrder.value, __rankOrder.set, None, None)


    # Attribute isMultiValued uses Python identifier isMultiValued
    __isMultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isMultiValued'), 'isMultiValued', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_105_isMultiValued', pyxb.binding.datatypes.anySimpleType, unicode_default=u'0')
    __isMultiValued._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 826, 6)
    __isMultiValued._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 826, 6)

    isMultiValued = property(__isMultiValued.value, __isMultiValued.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __optype.name() : __optype,
        __dataType.name() : __dataType,
        __targetField.name() : __targetField,
        __feature.name() : __feature,
        __value.name() : __value,
        __ruleFeature.name() : __ruleFeature,
        __algorithm.name() : __algorithm,
        __rank.name() : __rank,
        __rankBasis.name() : __rankBasis,
        __rankOrder.name() : __rankOrder,
        __isMultiValued.name() : __isMultiValued
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 864, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TargetValue uses Python identifier TargetValue
    __TargetValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TargetValue'), 'TargetValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_httpwww_dmg_orgPMML_4_0TargetValue', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 886, 2), )


    TargetValue = property(__TargetValue.value, __TargetValue.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 869, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 869, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 870, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 870, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute castInteger uses Python identifier castInteger
    __castInteger = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'castInteger'), 'castInteger', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_castInteger', STD_ANON_17)
    __castInteger._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 871, 6)
    __castInteger._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 871, 6)

    castInteger = property(__castInteger.value, __castInteger.set, None, None)


    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'min'), 'min', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_min', pyxb.binding.datatypes.double)
    __min._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 880, 6)
    __min._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 880, 6)

    min = property(__min.value, __min.set, None, None)


    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_max', pyxb.binding.datatypes.double)
    __max._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 881, 6)
    __max._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 881, 6)

    max = property(__max.value, __max.set, None, None)


    # Attribute rescaleConstant uses Python identifier rescaleConstant
    __rescaleConstant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rescaleConstant'), 'rescaleConstant', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_rescaleConstant', pyxb.binding.datatypes.double, unicode_default=u'0')
    __rescaleConstant._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 882, 6)
    __rescaleConstant._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 882, 6)

    rescaleConstant = property(__rescaleConstant.value, __rescaleConstant.set, None, None)


    # Attribute rescaleFactor uses Python identifier rescaleFactor
    __rescaleFactor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rescaleFactor'), 'rescaleFactor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_106_rescaleFactor', pyxb.binding.datatypes.double, unicode_default=u'1')
    __rescaleFactor._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 883, 6)
    __rescaleFactor._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 883, 6)

    rescaleFactor = property(__rescaleFactor.value, __rescaleFactor.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __TargetValue.name() : __TargetValue
    })
    _AttributeMap.update({
        __field.name() : __field,
        __optype.name() : __optype,
        __castInteger.name() : __castInteger,
        __min.name() : __min,
        __max.name() : __max,
        __rescaleConstant.name() : __rescaleConstant,
        __rescaleFactor.name() : __rescaleFactor
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 887, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Partition uses Python identifier Partition
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Partition'), 'Partition', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_httpwww_dmg_orgPMML_4_0Partition', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2), )


    Partition = property(__Partition.value, __Partition.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 892, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 892, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute displayValue uses Python identifier displayValue
    __displayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayValue'), 'displayValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_displayValue', pyxb.binding.datatypes.string)
    __displayValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 893, 6)
    __displayValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 893, 6)

    displayValue = property(__displayValue.value, __displayValue.set, None, None)


    # Attribute priorProbability uses Python identifier priorProbability
    __priorProbability = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'priorProbability'), 'priorProbability', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_priorProbability', PROB_NUMBER)
    __priorProbability._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 894, 6)
    __priorProbability._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 894, 6)

    priorProbability = property(__priorProbability.value, __priorProbability.set, None, None)


    # Attribute defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultValue'), 'defaultValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_107_defaultValue', NUMBER)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 895, 6)
    __defaultValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 895, 6)

    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Partition.name() : __Partition
    })
    _AttributeMap.update({
        __value.name() : __value,
        __displayValue.name() : __displayValue,
        __priorProbability.name() : __priorProbability,
        __defaultValue.name() : __defaultValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 899, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralInputs uses Python identifier NeuralInputs
    __NeuralInputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralInputs'), 'NeuralInputs', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0NeuralInputs', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 925, 2), )


    NeuralInputs = property(__NeuralInputs.value, __NeuralInputs.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralLayer uses Python identifier NeuralLayer
    __NeuralLayer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralLayer'), 'NeuralLayer', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0NeuralLayer', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 934, 2), )


    NeuralLayer = property(__NeuralLayer.value, __NeuralLayer.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralOutputs uses Python identifier NeuralOutputs
    __NeuralOutputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutputs'), 'NeuralOutputs', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0NeuralOutputs', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 948, 2), )


    NeuralOutputs = property(__NeuralOutputs.value, __NeuralOutputs.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 914, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 914, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 915, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 915, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 916, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 916, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute activationFunction uses Python identifier activationFunction
    __activationFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activationFunction'), 'activationFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_activationFunction', ACTIVATION_FUNCTION, required=True)
    __activationFunction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 917, 6)
    __activationFunction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 917, 6)

    activationFunction = property(__activationFunction.value, __activationFunction.set, None, None)


    # Attribute normalizationMethod uses Python identifier normalizationMethod
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizationMethod'), 'normalizationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_normalizationMethod', NN_NORMALIZATION_METHOD, unicode_default=u'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 918, 6)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 918, 6)

    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)


    # Attribute threshold uses Python identifier threshold
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'threshold'), 'threshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_threshold', REAL_NUMBER, unicode_default=u'0')
    __threshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 919, 6)
    __threshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 919, 6)

    threshold = property(__threshold.value, __threshold.set, None, None)


    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 920, 6)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 920, 6)

    width = property(__width.value, __width.set, None, None)


    # Attribute altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altitude'), 'altitude', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_altitude', REAL_NUMBER, unicode_default=u'1.0')
    __altitude._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 921, 6)
    __altitude._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 921, 6)

    altitude = property(__altitude.value, __altitude.set, None, None)


    # Attribute numberOfLayers uses Python identifier numberOfLayers
    __numberOfLayers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfLayers'), 'numberOfLayers', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_108_numberOfLayers', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfLayers._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 922, 6)
    __numberOfLayers._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 922, 6)

    numberOfLayers = property(__numberOfLayers.value, __numberOfLayers.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __NeuralInputs.name() : __NeuralInputs,
        __NeuralLayer.name() : __NeuralLayer,
        __NeuralOutputs.name() : __NeuralOutputs,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __activationFunction.name() : __activationFunction,
        __normalizationMethod.name() : __normalizationMethod,
        __threshold.name() : __threshold,
        __width.name() : __width,
        __altitude.name() : __altitude,
        __numberOfLayers.name() : __numberOfLayers
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 935, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Neuron uses Python identifier Neuron
    __Neuron = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Neuron'), 'Neuron', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_httpwww_dmg_orgPMML_4_0Neuron', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 996, 2), )


    Neuron = property(__Neuron.value, __Neuron.set, None, None)


    # Attribute numberOfNeurons uses Python identifier numberOfNeurons
    __numberOfNeurons = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfNeurons'), 'numberOfNeurons', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_numberOfNeurons', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfNeurons._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 940, 6)
    __numberOfNeurons._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 940, 6)

    numberOfNeurons = property(__numberOfNeurons.value, __numberOfNeurons.set, None, None)


    # Attribute activationFunction uses Python identifier activationFunction
    __activationFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activationFunction'), 'activationFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_activationFunction', ACTIVATION_FUNCTION)
    __activationFunction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 941, 6)
    __activationFunction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 941, 6)

    activationFunction = property(__activationFunction.value, __activationFunction.set, None, None)


    # Attribute threshold uses Python identifier threshold
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'threshold'), 'threshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_threshold', REAL_NUMBER)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 942, 6)
    __threshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 942, 6)

    threshold = property(__threshold.value, __threshold.set, None, None)


    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 943, 6)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 943, 6)

    width = property(__width.value, __width.set, None, None)


    # Attribute altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altitude'), 'altitude', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_altitude', REAL_NUMBER)
    __altitude._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 944, 6)
    __altitude._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 944, 6)

    altitude = property(__altitude.value, __altitude.set, None, None)


    # Attribute normalizationMethod uses Python identifier normalizationMethod
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizationMethod'), 'normalizationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_109_normalizationMethod', NN_NORMALIZATION_METHOD)
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 945, 6)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 945, 6)

    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Neuron.name() : __Neuron
    })
    _AttributeMap.update({
        __numberOfNeurons.name() : __numberOfNeurons,
        __activationFunction.name() : __activationFunction,
        __threshold.name() : __threshold,
        __width.name() : __width,
        __altitude.name() : __altitude,
        __normalizationMethod.name() : __normalizationMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 988, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_110_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DerivedField uses Python identifier DerivedField
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), 'DerivedField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_110_httpwww_dmg_orgPMML_4_0DerivedField', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2), )


    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_110_id', NN_NEURON_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 993, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 993, 6)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DerivedField.name() : __DerivedField
    })
    _AttributeMap.update({
        __id.name() : __id
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 997, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Con uses Python identifier Con
    __Con = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Con'), 'Con', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_httpwww_dmg_orgPMML_4_0Con', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1008, 2), )


    Con = property(__Con.value, __Con.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_id', NN_NEURON_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1002, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1002, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute bias uses Python identifier bias
    __bias = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bias'), 'bias', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_bias', REAL_NUMBER)
    __bias._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1003, 6)
    __bias._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1003, 6)

    bias = property(__bias.value, __bias.set, None, None)


    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1004, 6)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1004, 6)

    width = property(__width.value, __width.set, None, None)


    # Attribute altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altitude'), 'altitude', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_111_altitude', REAL_NUMBER)
    __altitude._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1005, 6)
    __altitude._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1005, 6)

    altitude = property(__altitude.value, __altitude.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Con.name() : __Con
    })
    _AttributeMap.update({
        __id.name() : __id,
        __bias.name() : __bias,
        __width.name() : __width,
        __altitude.name() : __altitude
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1009, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_112_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute from uses Python identifier from_
    __from = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_112_from', NN_NEURON_IDREF, required=True)
    __from._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1013, 6)
    __from._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1013, 6)

    from_ = property(__from.value, __from.set, None, None)


    # Attribute weight uses Python identifier weight
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weight'), 'weight', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_112_weight', REAL_NUMBER, required=True)
    __weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1014, 6)
    __weight._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1014, 6)

    weight = property(__weight.value, __weight.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __from.name() : __from,
        __weight.name() : __weight
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1018, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_113_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DerivedField uses Python identifier DerivedField
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), 'DerivedField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_113_httpwww_dmg_orgPMML_4_0DerivedField', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2), )


    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)


    # Attribute outputNeuron uses Python identifier outputNeuron
    __outputNeuron = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outputNeuron'), 'outputNeuron', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_113_outputNeuron', NN_NEURON_IDREF, required=True)
    __outputNeuron._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1023, 6)
    __outputNeuron._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1023, 6)

    outputNeuron = property(__outputNeuron.value, __outputNeuron.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __DerivedField.name() : __DerivedField
    })
    _AttributeMap.update({
        __outputNeuron.name() : __outputNeuron
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1027, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MissingValueWeights uses Python identifier MissingValueWeights
    __MissingValueWeights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MissingValueWeights'), 'MissingValueWeights', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0MissingValueWeights', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1056, 2), )


    MissingValueWeights = property(__MissingValueWeights.value, __MissingValueWeights.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Cluster uses Python identifier Cluster
    __Cluster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Cluster'), 'Cluster', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0Cluster', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1064, 2), )


    Cluster = property(__Cluster.value, __Cluster.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ClusteringField uses Python identifier ClusteringField
    __ClusteringField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ClusteringField'), 'ClusteringField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0ClusteringField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1095, 2), )


    ClusteringField = property(__ClusteringField.value, __ClusteringField.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ComparisonMeasure uses Python identifier ComparisonMeasure
    __ComparisonMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ComparisonMeasure'), 'ComparisonMeasure', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0ComparisonMeasure', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1132, 2), )


    ComparisonMeasure = property(__ComparisonMeasure.value, __ComparisonMeasure.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1042, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1042, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1043, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1043, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1044, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1044, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute modelClass uses Python identifier modelClass
    __modelClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelClass'), 'modelClass', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_modelClass', STD_ANON_18, required=True)
    __modelClass._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1045, 6)
    __modelClass._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1045, 6)

    modelClass = property(__modelClass.value, __modelClass.set, None, None)


    # Attribute numberOfClusters uses Python identifier numberOfClusters
    __numberOfClusters = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfClusters'), 'numberOfClusters', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_114_numberOfClusters', INT_NUMBER, required=True)
    __numberOfClusters._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1053, 6)
    __numberOfClusters._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1053, 6)

    numberOfClusters = property(__numberOfClusters.value, __numberOfClusters.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __MissingValueWeights.name() : __MissingValueWeights,
        __Cluster.name() : __Cluster,
        __ClusteringField.name() : __ClusteringField,
        __ComparisonMeasure.name() : __ComparisonMeasure,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __modelClass.name() : __modelClass,
        __numberOfClusters.name() : __numberOfClusters
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1096, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Comparisons uses Python identifier Comparisons
    __Comparisons = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Comparisons'), 'Comparisons', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_httpwww_dmg_orgPMML_4_0Comparisons', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1115, 2), )


    Comparisons = property(__Comparisons.value, __Comparisons.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1101, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1101, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute isCenterField uses Python identifier isCenterField
    __isCenterField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isCenterField'), 'isCenterField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_isCenterField', STD_ANON_19, unicode_default=u'true')
    __isCenterField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1102, 6)
    __isCenterField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1102, 6)

    isCenterField = property(__isCenterField.value, __isCenterField.set, None, None)


    # Attribute fieldWeight uses Python identifier fieldWeight
    __fieldWeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldWeight'), 'fieldWeight', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_fieldWeight', REAL_NUMBER, unicode_default=u'1')
    __fieldWeight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1110, 6)
    __fieldWeight._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1110, 6)

    fieldWeight = property(__fieldWeight.value, __fieldWeight.set, None, None)


    # Attribute similarityScale uses Python identifier similarityScale
    __similarityScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'similarityScale'), 'similarityScale', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_similarityScale', REAL_NUMBER)
    __similarityScale._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1111, 6)
    __similarityScale._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1111, 6)

    similarityScale = property(__similarityScale.value, __similarityScale.set, None, None)


    # Attribute compareFunction uses Python identifier compareFunction
    __compareFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compareFunction'), 'compareFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_115_compareFunction', COMPARE_FUNCTION)
    __compareFunction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1112, 6)
    __compareFunction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1112, 6)

    compareFunction = property(__compareFunction.value, __compareFunction.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Comparisons.name() : __Comparisons
    })
    _AttributeMap.update({
        __field.name() : __field,
        __isCenterField.name() : __isCenterField,
        __fieldWeight.name() : __fieldWeight,
        __similarityScale.name() : __similarityScale,
        __compareFunction.name() : __compareFunction
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1133, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}euclidean uses Python identifier euclidean
    __euclidean = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'euclidean'), 'euclidean', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0euclidean', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1161, 2), )


    euclidean = property(__euclidean.value, __euclidean.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}squaredEuclidean uses Python identifier squaredEuclidean
    __squaredEuclidean = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'squaredEuclidean'), 'squaredEuclidean', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0squaredEuclidean', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1168, 2), )


    squaredEuclidean = property(__squaredEuclidean.value, __squaredEuclidean.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}cityBlock uses Python identifier cityBlock
    __cityBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cityBlock'), 'cityBlock', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0cityBlock', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1175, 2), )


    cityBlock = property(__cityBlock.value, __cityBlock.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}chebychev uses Python identifier chebychev
    __chebychev = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'chebychev'), 'chebychev', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0chebychev', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1182, 2), )


    chebychev = property(__chebychev.value, __chebychev.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}minkowski uses Python identifier minkowski
    __minkowski = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'minkowski'), 'minkowski', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0minkowski', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1189, 2), )


    minkowski = property(__minkowski.value, __minkowski.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}simpleMatching uses Python identifier simpleMatching
    __simpleMatching = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'simpleMatching'), 'simpleMatching', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0simpleMatching', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1197, 2), )


    simpleMatching = property(__simpleMatching.value, __simpleMatching.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}jaccard uses Python identifier jaccard
    __jaccard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'jaccard'), 'jaccard', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0jaccard', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1204, 2), )


    jaccard = property(__jaccard.value, __jaccard.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}tanimoto uses Python identifier tanimoto
    __tanimoto = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tanimoto'), 'tanimoto', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0tanimoto', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1211, 2), )


    tanimoto = property(__tanimoto.value, __tanimoto.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}binarySimilarity uses Python identifier binarySimilarity
    __binarySimilarity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'binarySimilarity'), 'binarySimilarity', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_httpwww_dmg_orgPMML_4_0binarySimilarity', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1218, 2), )


    binarySimilarity = property(__binarySimilarity.value, __binarySimilarity.set, None, None)


    # Attribute kind uses Python identifier kind
    __kind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kind'), 'kind', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_kind', STD_ANON_20, required=True)
    __kind._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1148, 6)
    __kind._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1148, 6)

    kind = property(__kind.value, __kind.set, None, None)


    # Attribute compareFunction uses Python identifier compareFunction
    __compareFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compareFunction'), 'compareFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_compareFunction', COMPARE_FUNCTION, unicode_default=u'absDiff')
    __compareFunction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1156, 6)
    __compareFunction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1156, 6)

    compareFunction = property(__compareFunction.value, __compareFunction.set, None, None)


    # Attribute minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimum'), 'minimum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_minimum', NUMBER)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1157, 6)
    __minimum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1157, 6)

    minimum = property(__minimum.value, __minimum.set, None, None)


    # Attribute maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximum'), 'maximum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_116_maximum', NUMBER)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1158, 6)
    __maximum._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1158, 6)

    maximum = property(__maximum.value, __maximum.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __euclidean.name() : __euclidean,
        __squaredEuclidean.name() : __squaredEuclidean,
        __cityBlock.name() : __cityBlock,
        __chebychev.name() : __chebychev,
        __minkowski.name() : __minkowski,
        __simpleMatching.name() : __simpleMatching,
        __jaccard.name() : __jaccard,
        __tanimoto.name() : __tanimoto,
        __binarySimilarity.name() : __binarySimilarity
    })
    _AttributeMap.update({
        __kind.name() : __kind,
        __compareFunction.name() : __compareFunction,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1190, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_117_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute p-parameter uses Python identifier p_parameter
    __p_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'p-parameter'), 'p_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_117_p_parameter', NUMBER, required=True)
    __p_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1194, 6)
    __p_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1194, 6)

    p_parameter = property(__p_parameter.value, __p_parameter.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __p_parameter.name() : __p_parameter
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1219, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute c00-parameter uses Python identifier c00_parameter
    __c00_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c00-parameter'), 'c00_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_c00_parameter', NUMBER, required=True)
    __c00_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1223, 6)
    __c00_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1223, 6)

    c00_parameter = property(__c00_parameter.value, __c00_parameter.set, None, None)


    # Attribute c01-parameter uses Python identifier c01_parameter
    __c01_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c01-parameter'), 'c01_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_c01_parameter', NUMBER, required=True)
    __c01_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1224, 6)
    __c01_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1224, 6)

    c01_parameter = property(__c01_parameter.value, __c01_parameter.set, None, None)


    # Attribute c10-parameter uses Python identifier c10_parameter
    __c10_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c10-parameter'), 'c10_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_c10_parameter', NUMBER, required=True)
    __c10_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1225, 6)
    __c10_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1225, 6)

    c10_parameter = property(__c10_parameter.value, __c10_parameter.set, None, None)


    # Attribute c11-parameter uses Python identifier c11_parameter
    __c11_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c11-parameter'), 'c11_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_c11_parameter', NUMBER, required=True)
    __c11_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1226, 6)
    __c11_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1226, 6)

    c11_parameter = property(__c11_parameter.value, __c11_parameter.set, None, None)


    # Attribute d00-parameter uses Python identifier d00_parameter
    __d00_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd00-parameter'), 'd00_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_d00_parameter', NUMBER, required=True)
    __d00_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1227, 6)
    __d00_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1227, 6)

    d00_parameter = property(__d00_parameter.value, __d00_parameter.set, None, None)


    # Attribute d01-parameter uses Python identifier d01_parameter
    __d01_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd01-parameter'), 'd01_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_d01_parameter', NUMBER, required=True)
    __d01_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1228, 6)
    __d01_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1228, 6)

    d01_parameter = property(__d01_parameter.value, __d01_parameter.set, None, None)


    # Attribute d10-parameter uses Python identifier d10_parameter
    __d10_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd10-parameter'), 'd10_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_d10_parameter', NUMBER, required=True)
    __d10_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1229, 6)
    __d10_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1229, 6)

    d10_parameter = property(__d10_parameter.value, __d10_parameter.set, None, None)


    # Attribute d11-parameter uses Python identifier d11_parameter
    __d11_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd11-parameter'), 'd11_parameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_118_d11_parameter', NUMBER, required=True)
    __d11_parameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1230, 6)
    __d11_parameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1230, 6)

    d11_parameter = property(__d11_parameter.value, __d11_parameter.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __c00_parameter.name() : __c00_parameter,
        __c01_parameter.name() : __c01_parameter,
        __c10_parameter.name() : __c10_parameter,
        __c11_parameter.name() : __c11_parameter,
        __d00_parameter.name() : __d00_parameter,
        __d01_parameter.name() : __d01_parameter,
        __d10_parameter.name() : __d10_parameter,
        __d11_parameter.name() : __d11_parameter
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1234, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Item uses Python identifier Item
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Item'), 'Item', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0Item', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1260, 2), )


    Item = property(__Item.value, __Item.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Itemset uses Python identifier Itemset
    __Itemset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Itemset'), 'Itemset', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0Itemset', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1271, 2), )


    Itemset = property(__Itemset.value, __Itemset.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}AssociationRule uses Python identifier AssociationRule
    __AssociationRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'AssociationRule'), 'AssociationRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_httpwww_dmg_orgPMML_4_0AssociationRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1290, 2), )


    AssociationRule = property(__AssociationRule.value, __AssociationRule.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1246, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1246, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1247, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1247, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1248, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1248, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute numberOfTransactions uses Python identifier numberOfTransactions
    __numberOfTransactions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfTransactions'), 'numberOfTransactions', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_numberOfTransactions', INT_NUMBER, required=True)
    __numberOfTransactions._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1249, 6)
    __numberOfTransactions._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1249, 6)

    numberOfTransactions = property(__numberOfTransactions.value, __numberOfTransactions.set, None, None)


    # Attribute maxNumberOfItemsPerTA uses Python identifier maxNumberOfItemsPerTA
    __maxNumberOfItemsPerTA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxNumberOfItemsPerTA'), 'maxNumberOfItemsPerTA', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_maxNumberOfItemsPerTA', INT_NUMBER)
    __maxNumberOfItemsPerTA._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1250, 6)
    __maxNumberOfItemsPerTA._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1250, 6)

    maxNumberOfItemsPerTA = property(__maxNumberOfItemsPerTA.value, __maxNumberOfItemsPerTA.set, None, None)


    # Attribute avgNumberOfItemsPerTA uses Python identifier avgNumberOfItemsPerTA
    __avgNumberOfItemsPerTA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'avgNumberOfItemsPerTA'), 'avgNumberOfItemsPerTA', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_avgNumberOfItemsPerTA', REAL_NUMBER)
    __avgNumberOfItemsPerTA._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1251, 6)
    __avgNumberOfItemsPerTA._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1251, 6)

    avgNumberOfItemsPerTA = property(__avgNumberOfItemsPerTA.value, __avgNumberOfItemsPerTA.set, None, None)


    # Attribute minimumSupport uses Python identifier minimumSupport
    __minimumSupport = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumSupport'), 'minimumSupport', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_minimumSupport', PROB_NUMBER, required=True)
    __minimumSupport._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1252, 6)
    __minimumSupport._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1252, 6)

    minimumSupport = property(__minimumSupport.value, __minimumSupport.set, None, None)


    # Attribute minimumConfidence uses Python identifier minimumConfidence
    __minimumConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumConfidence'), 'minimumConfidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_minimumConfidence', PROB_NUMBER, required=True)
    __minimumConfidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1253, 6)
    __minimumConfidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1253, 6)

    minimumConfidence = property(__minimumConfidence.value, __minimumConfidence.set, None, None)


    # Attribute lengthLimit uses Python identifier lengthLimit
    __lengthLimit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lengthLimit'), 'lengthLimit', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_lengthLimit', INT_NUMBER)
    __lengthLimit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1254, 6)
    __lengthLimit._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1254, 6)

    lengthLimit = property(__lengthLimit.value, __lengthLimit.set, None, None)


    # Attribute numberOfItems uses Python identifier numberOfItems
    __numberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfItems'), 'numberOfItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_numberOfItems', INT_NUMBER, required=True)
    __numberOfItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1255, 6)
    __numberOfItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1255, 6)

    numberOfItems = property(__numberOfItems.value, __numberOfItems.set, None, None)


    # Attribute numberOfItemsets uses Python identifier numberOfItemsets
    __numberOfItemsets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfItemsets'), 'numberOfItemsets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_numberOfItemsets', INT_NUMBER, required=True)
    __numberOfItemsets._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1256, 6)
    __numberOfItemsets._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1256, 6)

    numberOfItemsets = property(__numberOfItemsets.value, __numberOfItemsets.set, None, None)


    # Attribute numberOfRules uses Python identifier numberOfRules
    __numberOfRules = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfRules'), 'numberOfRules', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_119_numberOfRules', INT_NUMBER, required=True)
    __numberOfRules._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1257, 6)
    __numberOfRules._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1257, 6)

    numberOfRules = property(__numberOfRules.value, __numberOfRules.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Item.name() : __Item,
        __Itemset.name() : __Itemset,
        __AssociationRule.name() : __AssociationRule
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __numberOfTransactions.name() : __numberOfTransactions,
        __maxNumberOfItemsPerTA.name() : __maxNumberOfItemsPerTA,
        __avgNumberOfItemsPerTA.name() : __avgNumberOfItemsPerTA,
        __minimumSupport.name() : __minimumSupport,
        __minimumConfidence.name() : __minimumConfidence,
        __lengthLimit.name() : __lengthLimit,
        __numberOfItems.name() : __numberOfItems,
        __numberOfItemsets.name() : __numberOfItemsets,
        __numberOfRules.name() : __numberOfRules
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1261, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_120_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_120_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1265, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1265, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_120_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1266, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1266, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute mappedValue uses Python identifier mappedValue
    __mappedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mappedValue'), 'mappedValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_120_mappedValue', pyxb.binding.datatypes.string)
    __mappedValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1267, 6)
    __mappedValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1267, 6)

    mappedValue = property(__mappedValue.value, __mappedValue.set, None, None)


    # Attribute weight uses Python identifier weight
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weight'), 'weight', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_120_weight', REAL_NUMBER)
    __weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1268, 6)
    __weight._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1268, 6)

    weight = property(__weight.value, __weight.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __id.name() : __id,
        __value.name() : __value,
        __mappedValue.name() : __mappedValue,
        __weight.name() : __weight
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1272, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_121_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ItemRef uses Python identifier ItemRef
    __ItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ItemRef'), 'ItemRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_121_httpwww_dmg_orgPMML_4_0ItemRef', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1282, 2), )


    ItemRef = property(__ItemRef.value, __ItemRef.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_121_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1277, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1277, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute support uses Python identifier support
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'support'), 'support', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_121_support', PROB_NUMBER)
    __support._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1278, 6)
    __support._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1278, 6)

    support = property(__support.value, __support.set, None, None)


    # Attribute numberOfItems uses Python identifier numberOfItems
    __numberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfItems'), 'numberOfItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_121_numberOfItems', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1279, 6)
    __numberOfItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1279, 6)

    numberOfItems = property(__numberOfItems.value, __numberOfItems.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ItemRef.name() : __ItemRef
    })
    _AttributeMap.update({
        __id.name() : __id,
        __support.name() : __support,
        __numberOfItems.name() : __numberOfItems
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1291, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute antecedent uses Python identifier antecedent
    __antecedent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'antecedent'), 'antecedent', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_antecedent', pyxb.binding.datatypes.string, required=True)
    __antecedent._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1295, 6)
    __antecedent._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1295, 6)

    antecedent = property(__antecedent.value, __antecedent.set, None, None)


    # Attribute consequent uses Python identifier consequent
    __consequent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'consequent'), 'consequent', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_consequent', pyxb.binding.datatypes.string, required=True)
    __consequent._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1296, 6)
    __consequent._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1296, 6)

    consequent = property(__consequent.value, __consequent.set, None, None)


    # Attribute support uses Python identifier support
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'support'), 'support', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_support', PROB_NUMBER, required=True)
    __support._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1297, 6)
    __support._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1297, 6)

    support = property(__support.value, __support.set, None, None)


    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'confidence'), 'confidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_confidence', PROB_NUMBER, required=True)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1298, 6)
    __confidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1298, 6)

    confidence = property(__confidence.value, __confidence.set, None, None)


    # Attribute lift uses Python identifier lift
    __lift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lift'), 'lift', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_lift', pyxb.binding.datatypes.float)
    __lift._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1299, 6)
    __lift._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1299, 6)

    lift = property(__lift.value, __lift.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_122_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1300, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1300, 6)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __antecedent.name() : __antecedent,
        __consequent.name() : __consequent,
        __support.name() : __support,
        __confidence.name() : __confidence,
        __lift.name() : __lift,
        __id.name() : __id
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1304, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Node'), 'Node', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0Node', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2), )


    Node = property(__Node.value, __Node.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1317, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1317, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1318, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1318, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1319, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1319, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute missingValueStrategy uses Python identifier missingValueStrategy
    __missingValueStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValueStrategy'), 'missingValueStrategy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_missingValueStrategy', MISSING_VALUE_STRATEGY, unicode_default=u'none')
    __missingValueStrategy._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1320, 6)
    __missingValueStrategy._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1320, 6)

    missingValueStrategy = property(__missingValueStrategy.value, __missingValueStrategy.set, None, None)


    # Attribute missingValuePenalty uses Python identifier missingValuePenalty
    __missingValuePenalty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValuePenalty'), 'missingValuePenalty', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_missingValuePenalty', PROB_NUMBER, unicode_default=u'1.0')
    __missingValuePenalty._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1321, 6)
    __missingValuePenalty._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1321, 6)

    missingValuePenalty = property(__missingValuePenalty.value, __missingValuePenalty.set, None, None)


    # Attribute noTrueChildStrategy uses Python identifier noTrueChildStrategy
    __noTrueChildStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noTrueChildStrategy'), 'noTrueChildStrategy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_noTrueChildStrategy', NO_TRUE_CHILD_STRATEGY, unicode_default=u'returnNullPrediction')
    __noTrueChildStrategy._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1322, 6)
    __noTrueChildStrategy._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1322, 6)

    noTrueChildStrategy = property(__noTrueChildStrategy.value, __noTrueChildStrategy.set, None, None)


    # Attribute splitCharacteristic uses Python identifier splitCharacteristic
    __splitCharacteristic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'splitCharacteristic'), 'splitCharacteristic', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_123_splitCharacteristic', STD_ANON_21, unicode_default=u'multiSplit')
    __splitCharacteristic._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1323, 6)
    __splitCharacteristic._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1323, 6)

    splitCharacteristic = property(__splitCharacteristic.value, __splitCharacteristic.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __Node.name() : __Node,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __missingValueStrategy.name() : __missingValueStrategy,
        __missingValuePenalty.name() : __missingValuePenalty,
        __noTrueChildStrategy.name() : __noTrueChildStrategy,
        __splitCharacteristic.name() : __splitCharacteristic
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1334, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Partition uses Python identifier Partition
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Partition'), 'Partition', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0Partition', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2), )


    Partition = property(__Partition.value, __Partition.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Node'), 'Node', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0Node', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2), )


    Node = property(__Node.value, __Node.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimplePredicate uses Python identifier SimplePredicate
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), 'SimplePredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0SimplePredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2), )


    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundPredicate uses Python identifier CompoundPredicate
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), 'CompoundPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0CompoundPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2), )


    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleSetPredicate uses Python identifier SimpleSetPredicate
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), 'SimpleSetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0SimpleSetPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2), )


    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}True uses Python identifier True_
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'True'), 'True_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0True', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2), )


    True_ = property(__True.value, __True.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}False uses Python identifier False_
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'False'), 'False_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0False', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2), )


    False_ = property(__False.value, __False.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ScoreDistribution uses Python identifier ScoreDistribution
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), 'ScoreDistribution', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0ScoreDistribution', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2), )


    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Regression uses Python identifier Regression
    __Regression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Regression'), 'Regression', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0Regression', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2711, 2), )


    Regression = property(__Regression.value, __Regression.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DecisionTree uses Python identifier DecisionTree
    __DecisionTree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree'), 'DecisionTree', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_httpwww_dmg_orgPMML_4_0DecisionTree', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2728, 2), )


    DecisionTree = property(__DecisionTree.value, __DecisionTree.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1347, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1347, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute score uses Python identifier score
    __score = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'score'), 'score', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_score', pyxb.binding.datatypes.string)
    __score._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1348, 6)
    __score._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1348, 6)

    score = property(__score.value, __score.set, None, None)


    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1349, 6)
    __recordCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1349, 6)

    recordCount = property(__recordCount.value, __recordCount.set, None, None)


    # Attribute defaultChild uses Python identifier defaultChild
    __defaultChild = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultChild'), 'defaultChild', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_124_defaultChild', pyxb.binding.datatypes.string)
    __defaultChild._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1350, 6)
    __defaultChild._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1350, 6)

    defaultChild = property(__defaultChild.value, __defaultChild.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Partition.name() : __Partition,
        __Node.name() : __Node,
        __SimplePredicate.name() : __SimplePredicate,
        __CompoundPredicate.name() : __CompoundPredicate,
        __SimpleSetPredicate.name() : __SimpleSetPredicate,
        __True.name() : __True,
        __False.name() : __False,
        __ScoreDistribution.name() : __ScoreDistribution,
        __Regression.name() : __Regression,
        __DecisionTree.name() : __DecisionTree
    })
    _AttributeMap.update({
        __id.name() : __id,
        __score.name() : __score,
        __recordCount.name() : __recordCount,
        __defaultChild.name() : __defaultChild
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1363, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_125_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_125_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1367, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1367, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_125_operator', STD_ANON_22, required=True)
    __operator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1368, 6)
    __operator._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1368, 6)

    operator = property(__operator.value, __operator.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_125_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1382, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1382, 6)

    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __field.name() : __field,
        __operator.name() : __operator,
        __value.name() : __value
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1386, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimplePredicate uses Python identifier SimplePredicate
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), 'SimplePredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0SimplePredicate', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2), )


    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundPredicate uses Python identifier CompoundPredicate
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), 'CompoundPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0CompoundPredicate', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2), )


    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleSetPredicate uses Python identifier SimpleSetPredicate
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), 'SimpleSetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0SimpleSetPredicate', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2), )


    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}True uses Python identifier True_
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'True'), 'True_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0True', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2), )


    True_ = property(__True.value, __True.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}False uses Python identifier False_
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'False'), 'False_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_httpwww_dmg_orgPMML_4_0False', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2), )


    False_ = property(__False.value, __False.set, None, None)


    # Attribute booleanOperator uses Python identifier booleanOperator
    __booleanOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'booleanOperator'), 'booleanOperator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_126_booleanOperator', STD_ANON_23, required=True)
    __booleanOperator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1393, 6)
    __booleanOperator._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1393, 6)

    booleanOperator = property(__booleanOperator.value, __booleanOperator.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __SimplePredicate.name() : __SimplePredicate,
        __CompoundPredicate.name() : __CompoundPredicate,
        __SimpleSetPredicate.name() : __SimpleSetPredicate,
        __True.name() : __True,
        __False.name() : __False
    })
    _AttributeMap.update({
        __booleanOperator.name() : __booleanOperator
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1406, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_127_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_127_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_127_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1411, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1411, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute booleanOperator uses Python identifier booleanOperator
    __booleanOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'booleanOperator'), 'booleanOperator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_127_booleanOperator', STD_ANON_24, required=True)
    __booleanOperator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1412, 6)
    __booleanOperator._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1412, 6)

    booleanOperator = property(__booleanOperator.value, __booleanOperator.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __field.name() : __field,
        __booleanOperator.name() : __booleanOperator
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1437, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_128_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_128_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1441, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1441, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_128_recordCount', NUMBER, required=True)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1442, 6)
    __recordCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1442, 6)

    recordCount = property(__recordCount.value, __recordCount.set, None, None)


    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'confidence'), 'confidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_128_confidence', PROB_NUMBER)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1443, 6)
    __confidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1443, 6)

    confidence = property(__confidence.value, __confidence.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __value.name() : __value,
        __recordCount.name() : __recordCount,
        __confidence.name() : __confidence
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1463, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RegressionTable uses Python identifier RegressionTable
    __RegressionTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable'), 'RegressionTable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0RegressionTable', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1506, 2), )


    RegressionTable = property(__RegressionTable.value, __RegressionTable.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1477, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1477, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1478, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1478, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1479, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1479, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute modelType uses Python identifier modelType
    __modelType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelType'), 'modelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_modelType', STD_ANON_25)
    __modelType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1480, 6)
    __modelType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1480, 6)

    modelType = property(__modelType.value, __modelType.set, None, None)


    # Attribute targetFieldName uses Python identifier targetFieldName
    __targetFieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetFieldName'), 'targetFieldName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_targetFieldName', FIELD_NAME)
    __targetFieldName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1489, 6)
    __targetFieldName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1489, 6)

    targetFieldName = property(__targetFieldName.value, __targetFieldName.set, None, None)


    # Attribute normalizationMethod uses Python identifier normalizationMethod
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizationMethod'), 'normalizationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_129_normalizationMethod', REGRESSIONNORMALIZATIONMETHOD, unicode_default=u'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1490, 6)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1490, 6)

    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __RegressionTable.name() : __RegressionTable,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __modelType.name() : __modelType,
        __targetFieldName.name() : __targetFieldName,
        __normalizationMethod.name() : __normalizationMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1507, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NumericPredictor uses Python identifier NumericPredictor
    __NumericPredictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NumericPredictor'), 'NumericPredictor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_httpwww_dmg_orgPMML_4_0NumericPredictor', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1518, 2), )


    NumericPredictor = property(__NumericPredictor.value, __NumericPredictor.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CategoricalPredictor uses Python identifier CategoricalPredictor
    __CategoricalPredictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CategoricalPredictor'), 'CategoricalPredictor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_httpwww_dmg_orgPMML_4_0CategoricalPredictor', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1528, 2), )


    CategoricalPredictor = property(__CategoricalPredictor.value, __CategoricalPredictor.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PredictorTerm uses Python identifier PredictorTerm
    __PredictorTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PredictorTerm'), 'PredictorTerm', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_httpwww_dmg_orgPMML_4_0PredictorTerm', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1538, 2), )


    PredictorTerm = property(__PredictorTerm.value, __PredictorTerm.set, None, None)


    # Attribute intercept uses Python identifier intercept
    __intercept = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'intercept'), 'intercept', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_intercept', REAL_NUMBER, required=True)
    __intercept._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1514, 6)
    __intercept._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1514, 6)

    intercept = property(__intercept.value, __intercept.set, None, None)


    # Attribute targetCategory uses Python identifier targetCategory
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetCategory'), 'targetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_130_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1515, 6)
    __targetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1515, 6)

    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __NumericPredictor.name() : __NumericPredictor,
        __CategoricalPredictor.name() : __CategoricalPredictor,
        __PredictorTerm.name() : __PredictorTerm
    })
    _AttributeMap.update({
        __intercept.name() : __intercept,
        __targetCategory.name() : __targetCategory
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1519, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_131_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_131_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1523, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1523, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute exponent uses Python identifier exponent
    __exponent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'exponent'), 'exponent', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_131_exponent', INT_NUMBER, unicode_default=u'1')
    __exponent._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1524, 6)
    __exponent._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1524, 6)

    exponent = property(__exponent.value, __exponent.set, None, None)


    # Attribute coefficient uses Python identifier coefficient
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coefficient'), 'coefficient', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_131_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1525, 6)
    __coefficient._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1525, 6)

    coefficient = property(__coefficient.value, __coefficient.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __exponent.name() : __exponent,
        __coefficient.name() : __coefficient
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1529, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_132_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_132_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1533, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1533, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_132_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1534, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1534, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute coefficient uses Python identifier coefficient
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coefficient'), 'coefficient', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_132_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1535, 6)
    __coefficient._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1535, 6)

    coefficient = property(__coefficient.value, __coefficient.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __value.name() : __value,
        __coefficient.name() : __coefficient
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1539, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_133_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldRef uses Python identifier FieldRef
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), 'FieldRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_133_httpwww_dmg_orgPMML_4_0FieldRef', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2), )


    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)


    # Attribute coefficient uses Python identifier coefficient
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coefficient'), 'coefficient', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_133_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1544, 6)
    __coefficient._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1544, 6)

    coefficient = property(__coefficient.value, __coefficient.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __FieldRef.name() : __FieldRef
    })
    _AttributeMap.update({
        __coefficient.name() : __coefficient
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1548, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RuleSet uses Python identifier RuleSet
    __RuleSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RuleSet'), 'RuleSet', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0RuleSet', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1566, 2), )


    RuleSet = property(__RuleSet.value, __RuleSet.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1561, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1561, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1562, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1562, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_134_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1563, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1563, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __RuleSet.name() : __RuleSet,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1567, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ScoreDistribution uses Python identifier ScoreDistribution
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), 'ScoreDistribution', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_httpwww_dmg_orgPMML_4_0ScoreDistribution', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2), )


    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RuleSelectionMethod uses Python identifier RuleSelectionMethod
    __RuleSelectionMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RuleSelectionMethod'), 'RuleSelectionMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_httpwww_dmg_orgPMML_4_0RuleSelectionMethod', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1580, 2), )


    RuleSelectionMethod = property(__RuleSelectionMethod.value, __RuleSelectionMethod.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleRule uses Python identifier SimpleRule
    __SimpleRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule'), 'SimpleRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_httpwww_dmg_orgPMML_4_0SimpleRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1602, 2), )


    SimpleRule = property(__SimpleRule.value, __SimpleRule.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundRule uses Python identifier CompoundRule
    __CompoundRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule'), 'CompoundRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_httpwww_dmg_orgPMML_4_0CompoundRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1617, 2), )


    CompoundRule = property(__CompoundRule.value, __CompoundRule.set, None, None)


    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1574, 6)
    __recordCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1574, 6)

    recordCount = property(__recordCount.value, __recordCount.set, None, None)


    # Attribute nbCorrect uses Python identifier nbCorrect
    __nbCorrect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nbCorrect'), 'nbCorrect', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_nbCorrect', NUMBER)
    __nbCorrect._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1575, 6)
    __nbCorrect._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1575, 6)

    nbCorrect = property(__nbCorrect.value, __nbCorrect.set, None, None)


    # Attribute defaultScore uses Python identifier defaultScore
    __defaultScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultScore'), 'defaultScore', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_defaultScore', pyxb.binding.datatypes.string)
    __defaultScore._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1576, 6)
    __defaultScore._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1576, 6)

    defaultScore = property(__defaultScore.value, __defaultScore.set, None, None)


    # Attribute defaultConfidence uses Python identifier defaultConfidence
    __defaultConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultConfidence'), 'defaultConfidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_135_defaultConfidence', NUMBER)
    __defaultConfidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1577, 6)
    __defaultConfidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1577, 6)

    defaultConfidence = property(__defaultConfidence.value, __defaultConfidence.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ScoreDistribution.name() : __ScoreDistribution,
        __RuleSelectionMethod.name() : __RuleSelectionMethod,
        __SimpleRule.name() : __SimpleRule,
        __CompoundRule.name() : __CompoundRule
    })
    _AttributeMap.update({
        __recordCount.name() : __recordCount,
        __nbCorrect.name() : __nbCorrect,
        __defaultScore.name() : __defaultScore,
        __defaultConfidence.name() : __defaultConfidence
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1581, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_136_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute criterion uses Python identifier criterion
    __criterion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'criterion'), 'criterion', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_136_criterion', STD_ANON_26, required=True)
    __criterion._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1585, 6)
    __criterion._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1585, 6)

    criterion = property(__criterion.value, __criterion.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __criterion.name() : __criterion
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1603, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimplePredicate uses Python identifier SimplePredicate
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), 'SimplePredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0SimplePredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2), )


    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundPredicate uses Python identifier CompoundPredicate
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), 'CompoundPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0CompoundPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2), )


    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleSetPredicate uses Python identifier SimpleSetPredicate
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), 'SimpleSetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0SimpleSetPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2), )


    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}True uses Python identifier True_
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'True'), 'True_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0True', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2), )


    True_ = property(__True.value, __True.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}False uses Python identifier False_
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'False'), 'False_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0False', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2), )


    False_ = property(__False.value, __False.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ScoreDistribution uses Python identifier ScoreDistribution
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), 'ScoreDistribution', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_httpwww_dmg_orgPMML_4_0ScoreDistribution', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2), )


    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1609, 7)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1609, 7)

    id = property(__id.value, __id.set, None, None)


    # Attribute score uses Python identifier score
    __score = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'score'), 'score', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_score', pyxb.binding.datatypes.string, required=True)
    __score._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1610, 7)
    __score._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1610, 7)

    score = property(__score.value, __score.set, None, None)


    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1611, 7)
    __recordCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1611, 7)

    recordCount = property(__recordCount.value, __recordCount.set, None, None)


    # Attribute nbCorrect uses Python identifier nbCorrect
    __nbCorrect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nbCorrect'), 'nbCorrect', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_nbCorrect', NUMBER)
    __nbCorrect._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1612, 7)
    __nbCorrect._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1612, 7)

    nbCorrect = property(__nbCorrect.value, __nbCorrect.set, None, None)


    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'confidence'), 'confidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_confidence', NUMBER)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1613, 7)
    __confidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1613, 7)

    confidence = property(__confidence.value, __confidence.set, None, None)


    # Attribute weight uses Python identifier weight
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weight'), 'weight', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_137_weight', NUMBER)
    __weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1614, 5)
    __weight._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1614, 5)

    weight = property(__weight.value, __weight.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __SimplePredicate.name() : __SimplePredicate,
        __CompoundPredicate.name() : __CompoundPredicate,
        __SimpleSetPredicate.name() : __SimpleSetPredicate,
        __True.name() : __True,
        __False.name() : __False,
        __ScoreDistribution.name() : __ScoreDistribution
    })
    _AttributeMap.update({
        __id.name() : __id,
        __score.name() : __score,
        __recordCount.name() : __recordCount,
        __nbCorrect.name() : __nbCorrect,
        __confidence.name() : __confidence,
        __weight.name() : __weight
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1627, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LinearKernelType uses Python identifier LinearKernelType
    __LinearKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LinearKernelType'), 'LinearKernelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0LinearKernelType', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1669, 2), )


    LinearKernelType = property(__LinearKernelType.value, __LinearKernelType.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PolynomialKernelType uses Python identifier PolynomialKernelType
    __PolynomialKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PolynomialKernelType'), 'PolynomialKernelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0PolynomialKernelType', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1677, 2), )


    PolynomialKernelType = property(__PolynomialKernelType.value, __PolynomialKernelType.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RadialBasisKernelType uses Python identifier RadialBasisKernelType
    __RadialBasisKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RadialBasisKernelType'), 'RadialBasisKernelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0RadialBasisKernelType', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1688, 2), )


    RadialBasisKernelType = property(__RadialBasisKernelType.value, __RadialBasisKernelType.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SigmoidKernelType uses Python identifier SigmoidKernelType
    __SigmoidKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SigmoidKernelType'), 'SigmoidKernelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0SigmoidKernelType', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1697, 2), )


    SigmoidKernelType = property(__SigmoidKernelType.value, __SigmoidKernelType.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}VectorDictionary uses Python identifier VectorDictionary
    __VectorDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'VectorDictionary'), 'VectorDictionary', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0VectorDictionary', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1710, 2), )


    VectorDictionary = property(__VectorDictionary.value, __VectorDictionary.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SupportVectorMachine uses Python identifier SupportVectorMachine
    __SupportVectorMachine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachine'), 'SupportVectorMachine', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0SupportVectorMachine', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1741, 2), )


    SupportVectorMachine = property(__SupportVectorMachine.value, __SupportVectorMachine.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1649, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1649, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1650, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1650, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1651, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1651, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute threshold uses Python identifier threshold
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'threshold'), 'threshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_threshold', REAL_NUMBER, unicode_default=u'0')
    __threshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1652, 6)
    __threshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1652, 6)

    threshold = property(__threshold.value, __threshold.set, None, None)


    # Attribute svmRepresentation uses Python identifier svmRepresentation
    __svmRepresentation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'svmRepresentation'), 'svmRepresentation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_svmRepresentation', SVM_REPRESENTATION, unicode_default=u'SupportVectors')
    __svmRepresentation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1653, 6)
    __svmRepresentation._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1653, 6)

    svmRepresentation = property(__svmRepresentation.value, __svmRepresentation.set, None, None)


    # Attribute classificationMethod uses Python identifier classificationMethod
    __classificationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'classificationMethod'), 'classificationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_138_classificationMethod', SVM_CLASSIFICATION_METHOD, unicode_default=u'OneAgainstAll')
    __classificationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1654, 6)
    __classificationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1654, 6)

    classificationMethod = property(__classificationMethod.value, __classificationMethod.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __LinearKernelType.name() : __LinearKernelType,
        __PolynomialKernelType.name() : __PolynomialKernelType,
        __RadialBasisKernelType.name() : __RadialBasisKernelType,
        __SigmoidKernelType.name() : __SigmoidKernelType,
        __VectorDictionary.name() : __VectorDictionary,
        __SupportVectorMachine.name() : __SupportVectorMachine,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __threshold.name() : __threshold,
        __svmRepresentation.name() : __svmRepresentation,
        __classificationMethod.name() : __classificationMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1678, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_139_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_139_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1682, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1682, 6)

    description = property(__description.value, __description.set, None, None)


    # Attribute gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gamma'), 'gamma', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_139_gamma', REAL_NUMBER, unicode_default=u'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1683, 6)
    __gamma._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1683, 6)

    gamma = property(__gamma.value, __gamma.set, None, None)


    # Attribute coef0 uses Python identifier coef0
    __coef0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coef0'), 'coef0', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_139_coef0', REAL_NUMBER, unicode_default=u'1')
    __coef0._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1684, 6)
    __coef0._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1684, 6)

    coef0 = property(__coef0.value, __coef0.set, None, None)


    # Attribute degree uses Python identifier degree
    __degree = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'degree'), 'degree', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_139_degree', REAL_NUMBER, unicode_default=u'1')
    __degree._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1685, 6)
    __degree._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1685, 6)

    degree = property(__degree.value, __degree.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __description.name() : __description,
        __gamma.name() : __gamma,
        __coef0.name() : __coef0,
        __degree.name() : __degree
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1689, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_140_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_140_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1693, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1693, 6)

    description = property(__description.value, __description.set, None, None)


    # Attribute gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gamma'), 'gamma', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_140_gamma', REAL_NUMBER, unicode_default=u'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1694, 6)
    __gamma._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1694, 6)

    gamma = property(__gamma.value, __gamma.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __description.name() : __description,
        __gamma.name() : __gamma
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1698, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_141_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_141_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1702, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1702, 6)

    description = property(__description.value, __description.set, None, None)


    # Attribute gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gamma'), 'gamma', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_141_gamma', REAL_NUMBER, unicode_default=u'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1703, 6)
    __gamma._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1703, 6)

    gamma = property(__gamma.value, __gamma.set, None, None)


    # Attribute coef0 uses Python identifier coef0
    __coef0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coef0'), 'coef0', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_141_coef0', REAL_NUMBER, unicode_default=u'1')
    __coef0._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1704, 6)
    __coef0._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1704, 6)

    coef0 = property(__coef0.value, __coef0.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __description.name() : __description,
        __gamma.name() : __gamma,
        __coef0.name() : __coef0
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1711, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_142_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}VectorFields uses Python identifier VectorFields
    __VectorFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'VectorFields'), 'VectorFields', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_142_httpwww_dmg_orgPMML_4_0VectorFields', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1720, 2), )


    VectorFields = property(__VectorFields.value, __VectorFields.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}VectorInstance uses Python identifier VectorInstance
    __VectorInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'VectorInstance'), 'VectorInstance', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_142_httpwww_dmg_orgPMML_4_0VectorInstance', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1729, 2), )


    VectorInstance = property(__VectorInstance.value, __VectorInstance.set, None, None)


    # Attribute numberOfVectors uses Python identifier numberOfVectors
    __numberOfVectors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfVectors'), 'numberOfVectors', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_142_numberOfVectors', INT_NUMBER)
    __numberOfVectors._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1717, 6)
    __numberOfVectors._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1717, 6)

    numberOfVectors = property(__numberOfVectors.value, __numberOfVectors.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __VectorFields.name() : __VectorFields,
        __VectorInstance.name() : __VectorInstance
    })
    _AttributeMap.update({
        __numberOfVectors.name() : __numberOfVectors
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_143 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1721, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_143_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FieldRef uses Python identifier FieldRef
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), 'FieldRef', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_143_httpwww_dmg_orgPMML_4_0FieldRef', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2), )


    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)


    # Attribute numberOfFields uses Python identifier numberOfFields
    __numberOfFields = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfFields'), 'numberOfFields', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_143_numberOfFields', INT_NUMBER)
    __numberOfFields._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1726, 6)
    __numberOfFields._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1726, 6)

    numberOfFields = property(__numberOfFields.value, __numberOfFields.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __FieldRef.name() : __FieldRef
    })
    _AttributeMap.update({
        __numberOfFields.name() : __numberOfFields
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_144 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1730, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_144_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_144_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}REAL-SparseArray uses Python identifier REAL_SparseArray
    __REAL_SparseArray = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'REAL-SparseArray'), 'REAL_SparseArray', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_144_httpwww_dmg_orgPMML_4_0REAL_SparseArray', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 133, 2), )


    REAL_SparseArray = property(__REAL_SparseArray.value, __REAL_SparseArray.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_144_id', VECTOR_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1738, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1738, 6)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array,
        __REAL_SparseArray.name() : __REAL_SparseArray
    })
    _AttributeMap.update({
        __id.name() : __id
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_145 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1742, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SupportVectors uses Python identifier SupportVectors
    __SupportVectors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SupportVectors'), 'SupportVectors', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_httpwww_dmg_orgPMML_4_0SupportVectors', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1753, 2), )


    SupportVectors = property(__SupportVectors.value, __SupportVectors.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Coefficients uses Python identifier Coefficients
    __Coefficients = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Coefficients'), 'Coefficients', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_httpwww_dmg_orgPMML_4_0Coefficients', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1771, 2), )


    Coefficients = property(__Coefficients.value, __Coefficients.set, None, None)


    # Attribute targetCategory uses Python identifier targetCategory
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetCategory'), 'targetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1748, 6)
    __targetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1748, 6)

    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)


    # Attribute alternateTargetCategory uses Python identifier alternateTargetCategory
    __alternateTargetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alternateTargetCategory'), 'alternateTargetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_alternateTargetCategory', pyxb.binding.datatypes.string)
    __alternateTargetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1749, 6)
    __alternateTargetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1749, 6)

    alternateTargetCategory = property(__alternateTargetCategory.value, __alternateTargetCategory.set, None, None)


    # Attribute threshold uses Python identifier threshold
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'threshold'), 'threshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_145_threshold', REAL_NUMBER)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1750, 6)
    __threshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1750, 6)

    threshold = property(__threshold.value, __threshold.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __SupportVectors.name() : __SupportVectors,
        __Coefficients.name() : __Coefficients
    })
    _AttributeMap.update({
        __targetCategory.name() : __targetCategory,
        __alternateTargetCategory.name() : __alternateTargetCategory,
        __threshold.name() : __threshold
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_146 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1754, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_146_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SupportVector uses Python identifier SupportVector
    __SupportVector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SupportVector'), 'SupportVector', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_146_httpwww_dmg_orgPMML_4_0SupportVector', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1763, 2), )


    SupportVector = property(__SupportVector.value, __SupportVector.set, None, None)


    # Attribute numberOfSupportVectors uses Python identifier numberOfSupportVectors
    __numberOfSupportVectors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfSupportVectors'), 'numberOfSupportVectors', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_146_numberOfSupportVectors', INT_NUMBER)
    __numberOfSupportVectors._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1759, 6)
    __numberOfSupportVectors._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1759, 6)

    numberOfSupportVectors = property(__numberOfSupportVectors.value, __numberOfSupportVectors.set, None, None)


    # Attribute numberOfAttributes uses Python identifier numberOfAttributes
    __numberOfAttributes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfAttributes'), 'numberOfAttributes', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_146_numberOfAttributes', INT_NUMBER)
    __numberOfAttributes._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1760, 6)
    __numberOfAttributes._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1760, 6)

    numberOfAttributes = property(__numberOfAttributes.value, __numberOfAttributes.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __SupportVector.name() : __SupportVector
    })
    _AttributeMap.update({
        __numberOfSupportVectors.name() : __numberOfSupportVectors,
        __numberOfAttributes.name() : __numberOfAttributes
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_147 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1764, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_147_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute vectorId uses Python identifier vectorId
    __vectorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vectorId'), 'vectorId', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_147_vectorId', VECTOR_ID, required=True)
    __vectorId._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1768, 6)
    __vectorId._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1768, 6)

    vectorId = property(__vectorId.value, __vectorId.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __vectorId.name() : __vectorId
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_148 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1772, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_148_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Coefficient uses Python identifier Coefficient
    __Coefficient = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Coefficient'), 'Coefficient', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_148_httpwww_dmg_orgPMML_4_0Coefficient', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1781, 2), )


    Coefficient = property(__Coefficient.value, __Coefficient.set, None, None)


    # Attribute numberOfCoefficients uses Python identifier numberOfCoefficients
    __numberOfCoefficients = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfCoefficients'), 'numberOfCoefficients', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_148_numberOfCoefficients', INT_NUMBER)
    __numberOfCoefficients._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1777, 6)
    __numberOfCoefficients._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1777, 6)

    numberOfCoefficients = property(__numberOfCoefficients.value, __numberOfCoefficients.set, None, None)


    # Attribute absoluteValue uses Python identifier absoluteValue
    __absoluteValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'absoluteValue'), 'absoluteValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_148_absoluteValue', REAL_NUMBER, unicode_default=u'0')
    __absoluteValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1778, 6)
    __absoluteValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1778, 6)

    absoluteValue = property(__absoluteValue.value, __absoluteValue.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Coefficient.name() : __Coefficient
    })
    _AttributeMap.update({
        __numberOfCoefficients.name() : __numberOfCoefficients,
        __absoluteValue.name() : __absoluteValue
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_149 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1782, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_149_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_149_value', REAL_NUMBER, unicode_default=u'0')
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1786, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1786, 6)

    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_150 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1790, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextDictionary uses Python identifier TextDictionary
    __TextDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextDictionary'), 'TextDictionary', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0TextDictionary', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1814, 2), )


    TextDictionary = property(__TextDictionary.value, __TextDictionary.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextCorpus uses Python identifier TextCorpus
    __TextCorpus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextCorpus'), 'TextCorpus', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0TextCorpus', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1823, 2), )


    TextCorpus = property(__TextCorpus.value, __TextCorpus.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DocumentTermMatrix uses Python identifier DocumentTermMatrix
    __DocumentTermMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DocumentTermMatrix'), 'DocumentTermMatrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0DocumentTermMatrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1842, 2), )


    DocumentTermMatrix = property(__DocumentTermMatrix.value, __DocumentTermMatrix.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextModelNormalization uses Python identifier TextModelNormalization
    __TextModelNormalization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextModelNormalization'), 'TextModelNormalization', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0TextModelNormalization', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1850, 2), )


    TextModelNormalization = property(__TextModelNormalization.value, __TextModelNormalization.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TextModelSimiliarity uses Python identifier TextModelSimiliarity
    __TextModelSimiliarity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TextModelSimiliarity'), 'TextModelSimiliarity', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0TextModelSimiliarity', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1886, 2), )


    TextModelSimiliarity = property(__TextModelSimiliarity.value, __TextModelSimiliarity.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1807, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1807, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1808, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1808, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1809, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1809, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute numberOfTerms uses Python identifier numberOfTerms
    __numberOfTerms = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfTerms'), 'numberOfTerms', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_numberOfTerms', pyxb.binding.datatypes.integer, required=True)
    __numberOfTerms._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1810, 6)
    __numberOfTerms._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1810, 6)

    numberOfTerms = property(__numberOfTerms.value, __numberOfTerms.set, None, None)


    # Attribute numberOfDocuments uses Python identifier numberOfDocuments
    __numberOfDocuments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfDocuments'), 'numberOfDocuments', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_150_numberOfDocuments', pyxb.binding.datatypes.integer, required=True)
    __numberOfDocuments._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1811, 6)
    __numberOfDocuments._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1811, 6)

    numberOfDocuments = property(__numberOfDocuments.value, __numberOfDocuments.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __TextDictionary.name() : __TextDictionary,
        __TextCorpus.name() : __TextCorpus,
        __DocumentTermMatrix.name() : __DocumentTermMatrix,
        __TextModelNormalization.name() : __TextModelNormalization,
        __TextModelSimiliarity.name() : __TextModelSimiliarity,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __numberOfTerms.name() : __numberOfTerms,
        __numberOfDocuments.name() : __numberOfDocuments
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_151 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1832, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_151_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_151_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1836, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1836, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_151_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1837, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1837, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute length uses Python identifier length
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'length'), 'length', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_151_length', INT_NUMBER)
    __length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1838, 6)
    __length._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1838, 6)

    length = property(__length.value, __length.set, None, None)


    # Attribute file uses Python identifier file
    __file = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'file'), 'file', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_151_file', pyxb.binding.datatypes.string)
    __file._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1839, 6)
    __file._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1839, 6)

    file = property(__file.value, __file.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __id.name() : __id,
        __name.name() : __name,
        __length.name() : __length,
        __file.name() : __file
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_152 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1851, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_152_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute localTermWeights uses Python identifier localTermWeights
    __localTermWeights = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localTermWeights'), 'localTermWeights', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_152_localTermWeights', STD_ANON_27, unicode_default=u'termFrequency')
    __localTermWeights._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1855, 6)
    __localTermWeights._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1855, 6)

    localTermWeights = property(__localTermWeights.value, __localTermWeights.set, None, None)


    # Attribute globalTermWeights uses Python identifier globalTermWeights
    __globalTermWeights = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'globalTermWeights'), 'globalTermWeights', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_152_globalTermWeights', STD_ANON_28, unicode_default=u'inverseDocumentFrequency')
    __globalTermWeights._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1865, 6)
    __globalTermWeights._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1865, 6)

    globalTermWeights = property(__globalTermWeights.value, __globalTermWeights.set, None, None)


    # Attribute documentNormalization uses Python identifier documentNormalization
    __documentNormalization = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'documentNormalization'), 'documentNormalization', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_152_documentNormalization', STD_ANON_29, unicode_default=u'none')
    __documentNormalization._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1876, 6)
    __documentNormalization._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1876, 6)

    documentNormalization = property(__documentNormalization.value, __documentNormalization.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __localTermWeights.name() : __localTermWeights,
        __globalTermWeights.name() : __globalTermWeights,
        __documentNormalization.name() : __documentNormalization
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_153 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1887, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_153_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute similarityType uses Python identifier similarityType
    __similarityType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'similarityType'), 'similarityType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_153_similarityType', STD_ANON_30)
    __similarityType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1891, 6)
    __similarityType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1891, 6)

    similarityType = property(__similarityType.value, __similarityType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __similarityType.name() : __similarityType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_154 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1902, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ParameterList uses Python identifier ParameterList
    __ParameterList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ParameterList'), 'ParameterList', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0ParameterList', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1968, 2), )


    ParameterList = property(__ParameterList.value, __ParameterList.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}FactorList uses Python identifier FactorList
    __FactorList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'FactorList'), 'FactorList', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0FactorList', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1986, 2), )


    FactorList = property(__FactorList.value, __FactorList.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CovariateList uses Python identifier CovariateList
    __CovariateList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CovariateList'), 'CovariateList', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0CovariateList', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1994, 2), )


    CovariateList = property(__CovariateList.value, __CovariateList.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PPMatrix uses Python identifier PPMatrix
    __PPMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PPMatrix'), 'PPMatrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0PPMatrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2012, 2), )


    PPMatrix = property(__PPMatrix.value, __PPMatrix.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PCovMatrix uses Python identifier PCovMatrix
    __PCovMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PCovMatrix'), 'PCovMatrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0PCovMatrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2031, 2), )


    PCovMatrix = property(__PCovMatrix.value, __PCovMatrix.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ParamMatrix uses Python identifier ParamMatrix
    __ParamMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ParamMatrix'), 'ParamMatrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0ParamMatrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2060, 2), )


    ParamMatrix = property(__ParamMatrix.value, __ParamMatrix.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BaseCumHazardTables uses Python identifier BaseCumHazardTables
    __BaseCumHazardTables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BaseCumHazardTables'), 'BaseCumHazardTables', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0BaseCumHazardTables', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2079, 2), )


    BaseCumHazardTables = property(__BaseCumHazardTables.value, __BaseCumHazardTables.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}EventValues uses Python identifier EventValues
    __EventValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'EventValues'), 'EventValues', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0EventValues', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2111, 2), )


    EventValues = property(__EventValues.value, __EventValues.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute targetVariableName uses Python identifier targetVariableName
    __targetVariableName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetVariableName'), 'targetVariableName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_targetVariableName', FIELD_NAME)
    __targetVariableName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1922, 6)
    __targetVariableName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1922, 6)

    targetVariableName = property(__targetVariableName.value, __targetVariableName.set, None, None)


    # Attribute modelType uses Python identifier modelType
    __modelType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelType'), 'modelType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_modelType', STD_ANON_31, required=True)
    __modelType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1923, 6)
    __modelType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1923, 6)

    modelType = property(__modelType.value, __modelType.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1935, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1935, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1936, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1936, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1937, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1937, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute targetReferenceCategory uses Python identifier targetReferenceCategory
    __targetReferenceCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetReferenceCategory'), 'targetReferenceCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_targetReferenceCategory', pyxb.binding.datatypes.string)
    __targetReferenceCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1938, 6)
    __targetReferenceCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1938, 6)

    targetReferenceCategory = property(__targetReferenceCategory.value, __targetReferenceCategory.set, None, None)


    # Attribute cumulativeLink uses Python identifier cumulativeLink
    __cumulativeLink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cumulativeLink'), 'cumulativeLink', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_cumulativeLink', CUMULATIVE_LINK_FUNCTION)
    __cumulativeLink._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1939, 6)
    __cumulativeLink._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1939, 6)

    cumulativeLink = property(__cumulativeLink.value, __cumulativeLink.set, None, None)


    # Attribute linkFunction uses Python identifier linkFunction
    __linkFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'linkFunction'), 'linkFunction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_linkFunction', LINK_FUNCTION)
    __linkFunction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1940, 6)
    __linkFunction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1940, 6)

    linkFunction = property(__linkFunction.value, __linkFunction.set, None, None)


    # Attribute linkParameter uses Python identifier linkParameter
    __linkParameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'linkParameter'), 'linkParameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_linkParameter', REAL_NUMBER)
    __linkParameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1941, 6)
    __linkParameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1941, 6)

    linkParameter = property(__linkParameter.value, __linkParameter.set, None, None)


    # Attribute trialsVariable uses Python identifier trialsVariable
    __trialsVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trialsVariable'), 'trialsVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_trialsVariable', FIELD_NAME)
    __trialsVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1942, 6)
    __trialsVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1942, 6)

    trialsVariable = property(__trialsVariable.value, __trialsVariable.set, None, None)


    # Attribute trialsValue uses Python identifier trialsValue
    __trialsValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trialsValue'), 'trialsValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_trialsValue', INT_NUMBER)
    __trialsValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1943, 6)
    __trialsValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1943, 6)

    trialsValue = property(__trialsValue.value, __trialsValue.set, None, None)


    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'distribution'), 'distribution', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_distribution', STD_ANON_32)
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1944, 6)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1944, 6)

    distribution = property(__distribution.value, __distribution.set, None, None)


    # Attribute distParameter uses Python identifier distParameter
    __distParameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'distParameter'), 'distParameter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_distParameter', REAL_NUMBER)
    __distParameter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1957, 6)
    __distParameter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1957, 6)

    distParameter = property(__distParameter.value, __distParameter.set, None, None)


    # Attribute offsetVariable uses Python identifier offsetVariable
    __offsetVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'offsetVariable'), 'offsetVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_offsetVariable', FIELD_NAME)
    __offsetVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1958, 6)
    __offsetVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1958, 6)

    offsetVariable = property(__offsetVariable.value, __offsetVariable.set, None, None)


    # Attribute offsetValue uses Python identifier offsetValue
    __offsetValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'offsetValue'), 'offsetValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_offsetValue', REAL_NUMBER)
    __offsetValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1959, 6)
    __offsetValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1959, 6)

    offsetValue = property(__offsetValue.value, __offsetValue.set, None, None)


    # Attribute modelDF uses Python identifier modelDF
    __modelDF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelDF'), 'modelDF', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_modelDF', REAL_NUMBER)
    __modelDF._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1960, 6)
    __modelDF._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1960, 6)

    modelDF = property(__modelDF.value, __modelDF.set, None, None)


    # Attribute endTimeVariable uses Python identifier endTimeVariable
    __endTimeVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endTimeVariable'), 'endTimeVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_endTimeVariable', FIELD_NAME)
    __endTimeVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1961, 6)
    __endTimeVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1961, 6)

    endTimeVariable = property(__endTimeVariable.value, __endTimeVariable.set, None, None)


    # Attribute startTimeVariable uses Python identifier startTimeVariable
    __startTimeVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startTimeVariable'), 'startTimeVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_startTimeVariable', FIELD_NAME)
    __startTimeVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1962, 6)
    __startTimeVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1962, 6)

    startTimeVariable = property(__startTimeVariable.value, __startTimeVariable.set, None, None)


    # Attribute subjectIDVariable uses Python identifier subjectIDVariable
    __subjectIDVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subjectIDVariable'), 'subjectIDVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_subjectIDVariable', FIELD_NAME)
    __subjectIDVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1963, 6)
    __subjectIDVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1963, 6)

    subjectIDVariable = property(__subjectIDVariable.value, __subjectIDVariable.set, None, None)


    # Attribute statusVariable uses Python identifier statusVariable
    __statusVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'statusVariable'), 'statusVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_statusVariable', FIELD_NAME)
    __statusVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1964, 6)
    __statusVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1964, 6)

    statusVariable = property(__statusVariable.value, __statusVariable.set, None, None)


    # Attribute baselineStrataVariable uses Python identifier baselineStrataVariable
    __baselineStrataVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baselineStrataVariable'), 'baselineStrataVariable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_154_baselineStrataVariable', FIELD_NAME)
    __baselineStrataVariable._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1965, 6)
    __baselineStrataVariable._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1965, 6)

    baselineStrataVariable = property(__baselineStrataVariable.value, __baselineStrataVariable.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __ParameterList.name() : __ParameterList,
        __FactorList.name() : __FactorList,
        __CovariateList.name() : __CovariateList,
        __PPMatrix.name() : __PPMatrix,
        __PCovMatrix.name() : __PCovMatrix,
        __ParamMatrix.name() : __ParamMatrix,
        __BaseCumHazardTables.name() : __BaseCumHazardTables,
        __EventValues.name() : __EventValues,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __targetVariableName.name() : __targetVariableName,
        __modelType.name() : __modelType,
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __targetReferenceCategory.name() : __targetReferenceCategory,
        __cumulativeLink.name() : __cumulativeLink,
        __linkFunction.name() : __linkFunction,
        __linkParameter.name() : __linkParameter,
        __trialsVariable.name() : __trialsVariable,
        __trialsValue.name() : __trialsValue,
        __distribution.name() : __distribution,
        __distParameter.name() : __distParameter,
        __offsetVariable.name() : __offsetVariable,
        __offsetValue.name() : __offsetValue,
        __modelDF.name() : __modelDF,
        __endTimeVariable.name() : __endTimeVariable,
        __startTimeVariable.name() : __startTimeVariable,
        __subjectIDVariable.name() : __subjectIDVariable,
        __statusVariable.name() : __statusVariable,
        __baselineStrataVariable.name() : __baselineStrataVariable
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_155 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1977, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_155_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_155_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1981, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1981, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'label'), 'label', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_155_label', pyxb.binding.datatypes.string)
    __label._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1982, 6)
    __label._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1982, 6)

    label = property(__label.value, __label.set, None, None)


    # Attribute referencePoint uses Python identifier referencePoint
    __referencePoint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'referencePoint'), 'referencePoint', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_155_referencePoint', REAL_NUMBER, unicode_default=u'0')
    __referencePoint._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1983, 6)
    __referencePoint._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1983, 6)

    referencePoint = property(__referencePoint.value, __referencePoint.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __label.name() : __label,
        __referencePoint.name() : __referencePoint
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_156 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2003, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_156_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Matrix uses Python identifier Matrix
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), 'Matrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_156_httpwww_dmg_orgPMML_4_0Matrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2), )


    Matrix = property(__Matrix.value, __Matrix.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_156_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2008, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2008, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute contrastMatrixType uses Python identifier contrastMatrixType
    __contrastMatrixType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contrastMatrixType'), 'contrastMatrixType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_156_contrastMatrixType', pyxb.binding.datatypes.string)
    __contrastMatrixType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2009, 6)
    __contrastMatrixType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2009, 6)

    contrastMatrixType = property(__contrastMatrixType.value, __contrastMatrixType.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Matrix.name() : __Matrix
    })
    _AttributeMap.update({
        __name.name() : __name,
        __contrastMatrixType.name() : __contrastMatrixType
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_157 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2021, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_157_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_157_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2025, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2025, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute predictorName uses Python identifier predictorName
    __predictorName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'predictorName'), 'predictorName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_157_predictorName', FIELD_NAME, required=True)
    __predictorName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2026, 6)
    __predictorName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2026, 6)

    predictorName = property(__predictorName.value, __predictorName.set, None, None)


    # Attribute parameterName uses Python identifier parameterName
    __parameterName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parameterName'), 'parameterName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_157_parameterName', pyxb.binding.datatypes.string, required=True)
    __parameterName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2027, 6)
    __parameterName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2027, 6)

    parameterName = property(__parameterName.value, __parameterName.set, None, None)


    # Attribute targetCategory uses Python identifier targetCategory
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetCategory'), 'targetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_157_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2028, 6)
    __targetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2028, 6)

    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __value.name() : __value,
        __predictorName.name() : __predictorName,
        __parameterName.name() : __parameterName,
        __targetCategory.name() : __targetCategory
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_158 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2032, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_158_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}PCovCell uses Python identifier PCovCell
    __PCovCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'PCovCell'), 'PCovCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_158_httpwww_dmg_orgPMML_4_0PCovCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2047, 2), )


    PCovCell = property(__PCovCell.value, __PCovCell.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_158_type', STD_ANON_33)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2037, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2037, 6)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __PCovCell.name() : __PCovCell
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_159 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2048, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute pRow uses Python identifier pRow
    __pRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pRow'), 'pRow', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_pRow', pyxb.binding.datatypes.string, required=True)
    __pRow._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2052, 6)
    __pRow._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2052, 6)

    pRow = property(__pRow.value, __pRow.set, None, None)


    # Attribute pCol uses Python identifier pCol
    __pCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pCol'), 'pCol', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_pCol', pyxb.binding.datatypes.string, required=True)
    __pCol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2053, 6)
    __pCol._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2053, 6)

    pCol = property(__pCol.value, __pCol.set, None, None)


    # Attribute tRow uses Python identifier tRow
    __tRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tRow'), 'tRow', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_tRow', pyxb.binding.datatypes.string)
    __tRow._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2054, 6)
    __tRow._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2054, 6)

    tRow = property(__tRow.value, __tRow.set, None, None)


    # Attribute tCol uses Python identifier tCol
    __tCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tCol'), 'tCol', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_tCol', pyxb.binding.datatypes.string)
    __tCol._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2055, 6)
    __tCol._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2055, 6)

    tCol = property(__tCol.value, __tCol.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_value', REAL_NUMBER, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2056, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2056, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute targetCategory uses Python identifier targetCategory
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetCategory'), 'targetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_159_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2057, 6)
    __targetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2057, 6)

    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __pRow.name() : __pRow,
        __pCol.name() : __pCol,
        __tRow.name() : __tRow,
        __tCol.name() : __tCol,
        __value.name() : __value,
        __targetCategory.name() : __targetCategory
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_160 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2069, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_160_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute targetCategory uses Python identifier targetCategory
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetCategory'), 'targetCategory', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_160_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2073, 6)
    __targetCategory._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2073, 6)

    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)


    # Attribute parameterName uses Python identifier parameterName
    __parameterName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parameterName'), 'parameterName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_160_parameterName', pyxb.binding.datatypes.string, required=True)
    __parameterName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2074, 6)
    __parameterName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2074, 6)

    parameterName = property(__parameterName.value, __parameterName.set, None, None)


    # Attribute beta uses Python identifier beta
    __beta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'beta'), 'beta', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_160_beta', REAL_NUMBER, required=True)
    __beta._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2075, 6)
    __beta._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2075, 6)

    beta = property(__beta.value, __beta.set, None, None)


    # Attribute df uses Python identifier df
    __df = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'df'), 'df', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_160_df', INT_NUMBER)
    __df._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2076, 6)
    __df._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2076, 6)

    df = property(__df.value, __df.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __targetCategory.name() : __targetCategory,
        __parameterName.name() : __parameterName,
        __beta.name() : __beta,
        __df.name() : __df
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_161 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2080, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_161_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BaselineStratum uses Python identifier BaselineStratum
    __BaselineStratum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BaselineStratum'), 'BaselineStratum', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_161_httpwww_dmg_orgPMML_4_0BaselineStratum', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2091, 2), )


    BaselineStratum = property(__BaselineStratum.value, __BaselineStratum.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BaselineCell uses Python identifier BaselineCell
    __BaselineCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell'), 'BaselineCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_161_httpwww_dmg_orgPMML_4_0BaselineCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2102, 2), )


    BaselineCell = property(__BaselineCell.value, __BaselineCell.set, None, None)


    # Attribute maxTime uses Python identifier maxTime
    __maxTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxTime'), 'maxTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_161_maxTime', REAL_NUMBER)
    __maxTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2088, 6)
    __maxTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2088, 6)

    maxTime = property(__maxTime.value, __maxTime.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __BaselineStratum.name() : __BaselineStratum,
        __BaselineCell.name() : __BaselineCell
    })
    _AttributeMap.update({
        __maxTime.name() : __maxTime
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_162 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2092, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_162_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BaselineCell uses Python identifier BaselineCell
    __BaselineCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell'), 'BaselineCell', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_162_httpwww_dmg_orgPMML_4_0BaselineCell', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2102, 2), )


    BaselineCell = property(__BaselineCell.value, __BaselineCell.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_162_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2097, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2097, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'label'), 'label', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_162_label', pyxb.binding.datatypes.string)
    __label._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2098, 6)
    __label._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2098, 6)

    label = property(__label.value, __label.set, None, None)


    # Attribute maxTime uses Python identifier maxTime
    __maxTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxTime'), 'maxTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_162_maxTime', REAL_NUMBER, required=True)
    __maxTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2099, 6)
    __maxTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2099, 6)

    maxTime = property(__maxTime.value, __maxTime.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __BaselineCell.name() : __BaselineCell
    })
    _AttributeMap.update({
        __value.name() : __value,
        __label.name() : __label,
        __maxTime.name() : __maxTime
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_163 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2103, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_163_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_163_time', REAL_NUMBER, required=True)
    __time._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2107, 6)
    __time._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2107, 6)

    time = property(__time.value, __time.set, None, None)


    # Attribute cumHazard uses Python identifier cumHazard
    __cumHazard = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cumHazard'), 'cumHazard', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_163_cumHazard', REAL_NUMBER, required=True)
    __cumHazard._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2108, 6)
    __cumHazard._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2108, 6)

    cumHazard = property(__cumHazard.value, __cumHazard.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __time.name() : __time,
        __cumHazard.name() : __cumHazard
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_164 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2144, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Item uses Python identifier Item
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Item'), 'Item', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0Item', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1260, 2), )


    Item = property(__Item.value, __Item.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Itemset uses Python identifier Itemset
    __Itemset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Itemset'), 'Itemset', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0Itemset', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1271, 2), )


    Itemset = property(__Itemset.value, __Itemset.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Constraints uses Python identifier Constraints
    __Constraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Constraints'), 'Constraints', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0Constraints', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2169, 2), )


    Constraints = property(__Constraints.value, __Constraints.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SetPredicate uses Python identifier SetPredicate
    __SetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SetPredicate'), 'SetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0SetPredicate', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2195, 2), )


    SetPredicate = property(__SetPredicate.value, __SetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Sequence uses Python identifier Sequence
    __Sequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Sequence'), 'Sequence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0Sequence', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2247, 2), )


    Sequence = property(__Sequence.value, __Sequence.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SequenceRule uses Python identifier SequenceRule
    __SequenceRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SequenceRule'), 'SequenceRule', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_httpwww_dmg_orgPMML_4_0SequenceRule', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2271, 2), )


    SequenceRule = property(__SequenceRule.value, __SequenceRule.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2158, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2158, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2159, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2159, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2160, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2160, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute numberOfTransactions uses Python identifier numberOfTransactions
    __numberOfTransactions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfTransactions'), 'numberOfTransactions', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_numberOfTransactions', INT_NUMBER)
    __numberOfTransactions._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2161, 6)
    __numberOfTransactions._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2161, 6)

    numberOfTransactions = property(__numberOfTransactions.value, __numberOfTransactions.set, None, None)


    # Attribute maxNumberOfItemsPerTransaction uses Python identifier maxNumberOfItemsPerTransaction
    __maxNumberOfItemsPerTransaction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxNumberOfItemsPerTransaction'), 'maxNumberOfItemsPerTransaction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_maxNumberOfItemsPerTransaction', INT_NUMBER)
    __maxNumberOfItemsPerTransaction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2162, 6)
    __maxNumberOfItemsPerTransaction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2162, 6)

    maxNumberOfItemsPerTransaction = property(__maxNumberOfItemsPerTransaction.value, __maxNumberOfItemsPerTransaction.set, None, None)


    # Attribute avgNumberOfItemsPerTransaction uses Python identifier avgNumberOfItemsPerTransaction
    __avgNumberOfItemsPerTransaction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'avgNumberOfItemsPerTransaction'), 'avgNumberOfItemsPerTransaction', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_avgNumberOfItemsPerTransaction', REAL_NUMBER)
    __avgNumberOfItemsPerTransaction._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2163, 6)
    __avgNumberOfItemsPerTransaction._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2163, 6)

    avgNumberOfItemsPerTransaction = property(__avgNumberOfItemsPerTransaction.value, __avgNumberOfItemsPerTransaction.set, None, None)


    # Attribute numberOfTransactionGroups uses Python identifier numberOfTransactionGroups
    __numberOfTransactionGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfTransactionGroups'), 'numberOfTransactionGroups', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_numberOfTransactionGroups', INT_NUMBER)
    __numberOfTransactionGroups._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2164, 6)
    __numberOfTransactionGroups._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2164, 6)

    numberOfTransactionGroups = property(__numberOfTransactionGroups.value, __numberOfTransactionGroups.set, None, None)


    # Attribute maxNumberOfTAsPerTAGroup uses Python identifier maxNumberOfTAsPerTAGroup
    __maxNumberOfTAsPerTAGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxNumberOfTAsPerTAGroup'), 'maxNumberOfTAsPerTAGroup', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_maxNumberOfTAsPerTAGroup', INT_NUMBER)
    __maxNumberOfTAsPerTAGroup._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2165, 6)
    __maxNumberOfTAsPerTAGroup._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2165, 6)

    maxNumberOfTAsPerTAGroup = property(__maxNumberOfTAsPerTAGroup.value, __maxNumberOfTAsPerTAGroup.set, None, None)


    # Attribute avgNumberOfTAsPerTAGroup uses Python identifier avgNumberOfTAsPerTAGroup
    __avgNumberOfTAsPerTAGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'avgNumberOfTAsPerTAGroup'), 'avgNumberOfTAsPerTAGroup', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_164_avgNumberOfTAsPerTAGroup', REAL_NUMBER)
    __avgNumberOfTAsPerTAGroup._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2166, 6)
    __avgNumberOfTAsPerTAGroup._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2166, 6)

    avgNumberOfTAsPerTAGroup = property(__avgNumberOfTAsPerTAGroup.value, __avgNumberOfTAsPerTAGroup.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Item.name() : __Item,
        __Itemset.name() : __Itemset,
        __Constraints.name() : __Constraints,
        __SetPredicate.name() : __SetPredicate,
        __Sequence.name() : __Sequence,
        __SequenceRule.name() : __SequenceRule
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __numberOfTransactions.name() : __numberOfTransactions,
        __maxNumberOfItemsPerTransaction.name() : __maxNumberOfItemsPerTransaction,
        __avgNumberOfItemsPerTransaction.name() : __avgNumberOfItemsPerTransaction,
        __numberOfTransactionGroups.name() : __numberOfTransactionGroups,
        __maxNumberOfTAsPerTAGroup.name() : __maxNumberOfTAsPerTAGroup,
        __avgNumberOfTAsPerTAGroup.name() : __avgNumberOfTAsPerTAGroup
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_165 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2170, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute minimumNumberOfItems uses Python identifier minimumNumberOfItems
    __minimumNumberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumNumberOfItems'), 'minimumNumberOfItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumNumberOfItems', INT_NUMBER, unicode_default=u'1')
    __minimumNumberOfItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2174, 6)
    __minimumNumberOfItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2174, 6)

    minimumNumberOfItems = property(__minimumNumberOfItems.value, __minimumNumberOfItems.set, None, None)


    # Attribute maximumNumberOfItems uses Python identifier maximumNumberOfItems
    __maximumNumberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumNumberOfItems'), 'maximumNumberOfItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumNumberOfItems', INT_NUMBER)
    __maximumNumberOfItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2175, 6)
    __maximumNumberOfItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2175, 6)

    maximumNumberOfItems = property(__maximumNumberOfItems.value, __maximumNumberOfItems.set, None, None)


    # Attribute minimumNumberOfAntecedentItems uses Python identifier minimumNumberOfAntecedentItems
    __minimumNumberOfAntecedentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumNumberOfAntecedentItems'), 'minimumNumberOfAntecedentItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumNumberOfAntecedentItems', INT_NUMBER, unicode_default=u'1')
    __minimumNumberOfAntecedentItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2176, 6)
    __minimumNumberOfAntecedentItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2176, 6)

    minimumNumberOfAntecedentItems = property(__minimumNumberOfAntecedentItems.value, __minimumNumberOfAntecedentItems.set, None, None)


    # Attribute maximumNumberOfAntecedentItems uses Python identifier maximumNumberOfAntecedentItems
    __maximumNumberOfAntecedentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumNumberOfAntecedentItems'), 'maximumNumberOfAntecedentItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumNumberOfAntecedentItems', INT_NUMBER)
    __maximumNumberOfAntecedentItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2177, 6)
    __maximumNumberOfAntecedentItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2177, 6)

    maximumNumberOfAntecedentItems = property(__maximumNumberOfAntecedentItems.value, __maximumNumberOfAntecedentItems.set, None, None)


    # Attribute minimumNumberOfConsequentItems uses Python identifier minimumNumberOfConsequentItems
    __minimumNumberOfConsequentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumNumberOfConsequentItems'), 'minimumNumberOfConsequentItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumNumberOfConsequentItems', INT_NUMBER, unicode_default=u'1')
    __minimumNumberOfConsequentItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2178, 6)
    __minimumNumberOfConsequentItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2178, 6)

    minimumNumberOfConsequentItems = property(__minimumNumberOfConsequentItems.value, __minimumNumberOfConsequentItems.set, None, None)


    # Attribute maximumNumberOfConsequentItems uses Python identifier maximumNumberOfConsequentItems
    __maximumNumberOfConsequentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumNumberOfConsequentItems'), 'maximumNumberOfConsequentItems', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumNumberOfConsequentItems', INT_NUMBER)
    __maximumNumberOfConsequentItems._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2179, 6)
    __maximumNumberOfConsequentItems._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2179, 6)

    maximumNumberOfConsequentItems = property(__maximumNumberOfConsequentItems.value, __maximumNumberOfConsequentItems.set, None, None)


    # Attribute minimumSupport uses Python identifier minimumSupport
    __minimumSupport = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumSupport'), 'minimumSupport', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumSupport', REAL_NUMBER, unicode_default=u'0')
    __minimumSupport._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2180, 6)
    __minimumSupport._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2180, 6)

    minimumSupport = property(__minimumSupport.value, __minimumSupport.set, None, None)


    # Attribute minimumConfidence uses Python identifier minimumConfidence
    __minimumConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumConfidence'), 'minimumConfidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumConfidence', REAL_NUMBER, unicode_default=u'0')
    __minimumConfidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2181, 6)
    __minimumConfidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2181, 6)

    minimumConfidence = property(__minimumConfidence.value, __minimumConfidence.set, None, None)


    # Attribute minimumLift uses Python identifier minimumLift
    __minimumLift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumLift'), 'minimumLift', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumLift', REAL_NUMBER, unicode_default=u'0')
    __minimumLift._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2182, 6)
    __minimumLift._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2182, 6)

    minimumLift = property(__minimumLift.value, __minimumLift.set, None, None)


    # Attribute minimumTotalSequenceTime uses Python identifier minimumTotalSequenceTime
    __minimumTotalSequenceTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumTotalSequenceTime'), 'minimumTotalSequenceTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumTotalSequenceTime', REAL_NUMBER, unicode_default=u'0')
    __minimumTotalSequenceTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2183, 6)
    __minimumTotalSequenceTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2183, 6)

    minimumTotalSequenceTime = property(__minimumTotalSequenceTime.value, __minimumTotalSequenceTime.set, None, None)


    # Attribute maximumTotalSequenceTime uses Python identifier maximumTotalSequenceTime
    __maximumTotalSequenceTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumTotalSequenceTime'), 'maximumTotalSequenceTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumTotalSequenceTime', REAL_NUMBER)
    __maximumTotalSequenceTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2184, 6)
    __maximumTotalSequenceTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2184, 6)

    maximumTotalSequenceTime = property(__maximumTotalSequenceTime.value, __maximumTotalSequenceTime.set, None, None)


    # Attribute minimumItemsetSeparationTime uses Python identifier minimumItemsetSeparationTime
    __minimumItemsetSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumItemsetSeparationTime'), 'minimumItemsetSeparationTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumItemsetSeparationTime', REAL_NUMBER, unicode_default=u'0')
    __minimumItemsetSeparationTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2185, 6)
    __minimumItemsetSeparationTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2185, 6)

    minimumItemsetSeparationTime = property(__minimumItemsetSeparationTime.value, __minimumItemsetSeparationTime.set, None, None)


    # Attribute maximumItemsetSeparationTime uses Python identifier maximumItemsetSeparationTime
    __maximumItemsetSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumItemsetSeparationTime'), 'maximumItemsetSeparationTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumItemsetSeparationTime', REAL_NUMBER)
    __maximumItemsetSeparationTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2186, 6)
    __maximumItemsetSeparationTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2186, 6)

    maximumItemsetSeparationTime = property(__maximumItemsetSeparationTime.value, __maximumItemsetSeparationTime.set, None, None)


    # Attribute minimumAntConsSeparationTime uses Python identifier minimumAntConsSeparationTime
    __minimumAntConsSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumAntConsSeparationTime'), 'minimumAntConsSeparationTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_minimumAntConsSeparationTime', REAL_NUMBER, unicode_default=u'0')
    __minimumAntConsSeparationTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2187, 6)
    __minimumAntConsSeparationTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2187, 6)

    minimumAntConsSeparationTime = property(__minimumAntConsSeparationTime.value, __minimumAntConsSeparationTime.set, None, None)


    # Attribute maximumAntConsSeparationTime uses Python identifier maximumAntConsSeparationTime
    __maximumAntConsSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximumAntConsSeparationTime'), 'maximumAntConsSeparationTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_165_maximumAntConsSeparationTime', REAL_NUMBER)
    __maximumAntConsSeparationTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2188, 6)
    __maximumAntConsSeparationTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2188, 6)

    maximumAntConsSeparationTime = property(__maximumAntConsSeparationTime.value, __maximumAntConsSeparationTime.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __minimumNumberOfItems.name() : __minimumNumberOfItems,
        __maximumNumberOfItems.name() : __maximumNumberOfItems,
        __minimumNumberOfAntecedentItems.name() : __minimumNumberOfAntecedentItems,
        __maximumNumberOfAntecedentItems.name() : __maximumNumberOfAntecedentItems,
        __minimumNumberOfConsequentItems.name() : __minimumNumberOfConsequentItems,
        __maximumNumberOfConsequentItems.name() : __maximumNumberOfConsequentItems,
        __minimumSupport.name() : __minimumSupport,
        __minimumConfidence.name() : __minimumConfidence,
        __minimumLift.name() : __minimumLift,
        __minimumTotalSequenceTime.name() : __minimumTotalSequenceTime,
        __maximumTotalSequenceTime.name() : __maximumTotalSequenceTime,
        __minimumItemsetSeparationTime.name() : __minimumItemsetSeparationTime,
        __maximumItemsetSeparationTime.name() : __maximumItemsetSeparationTime,
        __minimumAntConsSeparationTime.name() : __minimumAntConsSeparationTime,
        __maximumAntConsSeparationTime.name() : __maximumAntConsSeparationTime
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_166 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2196, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_166_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_166_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_166_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2201, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2201, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_166_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2202, 6)
    __field._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2202, 6)

    field = property(__field.value, __field.set, None, None)


    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_166_operator', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'supersetOf')
    __operator._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2203, 6)
    __operator._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2203, 6)

    operator = property(__operator.value, __operator.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __id.name() : __id,
        __field.name() : __field,
        __operator.name() : __operator
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_167 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2220, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_167_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute delimiter uses Python identifier delimiter
    __delimiter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delimiter'), 'delimiter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_167_delimiter', DELIMITER, required=True)
    __delimiter._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2224, 6)
    __delimiter._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2224, 6)

    delimiter = property(__delimiter.value, __delimiter.set, None, None)


    # Attribute gap uses Python identifier gap
    __gap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gap'), 'gap', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_167_gap', GAP, required=True)
    __gap._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2225, 6)
    __gap._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2225, 6)

    gap = property(__gap.value, __gap.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __delimiter.name() : __delimiter,
        __gap.name() : __gap
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_168 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2229, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_168_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'min'), 'min', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_168_min', NUMBER)
    __min._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2233, 6)
    __min._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2233, 6)

    min = property(__min.value, __min.set, None, None)


    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_168_max', NUMBER)
    __max._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2234, 6)
    __max._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2234, 6)

    max = property(__max.value, __max.set, None, None)


    # Attribute mean uses Python identifier mean
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mean'), 'mean', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_168_mean', NUMBER)
    __mean._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2235, 6)
    __mean._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2235, 6)

    mean = property(__mean.value, __mean.set, None, None)


    # Attribute standardDeviation uses Python identifier standardDeviation
    __standardDeviation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'standardDeviation'), 'standardDeviation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_168_standardDeviation', NUMBER)
    __standardDeviation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2236, 6)
    __standardDeviation._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2236, 6)

    standardDeviation = property(__standardDeviation.value, __standardDeviation.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __min.name() : __min,
        __max.name() : __max,
        __mean.name() : __mean,
        __standardDeviation.name() : __standardDeviation
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_169 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2248, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Delimiter uses Python identifier Delimiter
    __Delimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Delimiter'), 'Delimiter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_httpwww_dmg_orgPMML_4_0Delimiter', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2219, 2), )


    Delimiter = property(__Delimiter.value, __Delimiter.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Time'), 'Time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_httpwww_dmg_orgPMML_4_0Time', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2), )


    Time = property(__Time.value, __Time.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SetReference uses Python identifier SetReference
    __SetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SetReference'), 'SetReference', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_httpwww_dmg_orgPMML_4_0SetReference', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2263, 2), )


    SetReference = property(__SetReference.value, __SetReference.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2257, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2257, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute numberOfSets uses Python identifier numberOfSets
    __numberOfSets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfSets'), 'numberOfSets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_numberOfSets', INT_NUMBER)
    __numberOfSets._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2258, 6)
    __numberOfSets._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2258, 6)

    numberOfSets = property(__numberOfSets.value, __numberOfSets.set, None, None)


    # Attribute occurrence uses Python identifier occurrence
    __occurrence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'occurrence'), 'occurrence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_occurrence', INT_NUMBER)
    __occurrence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2259, 6)
    __occurrence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2259, 6)

    occurrence = property(__occurrence.value, __occurrence.set, None, None)


    # Attribute support uses Python identifier support
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'support'), 'support', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_169_support', REAL_NUMBER)
    __support._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2260, 6)
    __support._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2260, 6)

    support = property(__support.value, __support.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Delimiter.name() : __Delimiter,
        __Time.name() : __Time,
        __SetReference.name() : __SetReference
    })
    _AttributeMap.update({
        __id.name() : __id,
        __numberOfSets.name() : __numberOfSets,
        __occurrence.name() : __occurrence,
        __support.name() : __support
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_170 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2264, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_170_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute setId uses Python identifier setId
    __setId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'setId'), 'setId', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_170_setId', ELEMENT_ID, required=True)
    __setId._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2268, 6)
    __setId._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2268, 6)

    setId = property(__setId.value, __setId.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __setId.name() : __setId
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_171 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2272, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Delimiter uses Python identifier Delimiter
    __Delimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Delimiter'), 'Delimiter', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_httpwww_dmg_orgPMML_4_0Delimiter', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2219, 2), )


    Delimiter = property(__Delimiter.value, __Delimiter.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Time'), 'Time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_httpwww_dmg_orgPMML_4_0Time', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2), )


    Time = property(__Time.value, __Time.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}AntecedentSequence uses Python identifier AntecedentSequence
    __AntecedentSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'AntecedentSequence'), 'AntecedentSequence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_httpwww_dmg_orgPMML_4_0AntecedentSequence', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2306, 2), )


    AntecedentSequence = property(__AntecedentSequence.value, __AntecedentSequence.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ConsequentSequence uses Python identifier ConsequentSequence
    __ConsequentSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ConsequentSequence'), 'ConsequentSequence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_httpwww_dmg_orgPMML_4_0ConsequentSequence', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2313, 2), )


    ConsequentSequence = property(__ConsequentSequence.value, __ConsequentSequence.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2281, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2281, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute numberOfSets uses Python identifier numberOfSets
    __numberOfSets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberOfSets'), 'numberOfSets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_numberOfSets', INT_NUMBER, required=True)
    __numberOfSets._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2282, 6)
    __numberOfSets._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2282, 6)

    numberOfSets = property(__numberOfSets.value, __numberOfSets.set, None, None)


    # Attribute occurrence uses Python identifier occurrence
    __occurrence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'occurrence'), 'occurrence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_occurrence', INT_NUMBER, required=True)
    __occurrence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2283, 6)
    __occurrence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2283, 6)

    occurrence = property(__occurrence.value, __occurrence.set, None, None)


    # Attribute support uses Python identifier support
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'support'), 'support', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_support', REAL_NUMBER, required=True)
    __support._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2284, 6)
    __support._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2284, 6)

    support = property(__support.value, __support.set, None, None)


    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'confidence'), 'confidence', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_confidence', REAL_NUMBER, required=True)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2285, 6)
    __confidence._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2285, 6)

    confidence = property(__confidence.value, __confidence.set, None, None)


    # Attribute lift uses Python identifier lift
    __lift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lift'), 'lift', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_171_lift', REAL_NUMBER)
    __lift._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2286, 6)
    __lift._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2286, 6)

    lift = property(__lift.value, __lift.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __Delimiter.name() : __Delimiter,
        __Time.name() : __Time,
        __AntecedentSequence.name() : __AntecedentSequence,
        __ConsequentSequence.name() : __ConsequentSequence
    })
    _AttributeMap.update({
        __id.name() : __id,
        __numberOfSets.name() : __numberOfSets,
        __occurrence.name() : __occurrence,
        __support.name() : __support,
        __confidence.name() : __confidence,
        __lift.name() : __lift
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_172 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2299, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_172_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute seqId uses Python identifier seqId
    __seqId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'seqId'), 'seqId', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_172_seqId', ELEMENT_ID, required=True)
    __seqId._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2303, 6)
    __seqId._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2303, 6)

    seqId = property(__seqId.value, __seqId.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __seqId.name() : __seqId
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_173 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2321, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BayesInputs uses Python identifier BayesInputs
    __BayesInputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BayesInputs'), 'BayesInputs', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0BayesInputs', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2341, 2), )


    BayesInputs = property(__BayesInputs.value, __BayesInputs.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}BayesOutput uses Python identifier BayesOutput
    __BayesOutput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'BayesOutput'), 'BayesOutput', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0BayesOutput', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2359, 2), )


    BayesOutput = property(__BayesOutput.value, __BayesOutput.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2335, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2335, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute threshold uses Python identifier threshold
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'threshold'), 'threshold', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_threshold', REAL_NUMBER, required=True)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2336, 6)
    __threshold._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2336, 6)

    threshold = property(__threshold.value, __threshold.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2337, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2337, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_173_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2338, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2338, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __BayesInputs.name() : __BayesInputs,
        __BayesOutput.name() : __BayesOutput,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __threshold.name() : __threshold,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_174 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2386, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_174_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_174_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2390, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2390, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_174_count', REAL_NUMBER, required=True)
    __count._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2391, 6)
    __count._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2391, 6)

    count = property(__count.value, __count.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __value.name() : __value,
        __count.name() : __count
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_175 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2395, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_175_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}InlineTable uses Python identifier InlineTable
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), 'InlineTable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_175_httpwww_dmg_orgPMML_4_0InlineTable', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2), )


    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}VerificationFields uses Python identifier VerificationFields
    __VerificationFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'VerificationFields'), 'VerificationFields', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_175_httpwww_dmg_orgPMML_4_0VerificationFields', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2405, 2), )


    VerificationFields = property(__VerificationFields.value, __VerificationFields.set, None, None)


    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_175_recordCount', INT_NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2401, 6)
    __recordCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2401, 6)

    recordCount = property(__recordCount.value, __recordCount.set, None, None)


    # Attribute fieldCount uses Python identifier fieldCount
    __fieldCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldCount'), 'fieldCount', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_175_fieldCount', INT_NUMBER)
    __fieldCount._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2402, 6)
    __fieldCount._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2402, 6)

    fieldCount = property(__fieldCount.value, __fieldCount.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __InlineTable.name() : __InlineTable,
        __VerificationFields.name() : __VerificationFields
    })
    _AttributeMap.update({
        __recordCount.name() : __recordCount,
        __fieldCount.name() : __fieldCount
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_176 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2437, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LiftData uses Python identifier LiftData
    __LiftData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LiftData'), 'LiftData', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_httpwww_dmg_orgPMML_4_0LiftData', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2468, 2), )


    LiftData = property(__LiftData.value, __LiftData.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ROC uses Python identifier ROC
    __ROC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ROC'), 'ROC', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_httpwww_dmg_orgPMML_4_0ROC', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2548, 2), )


    ROC = property(__ROC.value, __ROC.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ConfusionMatrix uses Python identifier ConfusionMatrix
    __ConfusionMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ConfusionMatrix'), 'ConfusionMatrix', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_httpwww_dmg_orgPMML_4_0ConfusionMatrix', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2571, 2), )


    ConfusionMatrix = property(__ConfusionMatrix.value, __ConfusionMatrix.set, None, None)


    # Attribute targetField uses Python identifier targetField
    __targetField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetField'), 'targetField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_targetField', pyxb.binding.datatypes.string, required=True)
    __targetField._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2444, 6)
    __targetField._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2444, 6)

    targetField = property(__targetField.value, __targetField.set, None, None)


    # Attribute dataName uses Python identifier dataName
    __dataName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataName'), 'dataName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_dataName', pyxb.binding.datatypes.string)
    __dataName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2445, 6)
    __dataName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2445, 6)

    dataName = property(__dataName.value, __dataName.set, None, None)


    # Attribute dataUsage uses Python identifier dataUsage
    __dataUsage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataUsage'), 'dataUsage', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_dataUsage', STD_ANON_34, unicode_default=u'training')
    __dataUsage._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2446, 6)
    __dataUsage._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2446, 6)

    dataUsage = property(__dataUsage.value, __dataUsage.set, None, None)


    # Attribute meanError uses Python identifier meanError
    __meanError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meanError'), 'meanError', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_meanError', NUMBER)
    __meanError._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2455, 6)
    __meanError._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2455, 6)

    meanError = property(__meanError.value, __meanError.set, None, None)


    # Attribute meanAbsoluteError uses Python identifier meanAbsoluteError
    __meanAbsoluteError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meanAbsoluteError'), 'meanAbsoluteError', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_meanAbsoluteError', NUMBER)
    __meanAbsoluteError._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2456, 6)
    __meanAbsoluteError._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2456, 6)

    meanAbsoluteError = property(__meanAbsoluteError.value, __meanAbsoluteError.set, None, None)


    # Attribute meanSquaredError uses Python identifier meanSquaredError
    __meanSquaredError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meanSquaredError'), 'meanSquaredError', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_meanSquaredError', NUMBER)
    __meanSquaredError._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2457, 6)
    __meanSquaredError._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2457, 6)

    meanSquaredError = property(__meanSquaredError.value, __meanSquaredError.set, None, None)


    # Attribute r-squared uses Python identifier r_squared
    __r_squared = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r-squared'), 'r_squared', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_176_r_squared', NUMBER)
    __r_squared._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2458, 6)
    __r_squared._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2458, 6)

    r_squared = property(__r_squared.value, __r_squared.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LiftData.name() : __LiftData,
        __ROC.name() : __ROC,
        __ConfusionMatrix.name() : __ConfusionMatrix
    })
    _AttributeMap.update({
        __targetField.name() : __targetField,
        __dataName.name() : __dataName,
        __dataUsage.name() : __dataUsage,
        __meanError.name() : __meanError,
        __meanAbsoluteError.name() : __meanAbsoluteError,
        __meanSquaredError.name() : __meanSquaredError,
        __r_squared.name() : __r_squared
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_177 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2462, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute dataName uses Python identifier dataName
    __dataName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataName'), 'dataName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_177_dataName', pyxb.binding.datatypes.string)
    __dataName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2463, 6)
    __dataName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2463, 6)

    dataName = property(__dataName.value, __dataName.set, None, None)


    # Attribute SSE uses Python identifier SSE
    __SSE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SSE'), 'SSE', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_177_SSE', NUMBER)
    __SSE._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2464, 6)
    __SSE._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2464, 6)

    SSE = property(__SSE.value, __SSE.set, None, None)


    # Attribute SSB uses Python identifier SSB
    __SSB = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SSB'), 'SSB', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_177_SSB', NUMBER)
    __SSB._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2465, 6)
    __SSB._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2465, 6)

    SSB = property(__SSB.value, __SSB.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __dataName.name() : __dataName,
        __SSE.name() : __SSE,
        __SSB.name() : __SSB
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_178 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2469, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelLiftGraph uses Python identifier ModelLiftGraph
    __ModelLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelLiftGraph'), 'ModelLiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_httpwww_dmg_orgPMML_4_0ModelLiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2481, 2), )


    ModelLiftGraph = property(__ModelLiftGraph.value, __ModelLiftGraph.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}OptimumLiftGraph uses Python identifier OptimumLiftGraph
    __OptimumLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'OptimumLiftGraph'), 'OptimumLiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_httpwww_dmg_orgPMML_4_0OptimumLiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2489, 2), )


    OptimumLiftGraph = property(__OptimumLiftGraph.value, __OptimumLiftGraph.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RandomLiftGraph uses Python identifier RandomLiftGraph
    __RandomLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RandomLiftGraph'), 'RandomLiftGraph', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_httpwww_dmg_orgPMML_4_0RandomLiftGraph', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2497, 2), )


    RandomLiftGraph = property(__RandomLiftGraph.value, __RandomLiftGraph.set, None, None)


    # Attribute targetFieldValue uses Python identifier targetFieldValue
    __targetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetFieldValue'), 'targetFieldValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_targetFieldValue', pyxb.binding.datatypes.string)
    __targetFieldValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2476, 6)
    __targetFieldValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2476, 6)

    targetFieldValue = property(__targetFieldValue.value, __targetFieldValue.set, None, None)


    # Attribute targetFieldDisplayValue uses Python identifier targetFieldDisplayValue
    __targetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetFieldDisplayValue'), 'targetFieldDisplayValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_targetFieldDisplayValue', pyxb.binding.datatypes.string)
    __targetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2477, 6)
    __targetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2477, 6)

    targetFieldDisplayValue = property(__targetFieldDisplayValue.value, __targetFieldDisplayValue.set, None, None)


    # Attribute rankingQuality uses Python identifier rankingQuality
    __rankingQuality = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rankingQuality'), 'rankingQuality', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_178_rankingQuality', NUMBER)
    __rankingQuality._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2478, 6)
    __rankingQuality._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2478, 6)

    rankingQuality = property(__rankingQuality.value, __rankingQuality.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __ModelLiftGraph.name() : __ModelLiftGraph,
        __OptimumLiftGraph.name() : __OptimumLiftGraph,
        __RandomLiftGraph.name() : __RandomLiftGraph
    })
    _AttributeMap.update({
        __targetFieldValue.name() : __targetFieldValue,
        __targetFieldDisplayValue.name() : __targetFieldDisplayValue,
        __rankingQuality.name() : __rankingQuality
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_179 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2623, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelExplanation uses Python identifier ModelExplanation
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), 'ModelExplanation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0ModelExplanation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2), )


    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Segmentation uses Python identifier Segmentation
    __Segmentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Segmentation'), 'Segmentation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0Segmentation', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2645, 2), )


    Segmentation = property(__Segmentation.value, __Segmentation.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Regression uses Python identifier Regression
    __Regression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Regression'), 'Regression', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0Regression', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2711, 2), )


    Regression = property(__Regression.value, __Regression.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}DecisionTree uses Python identifier DecisionTree
    __DecisionTree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree'), 'DecisionTree', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_httpwww_dmg_orgPMML_4_0DecisionTree', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2728, 2), )


    DecisionTree = property(__DecisionTree.value, __DecisionTree.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2640, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2640, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2641, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2641, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_179_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2642, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2642, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __ModelVerification.name() : __ModelVerification,
        __ModelExplanation.name() : __ModelExplanation,
        __Segmentation.name() : __Segmentation,
        __Regression.name() : __Regression,
        __DecisionTree.name() : __DecisionTree
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_180 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2646, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_180_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_180_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Segment uses Python identifier Segment
    __Segment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Segment'), 'Segment', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_180_httpwww_dmg_orgPMML_4_0Segment', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2655, 2), )


    Segment = property(__Segment.value, __Segment.set, None, None)


    # Attribute multipleModelMethod uses Python identifier multipleModelMethod
    __multipleModelMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'multipleModelMethod'), 'multipleModelMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_180_multipleModelMethod', MULTIPLE_MODEL_METHOD, required=True)
    __multipleModelMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2652, 6)
    __multipleModelMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2652, 6)

    multipleModelMethod = property(__multipleModelMethod.value, __multipleModelMethod.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __Segment.name() : __Segment
    })
    _AttributeMap.update({
        __multipleModelMethod.name() : __multipleModelMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_181 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2656, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NeuralNetwork uses Python identifier NeuralNetwork
    __NeuralNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork'), 'NeuralNetwork', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0NeuralNetwork', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 898, 2), )


    NeuralNetwork = property(__NeuralNetwork.value, __NeuralNetwork.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ClusteringModel uses Python identifier ClusteringModel
    __ClusteringModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel'), 'ClusteringModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0ClusteringModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1026, 2), )


    ClusteringModel = property(__ClusteringModel.value, __ClusteringModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TreeModel uses Python identifier TreeModel
    __TreeModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TreeModel'), 'TreeModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0TreeModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1303, 2), )


    TreeModel = property(__TreeModel.value, __TreeModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimplePredicate uses Python identifier SimplePredicate
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), 'SimplePredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0SimplePredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2), )


    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}CompoundPredicate uses Python identifier CompoundPredicate
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), 'CompoundPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0CompoundPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2), )


    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SimpleSetPredicate uses Python identifier SimpleSetPredicate
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), 'SimpleSetPredicate', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0SimpleSetPredicate', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2), )


    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}True uses Python identifier True_
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'True'), 'True_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0True', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2), )


    True_ = property(__True.value, __True.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}False uses Python identifier False_
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'False'), 'False_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0False', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2), )


    False_ = property(__False.value, __False.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RegressionModel uses Python identifier RegressionModel
    __RegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel'), 'RegressionModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0RegressionModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1462, 2), )


    RegressionModel = property(__RegressionModel.value, __RegressionModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RuleSetModel uses Python identifier RuleSetModel
    __RuleSetModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel'), 'RuleSetModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0RuleSetModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1547, 2), )


    RuleSetModel = property(__RuleSetModel.value, __RuleSetModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SupportVectorMachineModel uses Python identifier SupportVectorMachineModel
    __SupportVectorMachineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel'), 'SupportVectorMachineModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0SupportVectorMachineModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1626, 2), )


    SupportVectorMachineModel = property(__SupportVectorMachineModel.value, __SupportVectorMachineModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}GeneralRegressionModel uses Python identifier GeneralRegressionModel
    __GeneralRegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel'), 'GeneralRegressionModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0GeneralRegressionModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1901, 2), )


    GeneralRegressionModel = property(__GeneralRegressionModel.value, __GeneralRegressionModel.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}NaiveBayesModel uses Python identifier NaiveBayesModel
    __NaiveBayesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel'), 'NaiveBayesModel', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_httpwww_dmg_orgPMML_4_0NaiveBayesModel', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2320, 2), )


    NaiveBayesModel = property(__NaiveBayesModel.value, __NaiveBayesModel.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2672, 6)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2672, 6)

    id = property(__id.value, __id.set, None, None)


    # Attribute weight uses Python identifier weight
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weight'), 'weight', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_181_weight', NUMBER)
    __weight._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2673, 6)
    __weight._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2673, 6)

    weight = property(__weight.value, __weight.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __NeuralNetwork.name() : __NeuralNetwork,
        __ClusteringModel.name() : __ClusteringModel,
        __TreeModel.name() : __TreeModel,
        __SimplePredicate.name() : __SimplePredicate,
        __CompoundPredicate.name() : __CompoundPredicate,
        __SimpleSetPredicate.name() : __SimpleSetPredicate,
        __True.name() : __True,
        __False.name() : __False,
        __RegressionModel.name() : __RegressionModel,
        __RuleSetModel.name() : __RuleSetModel,
        __SupportVectorMachineModel.name() : __SupportVectorMachineModel,
        __GeneralRegressionModel.name() : __GeneralRegressionModel,
        __NaiveBayesModel.name() : __NaiveBayesModel
    })
    _AttributeMap.update({
        __id.name() : __id,
        __weight.name() : __weight
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_182 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2699, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2703, 6)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2703, 6)

    name = property(__name.value, __name.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2704, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2704, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)


    # Attribute optype uses Python identifier optype
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optype'), 'optype', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2705, 6)
    __optype._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2705, 6)

    optype = property(__optype.value, __optype.set, None, None)


    # Attribute dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataType'), 'dataType', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2706, 6)
    __dataType._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2706, 6)

    dataType = property(__dataType.value, __dataType.set, None, None)


    # Attribute feature uses Python identifier feature
    __feature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'feature'), 'feature', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_feature', RESULT_FEATURE)
    __feature._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2707, 6)
    __feature._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2707, 6)

    feature = property(__feature.value, __feature.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_182_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2708, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2708, 6)

    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension
    })
    _AttributeMap.update({
        __name.name() : __name,
        __displayName.name() : __displayName,
        __optype.name() : __optype,
        __dataType.name() : __dataType,
        __feature.name() : __feature,
        __value.name() : __value
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_183 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2712, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}RegressionTable uses Python identifier RegressionTable
    __RegressionTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable'), 'RegressionTable', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0RegressionTable', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1506, 2), )


    RegressionTable = property(__RegressionTable.value, __RegressionTable.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ResultField uses Python identifier ResultField
    __ResultField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ResultField'), 'ResultField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_httpwww_dmg_orgPMML_4_0ResultField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2698, 2), )


    ResultField = property(__ResultField.value, __ResultField.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2722, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2722, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2723, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2723, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2724, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2724, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute normalizationMethod uses Python identifier normalizationMethod
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizationMethod'), 'normalizationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_183_normalizationMethod', REGRESSIONNORMALIZATIONMETHOD, unicode_default=u'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2725, 6)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2725, 6)

    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __RegressionTable.name() : __RegressionTable,
        __ResultField.name() : __ResultField
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __normalizationMethod.name() : __normalizationMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_184 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2729, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Targets uses Python identifier Targets
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Targets'), 'Targets', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0Targets', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2), )


    Targets = property(__Targets.value, __Targets.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Node'), 'Node', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0Node', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2), )


    Node = property(__Node.value, __Node.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ResultField uses Python identifier ResultField
    __ResultField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ResultField'), 'ResultField', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_httpwww_dmg_orgPMML_4_0ResultField', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2698, 2), )


    ResultField = property(__ResultField.value, __ResultField.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2739, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2739, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2740, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2740, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2741, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2741, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute missingValueStrategy uses Python identifier missingValueStrategy
    __missingValueStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValueStrategy'), 'missingValueStrategy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_missingValueStrategy', MISSING_VALUE_STRATEGY, unicode_default=u'none')
    __missingValueStrategy._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2742, 6)
    __missingValueStrategy._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2742, 6)

    missingValueStrategy = property(__missingValueStrategy.value, __missingValueStrategy.set, None, None)


    # Attribute missingValuePenalty uses Python identifier missingValuePenalty
    __missingValuePenalty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingValuePenalty'), 'missingValuePenalty', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_missingValuePenalty', PROB_NUMBER, unicode_default=u'1.0')
    __missingValuePenalty._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2743, 6)
    __missingValuePenalty._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2743, 6)

    missingValuePenalty = property(__missingValuePenalty.value, __missingValuePenalty.set, None, None)


    # Attribute noTrueChildStrategy uses Python identifier noTrueChildStrategy
    __noTrueChildStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noTrueChildStrategy'), 'noTrueChildStrategy', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_noTrueChildStrategy', NO_TRUE_CHILD_STRATEGY, unicode_default=u'returnNullPrediction')
    __noTrueChildStrategy._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2744, 6)
    __noTrueChildStrategy._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2744, 6)

    noTrueChildStrategy = property(__noTrueChildStrategy.value, __noTrueChildStrategy.set, None, None)


    # Attribute splitCharacteristic uses Python identifier splitCharacteristic
    __splitCharacteristic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'splitCharacteristic'), 'splitCharacteristic', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_184_splitCharacteristic', STD_ANON_35, unicode_default=u'multiSplit')
    __splitCharacteristic._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2745, 6)
    __splitCharacteristic._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2745, 6)

    splitCharacteristic = property(__splitCharacteristic.value, __splitCharacteristic.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __Targets.name() : __Targets,
        __Node.name() : __Node,
        __ResultField.name() : __ResultField
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __missingValueStrategy.name() : __missingValueStrategy,
        __missingValuePenalty.name() : __missingValuePenalty,
        __noTrueChildStrategy.name() : __noTrueChildStrategy,
        __splitCharacteristic.name() : __splitCharacteristic
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_185 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2756, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Extension uses Python identifier Extension
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Extension'), 'Extension', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0Extension', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2), )


    Extension = property(__Extension.value, __Extension.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}LocalTransformations uses Python identifier LocalTransformations
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), 'LocalTransformations', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0LocalTransformations', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2), )


    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}MiningSchema uses Python identifier MiningSchema
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), 'MiningSchema', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0MiningSchema', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2), )


    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelStats uses Python identifier ModelStats
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), 'ModelStats', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0ModelStats', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2), )


    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Output uses Python identifier Output
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Output'), 'Output', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0Output', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2), )


    Output = property(__Output.value, __Output.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ModelVerification uses Python identifier ModelVerification
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), 'ModelVerification', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0ModelVerification', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2), )


    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TimeSeries uses Python identifier TimeSeries
    __TimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeSeries'), 'TimeSeries', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0TimeSeries', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2785, 2), )


    TimeSeries = property(__TimeSeries.value, __TimeSeries.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ExponentialSmoothing uses Python identifier ExponentialSmoothing
    __ExponentialSmoothing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ExponentialSmoothing'), 'ExponentialSmoothing', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0ExponentialSmoothing', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2892, 2), )


    ExponentialSmoothing = property(__ExponentialSmoothing.value, __ExponentialSmoothing.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SpectralAnalysis uses Python identifier SpectralAnalysis
    __SpectralAnalysis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SpectralAnalysis'), 'SpectralAnalysis', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0SpectralAnalysis', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2957, 2), )


    SpectralAnalysis = property(__SpectralAnalysis.value, __SpectralAnalysis.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}ARIMA uses Python identifier ARIMA
    __ARIMA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ARIMA'), 'ARIMA', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0ARIMA', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2959, 2), )


    ARIMA = property(__ARIMA.value, __ARIMA.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}SeasonalTrendDecomposition uses Python identifier SeasonalTrendDecomposition
    __SeasonalTrendDecomposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'SeasonalTrendDecomposition'), 'SeasonalTrendDecomposition', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_httpwww_dmg_orgPMML_4_0SeasonalTrendDecomposition', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2961, 2), )


    SeasonalTrendDecomposition = property(__SeasonalTrendDecomposition.value, __SeasonalTrendDecomposition.set, None, None)


    # Attribute modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelName'), 'modelName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2771, 6)
    __modelName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2771, 6)

    modelName = property(__modelName.value, __modelName.set, None, None)


    # Attribute functionName uses Python identifier functionName
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionName'), 'functionName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2772, 6)
    __functionName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2772, 6)

    functionName = property(__functionName.value, __functionName.set, None, None)


    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2773, 6)
    __algorithmName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2773, 6)

    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)


    # Attribute bestFit uses Python identifier bestFit
    __bestFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bestFit'), 'bestFit', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_185_bestFit', TIMESERIES_ALGORITHM, required=True)
    __bestFit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2774, 6)
    __bestFit._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2774, 6)

    bestFit = property(__bestFit.value, __bestFit.set, None, None)

    _ElementMap.update({
        __Extension.name() : __Extension,
        __LocalTransformations.name() : __LocalTransformations,
        __MiningSchema.name() : __MiningSchema,
        __ModelStats.name() : __ModelStats,
        __Output.name() : __Output,
        __ModelVerification.name() : __ModelVerification,
        __TimeSeries.name() : __TimeSeries,
        __ExponentialSmoothing.name() : __ExponentialSmoothing,
        __SpectralAnalysis.name() : __SpectralAnalysis,
        __ARIMA.name() : __ARIMA,
        __SeasonalTrendDecomposition.name() : __SeasonalTrendDecomposition
    })
    _AttributeMap.update({
        __modelName.name() : __modelName,
        __functionName.name() : __functionName,
        __algorithmName.name() : __algorithmName,
        __bestFit.name() : __bestFit
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_186 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2786, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}TimeValue uses Python identifier TimeValue
    __TimeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeValue'), 'TimeValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_httpwww_dmg_orgPMML_4_0TimeValue', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2806, 2), )


    TimeValue = property(__TimeValue.value, __TimeValue.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TimeAnchor uses Python identifier TimeAnchor
    __TimeAnchor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeAnchor'), 'TimeAnchor', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_httpwww_dmg_orgPMML_4_0TimeAnchor', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2817, 2), )


    TimeAnchor = property(__TimeAnchor.value, __TimeAnchor.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TimeException uses Python identifier TimeException
    __TimeException = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeException'), 'TimeException', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_httpwww_dmg_orgPMML_4_0TimeException', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2869, 2), )


    TimeException = property(__TimeException.value, __TimeException.set, None, None)


    # Attribute usage uses Python identifier usage
    __usage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usage'), 'usage', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_usage', TIMESERIES_USAGE, unicode_default=u'original')
    __usage._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2792, 6)
    __usage._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2792, 6)

    usage = property(__usage.value, __usage.set, None, None)


    # Attribute startTime uses Python identifier startTime
    __startTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startTime'), 'startTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_startTime', REAL_NUMBER)
    __startTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2793, 6)
    __startTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2793, 6)

    startTime = property(__startTime.value, __startTime.set, None, None)


    # Attribute endTime uses Python identifier endTime
    __endTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endTime'), 'endTime', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_endTime', REAL_NUMBER)
    __endTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2794, 6)
    __endTime._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2794, 6)

    endTime = property(__endTime.value, __endTime.set, None, None)


    # Attribute interpolationMethod uses Python identifier interpolationMethod
    __interpolationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolationMethod'), 'interpolationMethod', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_186_interpolationMethod', INTERPOLATION_METHOD, unicode_default=u'none')
    __interpolationMethod._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2795, 6)
    __interpolationMethod._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2795, 6)

    interpolationMethod = property(__interpolationMethod.value, __interpolationMethod.set, None, None)

    _ElementMap.update({
        __TimeValue.name() : __TimeValue,
        __TimeAnchor.name() : __TimeAnchor,
        __TimeException.name() : __TimeException
    })
    _AttributeMap.update({
        __usage.name() : __usage,
        __startTime.name() : __startTime,
        __endTime.name() : __endTime,
        __interpolationMethod.name() : __interpolationMethod
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_187 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2807, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Timestamp uses Python identifier Timestamp
    __Timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Timestamp'), 'Timestamp', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_187_httpwww_dmg_orgPMML_4_0Timestamp', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 217, 2), )


    Timestamp = property(__Timestamp.value, __Timestamp.set, None, None)


    # Attribute index uses Python identifier index
    __index = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'index'), 'index', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_187_index', INT_NUMBER)
    __index._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2811, 6)
    __index._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2811, 6)

    index = property(__index.value, __index.set, None, None)


    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_187_time', NUMBER)
    __time._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2812, 6)
    __time._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2812, 6)

    time = property(__time.value, __time.set, None, None)


    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_187_value', REAL_NUMBER, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2813, 6)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2813, 6)

    value_ = property(__value.value, __value.set, None, None)


    # Attribute standardError uses Python identifier standardError
    __standardError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'standardError'), 'standardError', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_187_standardError', REAL_NUMBER)
    __standardError._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2814, 6)
    __standardError._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2814, 6)

    standardError = property(__standardError.value, __standardError.set, None, None)

    _ElementMap.update({
        __Timestamp.name() : __Timestamp
    })
    _AttributeMap.update({
        __index.name() : __index,
        __time.name() : __time,
        __value.name() : __value,
        __standardError.name() : __standardError
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_188 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2818, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}TimeCycle uses Python identifier TimeCycle
    __TimeCycle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeCycle'), 'TimeCycle', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_httpwww_dmg_orgPMML_4_0TimeCycle', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2829, 2), )


    TimeCycle = property(__TimeCycle.value, __TimeCycle.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}TimeException uses Python identifier TimeException
    __TimeException = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeException'), 'TimeException', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_httpwww_dmg_orgPMML_4_0TimeException', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2869, 2), )


    TimeException = property(__TimeException.value, __TimeException.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_type', TIME_ANCHOR)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2823, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2823, 6)

    type = property(__type.value, __type.set, None, None)


    # Attribute offset uses Python identifier offset
    __offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'offset'), 'offset', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_offset', INT_NUMBER)
    __offset._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2824, 6)
    __offset._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2824, 6)

    offset = property(__offset.value, __offset.set, None, None)


    # Attribute stepsize uses Python identifier stepsize
    __stepsize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stepsize'), 'stepsize', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_stepsize', INT_NUMBER)
    __stepsize._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2825, 6)
    __stepsize._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2825, 6)

    stepsize = property(__stepsize.value, __stepsize.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_188_displayName', pyxb.binding.datatypes.anySimpleType)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2826, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2826, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)

    _ElementMap.update({
        __TimeCycle.name() : __TimeCycle,
        __TimeException.name() : __TimeException
    })
    _AttributeMap.update({
        __type.name() : __type,
        __offset.name() : __offset,
        __stepsize.name() : __stepsize,
        __displayName.name() : __displayName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_189 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2830, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_189_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute length uses Python identifier length
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'length'), 'length', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_189_length', INT_NUMBER)
    __length._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2834, 6)
    __length._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2834, 6)

    length = property(__length.value, __length.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_189_type', VALID_TIME_SPEC)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2835, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2835, 6)

    type = property(__type.value, __type.set, None, None)


    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_189_displayName', pyxb.binding.datatypes.anySimpleType)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2836, 6)
    __displayName._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2836, 6)

    displayName = property(__displayName.value, __displayName.set, None, None)

    _ElementMap.update({
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __length.name() : __length,
        __type.name() : __type,
        __displayName.name() : __displayName
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_190 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2870, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_190_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_190_type', TIME_EXCEPTION_TYPE)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2874, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2874, 6)

    type = property(__type.value, __type.set, None, None)


    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_190_count', INT_NUMBER)
    __count._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2875, 6)
    __count._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2875, 6)

    count = property(__count.value, __count.set, None, None)

    _ElementMap.update({
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __type.name() : __type,
        __count.name() : __count
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_191 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2893, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}TimeValue uses Python identifier TimeValue
    __TimeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'TimeValue'), 'TimeValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_httpwww_dmg_orgPMML_4_0TimeValue', True, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2806, 2), )


    TimeValue = property(__TimeValue.value, __TimeValue.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Seasonality_ExpoSmooth uses Python identifier Seasonality_ExpoSmooth
    __Seasonality_ExpoSmooth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Seasonality_ExpoSmooth'), 'Seasonality_ExpoSmooth', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_httpwww_dmg_orgPMML_4_0Seasonality_ExpoSmooth', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2912, 2), )


    Seasonality_ExpoSmooth = property(__Seasonality_ExpoSmooth.value, __Seasonality_ExpoSmooth.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Level uses Python identifier Level
    __Level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Level'), 'Level', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_httpwww_dmg_orgPMML_4_0Level', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2931, 2), )


    Level = property(__Level.value, __Level.set, None, None)


    # Element {http://www.dmg.org/PMML-4_0}Trend uses Python identifier Trend
    __Trend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Trend'), 'Trend', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_httpwww_dmg_orgPMML_4_0Trend', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2939, 2), )


    Trend = property(__Trend.value, __Trend.set, None, None)


    # Attribute RMSE uses Python identifier RMSE
    __RMSE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'RMSE'), 'RMSE', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_RMSE', REAL_NUMBER)
    __RMSE._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2900, 6)
    __RMSE._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2900, 6)

    RMSE = property(__RMSE.value, __RMSE.set, None, None)


    # Attribute transformation uses Python identifier transformation
    __transformation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transformation'), 'transformation', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_191_transformation', STD_ANON_36, unicode_default=u'none')
    __transformation._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2901, 6)
    __transformation._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2901, 6)

    transformation = property(__transformation.value, __transformation.set, None, None)

    _ElementMap.update({
        __TimeValue.name() : __TimeValue,
        __Seasonality_ExpoSmooth.name() : __Seasonality_ExpoSmooth,
        __Level.name() : __Level,
        __Trend.name() : __Trend
    })
    _AttributeMap.update({
        __RMSE.name() : __RMSE,
        __transformation.name() : __transformation
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_192 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2913, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.dmg.org/PMML-4_0}Array uses Python identifier Array
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'Array'), 'Array', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_httpwww_dmg_orgPMML_4_0Array', False, pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1), )


    Array = property(__Array.value, __Array.set, None, None)


    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_type', STD_ANON_37, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2917, 6)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2917, 6)

    type = property(__type.value, __type.set, None, None)


    # Attribute period uses Python identifier period
    __period = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'period'), 'period', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_period', INT_NUMBER, required=True)
    __period._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2925, 6)
    __period._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2925, 6)

    period = property(__period.value, __period.set, None, None)


    # Attribute unit uses Python identifier unit
    __unit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unit'), 'unit', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_unit', pyxb.binding.datatypes.string)
    __unit._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2926, 6)
    __unit._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2926, 6)

    unit = property(__unit.value, __unit.set, None, None)


    # Attribute phase uses Python identifier phase
    __phase = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phase'), 'phase', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_phase', INT_NUMBER)
    __phase._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2927, 6)
    __phase._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2927, 6)

    phase = property(__phase.value, __phase.set, None, None)


    # Attribute delta uses Python identifier delta
    __delta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delta'), 'delta', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_192_delta', REAL_NUMBER)
    __delta._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2928, 6)
    __delta._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2928, 6)

    delta = property(__delta.value, __delta.set, None, None)

    _ElementMap.update({
        __Array.name() : __Array
    })
    _AttributeMap.update({
        __type.name() : __type,
        __period.name() : __period,
        __unit.name() : __unit,
        __phase.name() : __phase,
        __delta.name() : __delta
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_193 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2932, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alpha'), 'alpha', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_193_alpha', REAL_NUMBER)
    __alpha._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2933, 8)
    __alpha._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2933, 8)

    alpha = property(__alpha.value, __alpha.set, None, None)


    # Attribute smoothedValue uses Python identifier smoothedValue
    __smoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smoothedValue'), 'smoothedValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_193_smoothedValue', REAL_NUMBER)
    __smoothedValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2934, 8)
    __smoothedValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2934, 8)

    smoothedValue = property(__smoothedValue.value, __smoothedValue.set, None, None)


    # Attribute quadraticSmoothedValue uses Python identifier quadraticSmoothedValue
    __quadraticSmoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'quadraticSmoothedValue'), 'quadraticSmoothedValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_193_quadraticSmoothedValue', REAL_NUMBER)
    __quadraticSmoothedValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2935, 8)
    __quadraticSmoothedValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2935, 8)

    quadraticSmoothedValue = property(__quadraticSmoothedValue.value, __quadraticSmoothedValue.set, None, None)


    # Attribute cubicSmoothedValue uses Python identifier cubicSmoothedValue
    __cubicSmoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cubicSmoothedValue'), 'cubicSmoothedValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_193_cubicSmoothedValue', REAL_NUMBER)
    __cubicSmoothedValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2936, 8)
    __cubicSmoothedValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2936, 8)

    cubicSmoothedValue = property(__cubicSmoothedValue.value, __cubicSmoothedValue.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __alpha.name() : __alpha,
        __smoothedValue.name() : __smoothedValue,
        __quadraticSmoothedValue.name() : __quadraticSmoothedValue,
        __cubicSmoothedValue.name() : __cubicSmoothedValue
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_194 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2940, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute trend uses Python identifier trend
    __trend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trend'), 'trend', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_194_trend', STD_ANON_38, unicode_default=u'additive')
    __trend._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2941, 6)
    __trend._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2941, 6)

    trend = property(__trend.value, __trend.set, None, None)


    # Attribute gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gamma'), 'gamma', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_194_gamma', REAL_NUMBER)
    __gamma._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2952, 6)
    __gamma._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2952, 6)

    gamma = property(__gamma.value, __gamma.set, None, None)


    # Attribute phi uses Python identifier phi
    __phi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phi'), 'phi', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_194_phi', REAL_NUMBER, unicode_default=u'1')
    __phi._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2953, 6)
    __phi._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2953, 6)

    phi = property(__phi.value, __phi.set, None, None)


    # Attribute smoothedValue uses Python identifier smoothedValue
    __smoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smoothedValue'), 'smoothedValue', '__httpwww_dmg_orgPMML_4_0_CTD_ANON_194_smoothedValue', REAL_NUMBER, required=True)
    __smoothedValue._DeclarationLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2954, 6)
    __smoothedValue._UseLocation = pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2954, 6)

    smoothedValue = property(__smoothedValue.value, __smoothedValue.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __trend.name() : __trend,
        __gamma.name() : __gamma,
        __phi.name() : __phi,
        __smoothedValue.name() : __smoothedValue
    })



SpectralAnalysis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SpectralAnalysis'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2957, 2))
Namespace.addCategoryObject('elementBinding', SpectralAnalysis.name().localName(), SpectralAnalysis)

ARIMA = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ARIMA'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2959, 2))
Namespace.addCategoryObject('elementBinding', ARIMA.name().localName(), ARIMA)

SeasonalTrendDecomposition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SeasonalTrendDecomposition'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2961, 2))
Namespace.addCategoryObject('elementBinding', SeasonalTrendDecomposition.name().localName(), SeasonalTrendDecomposition)

PMML = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PMML'), CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 6, 2))
Namespace.addCategoryObject('elementBinding', PMML.name().localName(), PMML)

MiningBuildTask = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningBuildTask'), CTD_ANON_, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 35, 2))
Namespace.addCategoryObject('elementBinding', MiningBuildTask.name().localName(), MiningBuildTask)

Extension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2))
Namespace.addCategoryObject('elementBinding', Extension.name().localName(), Extension)

Indices = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Indices'), STD_ANON_, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 143, 2))
Namespace.addCategoryObject('elementBinding', Indices.name().localName(), Indices)

INT_Entries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'INT-Entries'), STD_ANON_2, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 148, 2))
Namespace.addCategoryObject('elementBinding', INT_Entries.name().localName(), INT_Entries)

REAL_Entries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'REAL-Entries'), STD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 153, 2))
Namespace.addCategoryObject('elementBinding', REAL_Entries.name().localName(), REAL_Entries)

Header = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Header'), CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 189, 2))
Namespace.addCategoryObject('elementBinding', Header.name().localName(), Header)

Application = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Application'), CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 201, 2))
Namespace.addCategoryObject('elementBinding', Application.name().localName(), Application)

Annotation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Annotation'), CTD_ANON_5, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 210, 2))
Namespace.addCategoryObject('elementBinding', Annotation.name().localName(), Annotation)

Timestamp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Timestamp'), CTD_ANON_6, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 217, 2))
Namespace.addCategoryObject('elementBinding', Timestamp.name().localName(), Timestamp)

DataDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DataDictionary'), CTD_ANON_7, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 224, 2))
Namespace.addCategoryObject('elementBinding', DataDictionary.name().localName(), DataDictionary)

Apply = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Apply'), CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2))
Namespace.addCategoryObject('elementBinding', Apply.name().localName(), Apply)

Taxonomy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy'), CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 351, 2))
Namespace.addCategoryObject('elementBinding', Taxonomy.name().localName(), Taxonomy)

TableLocator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TableLocator'), CTD_ANON_10, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 382, 2))
Namespace.addCategoryObject('elementBinding', TableLocator.name().localName(), TableLocator)

InlineTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), CTD_ANON_11, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2))
Namespace.addCategoryObject('elementBinding', InlineTable.name().localName(), InlineTable)

row = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 397, 2))
Namespace.addCategoryObject('elementBinding', row.name().localName(), row)

TransformationDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TransformationDictionary'), CTD_ANON_13, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 420, 2))
Namespace.addCategoryObject('elementBinding', TransformationDictionary.name().localName(), TransformationDictionary)

LocalTransformations = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2))
Namespace.addCategoryObject('elementBinding', LocalTransformations.name().localName(), LocalTransformations)

DiscretizeBin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DiscretizeBin'), CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 516, 2))
Namespace.addCategoryObject('elementBinding', DiscretizeBin.name().localName(), DiscretizeBin)

MiningSchema = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2))
Namespace.addCategoryObject('elementBinding', MiningSchema.name().localName(), MiningSchema)

ModelStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2))
Namespace.addCategoryObject('elementBinding', ModelStats.name().localName(), ModelStats)

DiscrStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DiscrStats'), CTD_ANON_18, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 694, 2))
Namespace.addCategoryObject('elementBinding', DiscrStats.name().localName(), DiscrStats)

Output = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2))
Namespace.addCategoryObject('elementBinding', Output.name().localName(), Output)

Targets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2))
Namespace.addCategoryObject('elementBinding', Targets.name().localName(), Targets)

NeuralInputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralInputs'), CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 925, 2))
Namespace.addCategoryObject('elementBinding', NeuralInputs.name().localName(), NeuralInputs)

NeuralOutputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutputs'), CTD_ANON_22, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 948, 2))
Namespace.addCategoryObject('elementBinding', NeuralOutputs.name().localName(), NeuralOutputs)

MissingValueWeights = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MissingValueWeights'), CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1056, 2))
Namespace.addCategoryObject('elementBinding', MissingValueWeights.name().localName(), MissingValueWeights)

Cluster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Cluster'), CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1064, 2))
Namespace.addCategoryObject('elementBinding', Cluster.name().localName(), Cluster)

KohonenMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'KohonenMap'), CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1077, 2))
Namespace.addCategoryObject('elementBinding', KohonenMap.name().localName(), KohonenMap)

Covariances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Covariances'), CTD_ANON_26, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1087, 2))
Namespace.addCategoryObject('elementBinding', Covariances.name().localName(), Covariances)

Comparisons = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Comparisons'), CTD_ANON_27, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1115, 2))
Namespace.addCategoryObject('elementBinding', Comparisons.name().localName(), Comparisons)

euclidean = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'euclidean'), CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1161, 2))
Namespace.addCategoryObject('elementBinding', euclidean.name().localName(), euclidean)

squaredEuclidean = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'squaredEuclidean'), CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1168, 2))
Namespace.addCategoryObject('elementBinding', squaredEuclidean.name().localName(), squaredEuclidean)

cityBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cityBlock'), CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1175, 2))
Namespace.addCategoryObject('elementBinding', cityBlock.name().localName(), cityBlock)

chebychev = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chebychev'), CTD_ANON_31, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1182, 2))
Namespace.addCategoryObject('elementBinding', chebychev.name().localName(), chebychev)

simpleMatching = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simpleMatching'), CTD_ANON_32, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1197, 2))
Namespace.addCategoryObject('elementBinding', simpleMatching.name().localName(), simpleMatching)

jaccard = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'jaccard'), CTD_ANON_33, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1204, 2))
Namespace.addCategoryObject('elementBinding', jaccard.name().localName(), jaccard)

tanimoto = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tanimoto'), CTD_ANON_34, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1211, 2))
Namespace.addCategoryObject('elementBinding', tanimoto.name().localName(), tanimoto)

ItemRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ItemRef'), CTD_ANON_35, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1282, 2))
Namespace.addCategoryObject('elementBinding', ItemRef.name().localName(), ItemRef)

True_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2))
Namespace.addCategoryObject('elementBinding', True_.name().localName(), True_)

False_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2))
Namespace.addCategoryObject('elementBinding', False_.name().localName(), False_)

CompoundRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule'), CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1617, 2))
Namespace.addCategoryObject('elementBinding', CompoundRule.name().localName(), CompoundRule)

LinearKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LinearKernelType'), CTD_ANON_39, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1669, 2))
Namespace.addCategoryObject('elementBinding', LinearKernelType.name().localName(), LinearKernelType)

TextDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextDictionary'), CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1814, 2))
Namespace.addCategoryObject('elementBinding', TextDictionary.name().localName(), TextDictionary)

TextCorpus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextCorpus'), CTD_ANON_41, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1823, 2))
Namespace.addCategoryObject('elementBinding', TextCorpus.name().localName(), TextCorpus)

DocumentTermMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DocumentTermMatrix'), CTD_ANON_42, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1842, 2))
Namespace.addCategoryObject('elementBinding', DocumentTermMatrix.name().localName(), DocumentTermMatrix)

ParameterList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParameterList'), CTD_ANON_43, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1968, 2))
Namespace.addCategoryObject('elementBinding', ParameterList.name().localName(), ParameterList)

FactorList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FactorList'), CTD_ANON_44, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1986, 2))
Namespace.addCategoryObject('elementBinding', FactorList.name().localName(), FactorList)

CovariateList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CovariateList'), CTD_ANON_45, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1994, 2))
Namespace.addCategoryObject('elementBinding', CovariateList.name().localName(), CovariateList)

PPMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PPMatrix'), CTD_ANON_46, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2012, 2))
Namespace.addCategoryObject('elementBinding', PPMatrix.name().localName(), PPMatrix)

ParamMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParamMatrix'), CTD_ANON_47, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2060, 2))
Namespace.addCategoryObject('elementBinding', ParamMatrix.name().localName(), ParamMatrix)

EventValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EventValues'), CTD_ANON_48, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2111, 2))
Namespace.addCategoryObject('elementBinding', EventValues.name().localName(), EventValues)

AntecedentSequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AntecedentSequence'), CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2306, 2))
Namespace.addCategoryObject('elementBinding', AntecedentSequence.name().localName(), AntecedentSequence)

ConsequentSequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConsequentSequence'), CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2313, 2))
Namespace.addCategoryObject('elementBinding', ConsequentSequence.name().localName(), ConsequentSequence)

BayesInputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesInputs'), CTD_ANON_51, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2341, 2))
Namespace.addCategoryObject('elementBinding', BayesInputs.name().localName(), BayesInputs)

BayesInput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesInput'), CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2349, 2))
Namespace.addCategoryObject('elementBinding', BayesInput.name().localName(), BayesInput)

BayesOutput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesOutput'), CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2359, 2))
Namespace.addCategoryObject('elementBinding', BayesOutput.name().localName(), BayesOutput)

PairCounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PairCounts'), CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2368, 2))
Namespace.addCategoryObject('elementBinding', PairCounts.name().localName(), PairCounts)

TargetValueCounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts'), CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2377, 2))
Namespace.addCategoryObject('elementBinding', TargetValueCounts.name().localName(), TargetValueCounts)

VerificationFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VerificationFields'), CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2405, 2))
Namespace.addCategoryObject('elementBinding', VerificationFields.name().localName(), VerificationFields)

VerificationField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VerificationField'), CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2413, 2))
Namespace.addCategoryObject('elementBinding', VerificationField.name().localName(), VerificationField)

ModelExplanation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2))
Namespace.addCategoryObject('elementBinding', ModelExplanation.name().localName(), ModelExplanation)

ModelLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelLiftGraph'), CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2481, 2))
Namespace.addCategoryObject('elementBinding', ModelLiftGraph.name().localName(), ModelLiftGraph)

OptimumLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OptimumLiftGraph'), CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2489, 2))
Namespace.addCategoryObject('elementBinding', OptimumLiftGraph.name().localName(), OptimumLiftGraph)

RandomLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RandomLiftGraph'), CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2497, 2))
Namespace.addCategoryObject('elementBinding', RandomLiftGraph.name().localName(), RandomLiftGraph)

LiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2))
Namespace.addCategoryObject('elementBinding', LiftGraph.name().localName(), LiftGraph)

XCoordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates'), CTD_ANON_63, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2516, 2))
Namespace.addCategoryObject('elementBinding', XCoordinates.name().localName(), XCoordinates)

YCoordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates'), CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2524, 2))
Namespace.addCategoryObject('elementBinding', YCoordinates.name().localName(), YCoordinates)

BoundaryValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues'), CTD_ANON_65, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2532, 2))
Namespace.addCategoryObject('elementBinding', BoundaryValues.name().localName(), BoundaryValues)

BoundaryValueMeans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValueMeans'), CTD_ANON_66, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2540, 2))
Namespace.addCategoryObject('elementBinding', BoundaryValueMeans.name().localName(), BoundaryValueMeans)

ROC = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ROC'), CTD_ANON_67, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2548, 2))
Namespace.addCategoryObject('elementBinding', ROC.name().localName(), ROC)

ROCGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ROCGraph'), CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2561, 2))
Namespace.addCategoryObject('elementBinding', ROCGraph.name().localName(), ROCGraph)

ConfusionMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConfusionMatrix'), CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2571, 2))
Namespace.addCategoryObject('elementBinding', ConfusionMatrix.name().localName(), ConfusionMatrix)

ClassLabels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClassLabels'), CTD_ANON_70, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2580, 2))
Namespace.addCategoryObject('elementBinding', ClassLabels.name().localName(), ClassLabels)

Correlations = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Correlations'), CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2588, 2))
Namespace.addCategoryObject('elementBinding', Correlations.name().localName(), Correlations)

CorrelationFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationFields'), CTD_ANON_72, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2598, 2))
Namespace.addCategoryObject('elementBinding', CorrelationFields.name().localName(), CorrelationFields)

CorrelationValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationValues'), CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2606, 2))
Namespace.addCategoryObject('elementBinding', CorrelationValues.name().localName(), CorrelationValues)

CorrelationMethods = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationMethods'), CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2614, 2))
Namespace.addCategoryObject('elementBinding', CorrelationMethods.name().localName(), CorrelationMethods)

Array = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1))
Namespace.addCategoryObject('elementBinding', Array.name().localName(), Array)

INT_SparseArray = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'INT-SparseArray'), CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 123, 2))
Namespace.addCategoryObject('elementBinding', INT_SparseArray.name().localName(), INT_SparseArray)

REAL_SparseArray = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'REAL-SparseArray'), CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 133, 2))
Namespace.addCategoryObject('elementBinding', REAL_SparseArray.name().localName(), REAL_SparseArray)

Matrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2))
Namespace.addCategoryObject('elementBinding', Matrix.name().localName(), Matrix)

MatCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MatCell'), CTD_ANON_78, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 179, 2))
Namespace.addCategoryObject('elementBinding', MatCell.name().localName(), MatCell)

DataField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DataField'), CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 234, 2))
Namespace.addCategoryObject('elementBinding', DataField.name().localName(), DataField)

Value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Value'), CTD_ANON_80, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2))
Namespace.addCategoryObject('elementBinding', Value.name().localName(), Value)

Interval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Interval'), CTD_ANON_81, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2))
Namespace.addCategoryObject('elementBinding', Interval.name().localName(), Interval)

DefineFunction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DefineFunction'), CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 323, 2))
Namespace.addCategoryObject('elementBinding', DefineFunction.name().localName(), DefineFunction)

ParameterField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParameterField'), CTD_ANON_83, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 335, 2))
Namespace.addCategoryObject('elementBinding', ParameterField.name().localName(), ParameterField)

ChildParent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ChildParent'), CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 360, 2))
Namespace.addCategoryObject('elementBinding', ChildParent.name().localName(), ChildParent)

DerivedField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2))
Namespace.addCategoryObject('elementBinding', DerivedField.name().localName(), DerivedField)

Constant = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constant'), CTD_ANON_86, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2))
Namespace.addCategoryObject('elementBinding', Constant.name().localName(), Constant)

FieldRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2))
Namespace.addCategoryObject('elementBinding', FieldRef.name().localName(), FieldRef)

NormContinuous = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), CTD_ANON_88, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2))
Namespace.addCategoryObject('elementBinding', NormContinuous.name().localName(), NormContinuous)

LinearNorm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LinearNorm'), CTD_ANON_89, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 478, 2))
Namespace.addCategoryObject('elementBinding', LinearNorm.name().localName(), LinearNorm)

NormDiscrete = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), CTD_ANON_90, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2))
Namespace.addCategoryObject('elementBinding', NormDiscrete.name().localName(), NormDiscrete)

Discretize = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), CTD_ANON_91, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2))
Namespace.addCategoryObject('elementBinding', Discretize.name().localName(), Discretize)

MapValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2))
Namespace.addCategoryObject('elementBinding', MapValues.name().localName(), MapValues)

FieldColumnPair = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldColumnPair'), CTD_ANON_93, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 541, 2))
Namespace.addCategoryObject('elementBinding', FieldColumnPair.name().localName(), FieldColumnPair)

Aggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), CTD_ANON_94, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2))
Namespace.addCategoryObject('elementBinding', Aggregate.name().localName(), Aggregate)

MiningField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningField'), CTD_ANON_95, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 580, 2))
Namespace.addCategoryObject('elementBinding', MiningField.name().localName(), MiningField)

UnivariateStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnivariateStats'), CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 639, 2))
Namespace.addCategoryObject('elementBinding', UnivariateStats.name().localName(), UnivariateStats)

Counts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Counts'), CTD_ANON_97, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 660, 2))
Namespace.addCategoryObject('elementBinding', Counts.name().localName(), Counts)

NumericInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo'), CTD_ANON_98, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 671, 2))
Namespace.addCategoryObject('elementBinding', NumericInfo.name().localName(), NumericInfo)

Quantile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Quantile'), CTD_ANON_99, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 685, 2))
Namespace.addCategoryObject('elementBinding', Quantile.name().localName(), Quantile)

ContStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ContStats'), CTD_ANON_100, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 703, 2))
Namespace.addCategoryObject('elementBinding', ContStats.name().localName(), ContStats)

Anova = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Anova'), CTD_ANON_101, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 719, 2))
Namespace.addCategoryObject('elementBinding', Anova.name().localName(), Anova)

AnovaRow = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AnovaRow'), CTD_ANON_102, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 728, 2))
Namespace.addCategoryObject('elementBinding', AnovaRow.name().localName(), AnovaRow)

Partition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Partition'), CTD_ANON_103, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2))
Namespace.addCategoryObject('elementBinding', Partition.name().localName(), Partition)

PartitionFieldStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PartitionFieldStats'), CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 759, 2))
Namespace.addCategoryObject('elementBinding', PartitionFieldStats.name().localName(), PartitionFieldStats)

OutputField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OutputField'), CTD_ANON_105, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 786, 2))
Namespace.addCategoryObject('elementBinding', OutputField.name().localName(), OutputField)

Target = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Target'), CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 863, 2))
Namespace.addCategoryObject('elementBinding', Target.name().localName(), Target)

TargetValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValue'), CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 886, 2))
Namespace.addCategoryObject('elementBinding', TargetValue.name().localName(), TargetValue)

NeuralNetwork = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork'), CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 898, 2))
Namespace.addCategoryObject('elementBinding', NeuralNetwork.name().localName(), NeuralNetwork)

NeuralLayer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralLayer'), CTD_ANON_109, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 934, 2))
Namespace.addCategoryObject('elementBinding', NeuralLayer.name().localName(), NeuralLayer)

NeuralInput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralInput'), CTD_ANON_110, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 987, 2))
Namespace.addCategoryObject('elementBinding', NeuralInput.name().localName(), NeuralInput)

Neuron = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Neuron'), CTD_ANON_111, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 996, 2))
Namespace.addCategoryObject('elementBinding', Neuron.name().localName(), Neuron)

Con = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Con'), CTD_ANON_112, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1008, 2))
Namespace.addCategoryObject('elementBinding', Con.name().localName(), Con)

NeuralOutput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutput'), CTD_ANON_113, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1017, 2))
Namespace.addCategoryObject('elementBinding', NeuralOutput.name().localName(), NeuralOutput)

ClusteringModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel'), CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1026, 2))
Namespace.addCategoryObject('elementBinding', ClusteringModel.name().localName(), ClusteringModel)

ClusteringField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringField'), CTD_ANON_115, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1095, 2))
Namespace.addCategoryObject('elementBinding', ClusteringField.name().localName(), ClusteringField)

ComparisonMeasure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ComparisonMeasure'), CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1132, 2))
Namespace.addCategoryObject('elementBinding', ComparisonMeasure.name().localName(), ComparisonMeasure)

minkowski = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'minkowski'), CTD_ANON_117, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1189, 2))
Namespace.addCategoryObject('elementBinding', minkowski.name().localName(), minkowski)

binarySimilarity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'binarySimilarity'), CTD_ANON_118, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1218, 2))
Namespace.addCategoryObject('elementBinding', binarySimilarity.name().localName(), binarySimilarity)

AssociationModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AssociationModel'), CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1233, 2))
Namespace.addCategoryObject('elementBinding', AssociationModel.name().localName(), AssociationModel)

Item = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Item'), CTD_ANON_120, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1260, 2))
Namespace.addCategoryObject('elementBinding', Item.name().localName(), Item)

Itemset = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Itemset'), CTD_ANON_121, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1271, 2))
Namespace.addCategoryObject('elementBinding', Itemset.name().localName(), Itemset)

AssociationRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AssociationRule'), CTD_ANON_122, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1290, 2))
Namespace.addCategoryObject('elementBinding', AssociationRule.name().localName(), AssociationRule)

TreeModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TreeModel'), CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1303, 2))
Namespace.addCategoryObject('elementBinding', TreeModel.name().localName(), TreeModel)

Node = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Node'), CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2))
Namespace.addCategoryObject('elementBinding', Node.name().localName(), Node)

SimplePredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2))
Namespace.addCategoryObject('elementBinding', SimplePredicate.name().localName(), SimplePredicate)

CompoundPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2))
Namespace.addCategoryObject('elementBinding', CompoundPredicate.name().localName(), CompoundPredicate)

SimpleSetPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2))
Namespace.addCategoryObject('elementBinding', SimpleSetPredicate.name().localName(), SimpleSetPredicate)

ScoreDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), CTD_ANON_128, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2))
Namespace.addCategoryObject('elementBinding', ScoreDistribution.name().localName(), ScoreDistribution)

RegressionModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel'), CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1462, 2))
Namespace.addCategoryObject('elementBinding', RegressionModel.name().localName(), RegressionModel)

RegressionTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable'), CTD_ANON_130, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1506, 2))
Namespace.addCategoryObject('elementBinding', RegressionTable.name().localName(), RegressionTable)

NumericPredictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NumericPredictor'), CTD_ANON_131, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1518, 2))
Namespace.addCategoryObject('elementBinding', NumericPredictor.name().localName(), NumericPredictor)

CategoricalPredictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CategoricalPredictor'), CTD_ANON_132, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1528, 2))
Namespace.addCategoryObject('elementBinding', CategoricalPredictor.name().localName(), CategoricalPredictor)

PredictorTerm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PredictorTerm'), CTD_ANON_133, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1538, 2))
Namespace.addCategoryObject('elementBinding', PredictorTerm.name().localName(), PredictorTerm)

RuleSetModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel'), CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1547, 2))
Namespace.addCategoryObject('elementBinding', RuleSetModel.name().localName(), RuleSetModel)

RuleSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSet'), CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1566, 2))
Namespace.addCategoryObject('elementBinding', RuleSet.name().localName(), RuleSet)

RuleSelectionMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSelectionMethod'), CTD_ANON_136, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1580, 2))
Namespace.addCategoryObject('elementBinding', RuleSelectionMethod.name().localName(), RuleSelectionMethod)

SimpleRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule'), CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1602, 2))
Namespace.addCategoryObject('elementBinding', SimpleRule.name().localName(), SimpleRule)

SupportVectorMachineModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel'), CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1626, 2))
Namespace.addCategoryObject('elementBinding', SupportVectorMachineModel.name().localName(), SupportVectorMachineModel)

PolynomialKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PolynomialKernelType'), CTD_ANON_139, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1677, 2))
Namespace.addCategoryObject('elementBinding', PolynomialKernelType.name().localName(), PolynomialKernelType)

RadialBasisKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RadialBasisKernelType'), CTD_ANON_140, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1688, 2))
Namespace.addCategoryObject('elementBinding', RadialBasisKernelType.name().localName(), RadialBasisKernelType)

SigmoidKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SigmoidKernelType'), CTD_ANON_141, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1697, 2))
Namespace.addCategoryObject('elementBinding', SigmoidKernelType.name().localName(), SigmoidKernelType)

VectorDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorDictionary'), CTD_ANON_142, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1710, 2))
Namespace.addCategoryObject('elementBinding', VectorDictionary.name().localName(), VectorDictionary)

VectorFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorFields'), CTD_ANON_143, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1720, 2))
Namespace.addCategoryObject('elementBinding', VectorFields.name().localName(), VectorFields)

VectorInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorInstance'), CTD_ANON_144, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1729, 2))
Namespace.addCategoryObject('elementBinding', VectorInstance.name().localName(), VectorInstance)

SupportVectorMachine = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachine'), CTD_ANON_145, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1741, 2))
Namespace.addCategoryObject('elementBinding', SupportVectorMachine.name().localName(), SupportVectorMachine)

SupportVectors = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectors'), CTD_ANON_146, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1753, 2))
Namespace.addCategoryObject('elementBinding', SupportVectors.name().localName(), SupportVectors)

SupportVector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVector'), CTD_ANON_147, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1763, 2))
Namespace.addCategoryObject('elementBinding', SupportVector.name().localName(), SupportVector)

Coefficients = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Coefficients'), CTD_ANON_148, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1771, 2))
Namespace.addCategoryObject('elementBinding', Coefficients.name().localName(), Coefficients)

Coefficient = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Coefficient'), CTD_ANON_149, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1781, 2))
Namespace.addCategoryObject('elementBinding', Coefficient.name().localName(), Coefficient)

TextModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModel'), CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1789, 2))
Namespace.addCategoryObject('elementBinding', TextModel.name().localName(), TextModel)

TextDocument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextDocument'), CTD_ANON_151, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1831, 2))
Namespace.addCategoryObject('elementBinding', TextDocument.name().localName(), TextDocument)

TextModelNormalization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModelNormalization'), CTD_ANON_152, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1850, 2))
Namespace.addCategoryObject('elementBinding', TextModelNormalization.name().localName(), TextModelNormalization)

TextModelSimiliarity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModelSimiliarity'), CTD_ANON_153, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1886, 2))
Namespace.addCategoryObject('elementBinding', TextModelSimiliarity.name().localName(), TextModelSimiliarity)

GeneralRegressionModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel'), CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1901, 2))
Namespace.addCategoryObject('elementBinding', GeneralRegressionModel.name().localName(), GeneralRegressionModel)

Parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Parameter'), CTD_ANON_155, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1976, 2))
Namespace.addCategoryObject('elementBinding', Parameter.name().localName(), Parameter)

Predictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Predictor'), CTD_ANON_156, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2002, 2))
Namespace.addCategoryObject('elementBinding', Predictor.name().localName(), Predictor)

PPCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PPCell'), CTD_ANON_157, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2020, 2))
Namespace.addCategoryObject('elementBinding', PPCell.name().localName(), PPCell)

PCovMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCovMatrix'), CTD_ANON_158, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2031, 2))
Namespace.addCategoryObject('elementBinding', PCovMatrix.name().localName(), PCovMatrix)

PCovCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCovCell'), CTD_ANON_159, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2047, 2))
Namespace.addCategoryObject('elementBinding', PCovCell.name().localName(), PCovCell)

PCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCell'), CTD_ANON_160, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2068, 2))
Namespace.addCategoryObject('elementBinding', PCell.name().localName(), PCell)

BaseCumHazardTables = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaseCumHazardTables'), CTD_ANON_161, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2079, 2))
Namespace.addCategoryObject('elementBinding', BaseCumHazardTables.name().localName(), BaseCumHazardTables)

BaselineStratum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaselineStratum'), CTD_ANON_162, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2091, 2))
Namespace.addCategoryObject('elementBinding', BaselineStratum.name().localName(), BaselineStratum)

BaselineCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell'), CTD_ANON_163, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2102, 2))
Namespace.addCategoryObject('elementBinding', BaselineCell.name().localName(), BaselineCell)

SequenceModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceModel'), CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2143, 2))
Namespace.addCategoryObject('elementBinding', SequenceModel.name().localName(), SequenceModel)

Constraints = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constraints'), CTD_ANON_165, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2169, 2))
Namespace.addCategoryObject('elementBinding', Constraints.name().localName(), Constraints)

SetPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SetPredicate'), CTD_ANON_166, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2195, 2))
Namespace.addCategoryObject('elementBinding', SetPredicate.name().localName(), SetPredicate)

Delimiter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Delimiter'), CTD_ANON_167, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2219, 2))
Namespace.addCategoryObject('elementBinding', Delimiter.name().localName(), Delimiter)

Time = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Time'), CTD_ANON_168, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2))
Namespace.addCategoryObject('elementBinding', Time.name().localName(), Time)

Sequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Sequence'), CTD_ANON_169, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2247, 2))
Namespace.addCategoryObject('elementBinding', Sequence.name().localName(), Sequence)

SetReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SetReference'), CTD_ANON_170, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2263, 2))
Namespace.addCategoryObject('elementBinding', SetReference.name().localName(), SetReference)

SequenceRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceRule'), CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2271, 2))
Namespace.addCategoryObject('elementBinding', SequenceRule.name().localName(), SequenceRule)

SequenceReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference'), CTD_ANON_172, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2298, 2))
Namespace.addCategoryObject('elementBinding', SequenceReference.name().localName(), SequenceReference)

NaiveBayesModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel'), CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2320, 2))
Namespace.addCategoryObject('elementBinding', NaiveBayesModel.name().localName(), NaiveBayesModel)

TargetValueCount = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCount'), CTD_ANON_174, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2385, 2))
Namespace.addCategoryObject('elementBinding', TargetValueCount.name().localName(), TargetValueCount)

ModelVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2))
Namespace.addCategoryObject('elementBinding', ModelVerification.name().localName(), ModelVerification)

PredictiveModelQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PredictiveModelQuality'), CTD_ANON_176, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2436, 2))
Namespace.addCategoryObject('elementBinding', PredictiveModelQuality.name().localName(), PredictiveModelQuality)

ClusteringModelQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModelQuality'), CTD_ANON_177, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2461, 2))
Namespace.addCategoryObject('elementBinding', ClusteringModelQuality.name().localName(), ClusteringModelQuality)

LiftData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftData'), CTD_ANON_178, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2468, 2))
Namespace.addCategoryObject('elementBinding', LiftData.name().localName(), LiftData)

MiningModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningModel'), CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2622, 2))
Namespace.addCategoryObject('elementBinding', MiningModel.name().localName(), MiningModel)

Segmentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Segmentation'), CTD_ANON_180, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2645, 2))
Namespace.addCategoryObject('elementBinding', Segmentation.name().localName(), Segmentation)

Segment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Segment'), CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2655, 2))
Namespace.addCategoryObject('elementBinding', Segment.name().localName(), Segment)

ResultField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResultField'), CTD_ANON_182, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2698, 2))
Namespace.addCategoryObject('elementBinding', ResultField.name().localName(), ResultField)

Regression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Regression'), CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2711, 2))
Namespace.addCategoryObject('elementBinding', Regression.name().localName(), Regression)

DecisionTree = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree'), CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2728, 2))
Namespace.addCategoryObject('elementBinding', DecisionTree.name().localName(), DecisionTree)

TimeSeriesModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeSeriesModel'), CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2755, 2))
Namespace.addCategoryObject('elementBinding', TimeSeriesModel.name().localName(), TimeSeriesModel)

TimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeSeries'), CTD_ANON_186, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2785, 2))
Namespace.addCategoryObject('elementBinding', TimeSeries.name().localName(), TimeSeries)

TimeValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeValue'), CTD_ANON_187, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2806, 2))
Namespace.addCategoryObject('elementBinding', TimeValue.name().localName(), TimeValue)

TimeAnchor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeAnchor'), CTD_ANON_188, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2817, 2))
Namespace.addCategoryObject('elementBinding', TimeAnchor.name().localName(), TimeAnchor)

TimeCycle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeCycle'), CTD_ANON_189, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2829, 2))
Namespace.addCategoryObject('elementBinding', TimeCycle.name().localName(), TimeCycle)

TimeException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeException'), CTD_ANON_190, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2869, 2))
Namespace.addCategoryObject('elementBinding', TimeException.name().localName(), TimeException)

ExponentialSmoothing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ExponentialSmoothing'), CTD_ANON_191, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2892, 2))
Namespace.addCategoryObject('elementBinding', ExponentialSmoothing.name().localName(), ExponentialSmoothing)

Seasonality_ExpoSmooth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Seasonality_ExpoSmooth'), CTD_ANON_192, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2912, 2))
Namespace.addCategoryObject('elementBinding', Seasonality_ExpoSmooth.name().localName(), Seasonality_ExpoSmooth)

Level = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Level'), CTD_ANON_193, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2931, 2))
Namespace.addCategoryObject('elementBinding', Level.name().localName(), Level)

Trend = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Trend'), CTD_ANON_194, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2939, 2))
Namespace.addCategoryObject('elementBinding', Trend.name().localName(), Trend)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningBuildTask'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 35, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Header'), CTD_ANON_3, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 189, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DataDictionary'), CTD_ANON_7, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 224, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TransformationDictionary'), CTD_ANON_13, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 420, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork'), CTD_ANON_108, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 898, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel'), CTD_ANON_114, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1026, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AssociationModel'), CTD_ANON_119, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1233, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TreeModel'), CTD_ANON_123, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1303, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel'), CTD_ANON_129, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1462, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel'), CTD_ANON_134, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1547, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel'), CTD_ANON_138, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1626, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModel'), CTD_ANON_150, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1789, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel'), CTD_ANON_154, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1901, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceModel'), CTD_ANON_164, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2143, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel'), CTD_ANON_173, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2320, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningModel'), CTD_ANON_179, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2622, 2)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeSeriesModel'), CTD_ANON_185, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2755, 2)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 10, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 12, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 13, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 30, 8))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Header')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 9, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningBuildTask')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 10, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DataDictionary')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 11, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TransformationDictionary')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 12, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AssociationModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 15, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 16, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 17, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 18, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 20, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 21, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 22, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SequenceModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 23, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 24, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 25, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeSeriesModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 26, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TreeModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 27, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 30, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 38, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 38, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 57, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 57, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Application'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 201, 2)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Annotation'), CTD_ANON_5, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 210, 2)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Timestamp'), CTD_ANON_6, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 217, 2)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 192, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 193, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 194, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 195, 8))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 192, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Application')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 193, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Annotation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 194, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Timestamp')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 195, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 204, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 204, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 213, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 213, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 220, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 220, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DataField'), CTD_ANON_79, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 234, 2)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy'), CTD_ANON_9, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 351, 2)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 227, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 229, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 227, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DataField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 228, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 229, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Apply'), CTD_ANON_8, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constant'), CTD_ANON_86, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), CTD_ANON_88, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), CTD_ANON_90, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), CTD_ANON_91, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), CTD_ANON_92, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), CTD_ANON_94, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 345, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 346, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 345, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Constant')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 410, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 411, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 412, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 413, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Discretize')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 414, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MapValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 415, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Apply')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 416, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Aggregate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 417, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ChildParent'), CTD_ANON_84, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 360, 2)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 354, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 354, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ChildParent')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 355, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 385, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 385, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), CTD_ANON_12, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 397, 2)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 392, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 393, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 392, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 393, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=2L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 402, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 402, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DefineFunction'), CTD_ANON_82, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 323, 2)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 423, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 424, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 425, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 423, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DefineFunction')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 424, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DerivedField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 425, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 432, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 433, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 432, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DerivedField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 433, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_14()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Interval'), CTD_ANON_81, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 519, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 519, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Interval')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 520, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_15()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningField'), CTD_ANON_95, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 580, 2)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 575, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 575, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 576, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_16()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnivariateStats'), CTD_ANON_96, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 639, 2)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 634, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 634, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'UnivariateStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 635, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_17()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 697, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 698, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 697, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 698, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_18()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OutputField'), CTD_ANON_105, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 786, 2)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 781, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 781, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'OutputField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 782, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_19()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Target'), CTD_ANON_106, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 863, 2)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 858, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 858, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Target')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 859, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_20()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralInput'), CTD_ANON_110, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 987, 2)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 928, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 928, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralInput')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 929, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_21()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutput'), CTD_ANON_113, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1017, 2)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 951, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 951, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutput')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 952, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_22()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1059, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1059, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_23()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Partition'), CTD_ANON_103, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'KohonenMap'), CTD_ANON_25, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1077, 2)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Covariances'), CTD_ANON_26, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1087, 2)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1067, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1068, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1069, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1070, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1071, 8))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1067, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'KohonenMap')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1068, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Partition')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1070, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Covariances')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1071, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_24()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1080, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1080, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_25()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1090, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1090, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1091, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_26()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1118, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1118, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1119, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_27()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1164, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1164, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_28()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1171, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1171, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_29()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1178, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1178, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_30()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1185, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1185, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_31()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1200, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1200, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_32()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1207, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1207, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_33()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1214, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1214, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_34()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1285, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1285, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_35()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1425, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1425, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_36()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1432, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1432, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_37()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule'), CTD_ANON_137, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1602, 2)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule'), CTD_ANON_38, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1617, 2)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1620, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1620, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1355, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1356, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1357, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'True')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1358, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'False')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1359, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1598, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1599, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_38()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1672, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1672, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_39()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy'), CTD_ANON_9, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 351, 2)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1817, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1818, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1817, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Taxonomy')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1818, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 120, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_40()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextDocument'), CTD_ANON_151, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1831, 2)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1826, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1827, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1826, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextDocument')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1827, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_41()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1845, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1845, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1846, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_42()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Parameter'), CTD_ANON_155, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1976, 2)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1971, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1972, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1971, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Parameter')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1972, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_43()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Predictor'), CTD_ANON_156, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2002, 2)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1989, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1990, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1989, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Predictor')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1990, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_44()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Predictor'), CTD_ANON_156, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2002, 2)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1997, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1998, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1997, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Predictor')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1998, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_45()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PPCell'), CTD_ANON_157, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2020, 2)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2015, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2016, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2015, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PPCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2016, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_46()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCell'), CTD_ANON_160, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2068, 2)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2063, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2064, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2063, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2064, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_47()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Value'), CTD_ANON_80, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Interval'), CTD_ANON_81, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2114, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2115, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2116, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2114, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Value')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2115, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Interval')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2116, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_48()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Time'), CTD_ANON_168, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference'), CTD_ANON_172, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2298, 2)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2292, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2295, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2292, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2294, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2295, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_49()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Time'), CTD_ANON_168, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference'), CTD_ANON_172, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2298, 2)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2292, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2295, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2292, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SequenceReference')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2294, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2295, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_50()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesInput'), CTD_ANON_52, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2349, 2)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2344, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2344, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BayesInput')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2345, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_51()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PairCounts'), CTD_ANON_54, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2368, 2)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2352, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2353, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2352, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DerivedField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2353, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PairCounts')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2354, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_52()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts'), CTD_ANON_55, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2377, 2)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2362, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2362, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2363, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_53()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts'), CTD_ANON_55, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2377, 2)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2371, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2371, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCounts')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2372, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_54()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCount'), CTD_ANON_174, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2385, 2)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2380, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2380, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TargetValueCount')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2381, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_55()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VerificationField'), CTD_ANON_57, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2413, 2)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2408, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2408, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'VerificationField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2409, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_56()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2416, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2416, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_57()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PredictiveModelQuality'), CTD_ANON_176, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2436, 2)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModelQuality'), CTD_ANON_177, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2461, 2)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Correlations'), CTD_ANON_71, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2588, 2)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2427, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2429, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2430, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2432, 8))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2427, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PredictiveModelQuality')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2429, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModelQuality')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2430, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Correlations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2432, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_58()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), CTD_ANON_62, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2484, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2484, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2485, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_59()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), CTD_ANON_62, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2492, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2492, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2493, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_60()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph'), CTD_ANON_62, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2505, 2)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2500, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2500, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2501, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_61()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates'), CTD_ANON_63, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2516, 2)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates'), CTD_ANON_64, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2524, 2)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues'), CTD_ANON_65, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2532, 2)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValueMeans'), CTD_ANON_66, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2540, 2)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2508, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2511, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2512, 8))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2508, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2509, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2510, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2511, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValueMeans')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2512, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_62()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2519, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2519, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_63()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2527, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2527, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_64()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2535, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2535, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_65()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2543, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2543, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_66()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ROCGraph'), CTD_ANON_68, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2561, 2)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2551, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2551, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ROCGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2552, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_67()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates'), CTD_ANON_63, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2516, 2)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates'), CTD_ANON_64, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2524, 2)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues'), CTD_ANON_65, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2532, 2)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2564, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2567, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2564, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'XCoordinates')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2565, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'YCoordinates')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2566, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BoundaryValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2567, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_68()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClassLabels'), CTD_ANON_70, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2580, 2)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2574, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2574, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClassLabels')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2575, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2576, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_69()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2583, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2583, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 120, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_70()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationFields'), CTD_ANON_72, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2598, 2)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationValues'), CTD_ANON_73, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2606, 2)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CorrelationMethods'), CTD_ANON_74, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2614, 2)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2591, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2594, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2591, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CorrelationFields')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2592, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CorrelationValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2593, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CorrelationMethods')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2594, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_71()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2601, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2601, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 120, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_72()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2609, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2609, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2610, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_73()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2617, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2617, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2618, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_74()




def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
ArrayType._Automaton = _BuildAutomaton_75()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Indices'), STD_ANON_, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 143, 2)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'INT-Entries'), STD_ANON_2, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 148, 2)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 126, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 127, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Indices')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 126, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'INT-Entries')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 127, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_76()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Indices'), STD_ANON_, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 143, 2)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'REAL-Entries'), STD_ANON_3, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 153, 2)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 136, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 137, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Indices')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 136, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'REAL-Entries')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 137, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_77()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MatCell'), CTD_ANON_78, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 179, 2)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 160, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MatCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 162, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_78()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Value'), CTD_ANON_80, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Interval'), CTD_ANON_81, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 237, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 239, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 240, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 237, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Interval')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 239, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Value')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 240, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_79()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 289, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 289, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_80()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 307, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 307, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_81()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParameterField'), CTD_ANON_83, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 335, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Apply'), CTD_ANON_8, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constant'), CTD_ANON_86, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), CTD_ANON_88, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), CTD_ANON_90, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), CTD_ANON_91, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), CTD_ANON_92, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), CTD_ANON_94, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 326, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 326, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ParameterField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 327, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Constant')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 410, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 411, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 412, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 413, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Discretize')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 414, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MapValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 415, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Apply')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 416, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Aggregate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 417, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_82()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TableLocator'), CTD_ANON_10, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 382, 2)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), CTD_ANON_11, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 363, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 363, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TableLocator')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 365, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'InlineTable')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 366, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_83()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Value'), CTD_ANON_80, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 286, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Apply'), CTD_ANON_8, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 342, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constant'), CTD_ANON_86, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 450, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous'), CTD_ANON_88, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 467, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete'), CTD_ANON_90, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 487, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Discretize'), CTD_ANON_91, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 504, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapValues'), CTD_ANON_92, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 525, 2)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Aggregate'), CTD_ANON_94, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 550, 2)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 440, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 442, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 440, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Constant')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 410, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 411, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormContinuous')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 412, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NormDiscrete')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 413, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Discretize')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 414, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MapValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 415, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Apply')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 416, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Aggregate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 417, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Value')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 442, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_84()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 462, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 462, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_85()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LinearNorm'), CTD_ANON_89, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 478, 2)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 470, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=2L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 471, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 470, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LinearNorm')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 471, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_86()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 481, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 481, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_87()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 490, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 490, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_88()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DiscretizeBin'), CTD_ANON_15, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 516, 2)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 507, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 508, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 507, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DiscretizeBin')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 508, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_89()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TableLocator'), CTD_ANON_10, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 382, 2)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), CTD_ANON_11, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldColumnPair'), CTD_ANON_93, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 541, 2)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 528, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 530, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 528, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldColumnPair')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 529, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TableLocator')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 531, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'InlineTable')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 532, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_90()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 544, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 544, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_91()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 553, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 553, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_92()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 583, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 583, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_93()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Counts'), CTD_ANON_97, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 660, 2)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo'), CTD_ANON_98, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 671, 2)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DiscrStats'), CTD_ANON_18, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 694, 2)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ContStats'), CTD_ANON_100, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 703, 2)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Anova'), CTD_ANON_101, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 719, 2)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 642, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 643, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 644, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 645, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 646, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 647, 8))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 642, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Counts')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 643, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 644, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DiscrStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 645, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ContStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 646, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Anova')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 647, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_94()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 663, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 663, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_95()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Quantile'), CTD_ANON_99, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 685, 2)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 674, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 675, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 674, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Quantile')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 675, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_96()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 688, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 688, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_97()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Interval'), CTD_ANON_81, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 304, 2)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 706, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 707, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 708, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=1L, max=3L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 716, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 706, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Interval')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 707, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_98()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AnovaRow'), CTD_ANON_102, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 728, 2)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 722, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=3L, max=3L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 723, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 722, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AnovaRow')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 723, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_99()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 731, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 731, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_100()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PartitionFieldStats'), CTD_ANON_104, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 759, 2)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 752, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 753, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 752, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PartitionFieldStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 753, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_101()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Counts'), CTD_ANON_97, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 660, 2)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo'), CTD_ANON_98, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 671, 2)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 762, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 763, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 764, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 765, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=1L, max=3L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 716, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 762, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Counts')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 763, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NumericInfo')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 764, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 105, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_102()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 789, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 789, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_103()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TargetValue'), CTD_ANON_107, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 886, 2)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 866, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 867, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 866, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TargetValue')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 867, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_104()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Partition'), CTD_ANON_103, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 889, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 890, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 889, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Partition')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 890, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_105()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralInputs'), CTD_ANON_21, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 925, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralLayer'), CTD_ANON_109, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 934, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutputs'), CTD_ANON_22, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 948, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 901, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 903, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 904, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 905, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 906, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 907, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 910, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 911, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 912, 8))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 901, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 902, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 903, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 904, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 905, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 906, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 907, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralInputs')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 908, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralLayer')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 909, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralOutputs')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 910, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 911, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 912, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_106()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Neuron'), CTD_ANON_111, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 996, 2)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 937, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 937, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Neuron')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 938, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_107()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 990, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 990, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DerivedField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 991, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_108()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Con'), CTD_ANON_112, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1008, 2)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 999, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 999, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Con')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1000, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_109()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1011, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1011, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_110()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DerivedField'), CTD_ANON_85, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 437, 2)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1020, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1020, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DerivedField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1021, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_111()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MissingValueWeights'), CTD_ANON_23, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1056, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Cluster'), CTD_ANON_24, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1064, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringField'), CTD_ANON_115, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1095, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ComparisonMeasure'), CTD_ANON_116, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1132, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1029, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1031, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1032, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1033, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1034, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1036, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1037, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1039, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1040, 8))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1029, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1030, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1031, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1032, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1033, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1034, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ComparisonMeasure')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1035, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClusteringField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1036, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MissingValueWeights')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1037, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Cluster')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1038, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1039, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1040, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_112()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Comparisons'), CTD_ANON_27, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1115, 2)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1098, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1099, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1098, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Comparisons')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1099, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_113()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'euclidean'), CTD_ANON_28, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1161, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'squaredEuclidean'), CTD_ANON_29, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1168, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cityBlock'), CTD_ANON_30, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1175, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chebychev'), CTD_ANON_31, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1182, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'minkowski'), CTD_ANON_117, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1189, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'simpleMatching'), CTD_ANON_32, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1197, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'jaccard'), CTD_ANON_33, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1204, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tanimoto'), CTD_ANON_34, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1211, 2)))

CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'binarySimilarity'), CTD_ANON_118, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1218, 2)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1135, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1135, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'euclidean')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1137, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'squaredEuclidean')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1138, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'chebychev')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1139, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cityBlock')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1140, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'minkowski')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1141, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'simpleMatching')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1142, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'jaccard')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1143, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tanimoto')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1144, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'binarySimilarity')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1145, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_114()




CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1192, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1192, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_117._Automaton = _BuildAutomaton_115()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1221, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1221, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_116()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Item'), CTD_ANON_120, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1260, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Itemset'), CTD_ANON_121, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1271, 2)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AssociationRule'), CTD_ANON_122, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1290, 2)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1236, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1238, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1239, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1240, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1241, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1242, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1243, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1244, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1236, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1237, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1238, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1239, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1240, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Item')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1241, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Itemset')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1242, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AssociationRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1243, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1244, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_117()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1263, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1263, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_118()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ItemRef'), CTD_ANON_35, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1282, 2)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1274, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1275, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1274, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ItemRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1275, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_119()




CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1293, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1293, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_122._Automaton = _BuildAutomaton_120()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Node'), CTD_ANON_124, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1306, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1308, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1309, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1310, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1311, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1312, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1314, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1315, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1306, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1307, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1308, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1309, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1310, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1311, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1312, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Node')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1313, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1314, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1315, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_121()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Partition'), CTD_ANON_103, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 749, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Node'), CTD_ANON_124, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), CTD_ANON_128, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Regression'), CTD_ANON_183, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2711, 2)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree'), CTD_ANON_184, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2728, 2)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1336, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1340, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1341, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1342, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2691, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1336, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1355, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1356, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1357, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'True')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1358, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'False')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1359, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Partition')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1340, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1341, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Node')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1342, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2691, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Regression')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2693, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2694, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_122()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1365, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1365, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_123()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2)))

CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1388, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=2L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1389, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1388, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1355, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1356, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1357, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'True')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1358, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'False')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1359, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_124()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1408, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1408, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1409, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_125()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1439, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1439, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_126()




CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable'), CTD_ANON_130, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1506, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1465, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1467, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1468, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1469, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1470, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1471, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1474, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1475, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1465, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1466, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1467, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1468, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1469, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1470, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1471, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1472, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1474, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1475, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_129._Automaton = _BuildAutomaton_127()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NumericPredictor'), CTD_ANON_131, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1518, 2)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CategoricalPredictor'), CTD_ANON_132, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1528, 2)))

CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PredictorTerm'), CTD_ANON_133, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1538, 2)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1509, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1510, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1511, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1512, 8))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1509, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NumericPredictor')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1510, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CategoricalPredictor')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1511, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PredictorTerm')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1512, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_128()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1521, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1521, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_129()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1531, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1531, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_130()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1541, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1541, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1542, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_131()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSet'), CTD_ANON_135, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1566, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1550, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1552, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1553, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1554, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1555, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1556, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1558, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1559, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1550, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1551, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1552, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1553, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1554, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1555, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1556, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RuleSet')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1557, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1558, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1559, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_132()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), CTD_ANON_128, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSelectionMethod'), CTD_ANON_136, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1580, 2)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule'), CTD_ANON_137, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1602, 2)))

CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule'), CTD_ANON_38, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1617, 2)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1569, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1571, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1572, 8))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1569, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RuleSelectionMethod')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1570, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1571, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1598, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1599, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_133()




CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1583, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1583, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_134()




CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution'), CTD_ANON_128, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1436, 2)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1605, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1607, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1605, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1355, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1356, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1357, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'True')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1358, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'False')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1359, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ScoreDistribution')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1607, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_137._Automaton = _BuildAutomaton_135()




CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LinearKernelType'), CTD_ANON_39, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1669, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PolynomialKernelType'), CTD_ANON_139, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1677, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RadialBasisKernelType'), CTD_ANON_140, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1688, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SigmoidKernelType'), CTD_ANON_141, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1697, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorDictionary'), CTD_ANON_142, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1710, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachine'), CTD_ANON_145, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1741, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1629, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1631, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1632, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1633, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1634, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1635, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1646, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1647, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1629, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1630, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1631, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1632, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1633, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1634, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1635, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LinearKernelType')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1638, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PolynomialKernelType')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1639, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RadialBasisKernelType')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1640, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SigmoidKernelType')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1641, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'VectorDictionary')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1644, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachine')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1645, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1646, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1647, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_138._Automaton = _BuildAutomaton_136()




CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1680, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1680, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_139._Automaton = _BuildAutomaton_137()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1691, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1691, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_138()




CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1700, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1700, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_141._Automaton = _BuildAutomaton_139()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorFields'), CTD_ANON_143, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1720, 2)))

CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VectorInstance'), CTD_ANON_144, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1729, 2)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1713, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1715, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1713, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'VectorFields')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1714, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'VectorInstance')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1715, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_140()




CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FieldRef'), CTD_ANON_87, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 459, 2)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1723, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1723, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FieldRef')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1724, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_143._Automaton = _BuildAutomaton_141()




CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'REAL-SparseArray'), CTD_ANON_76, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 133, 2)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1732, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1732, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'REAL-SparseArray')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1734, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 115, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_144._Automaton = _BuildAutomaton_142()




CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectors'), CTD_ANON_146, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1753, 2)))

CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Coefficients'), CTD_ANON_148, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1771, 2)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1744, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1745, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1744, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SupportVectors')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1745, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Coefficients')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1746, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_145._Automaton = _BuildAutomaton_143()




CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVector'), CTD_ANON_147, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1763, 2)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1756, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1756, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SupportVector')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1757, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_146._Automaton = _BuildAutomaton_144()




CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1766, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1766, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_147._Automaton = _BuildAutomaton_145()




CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Coefficient'), CTD_ANON_149, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1781, 2)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1774, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1774, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Coefficient')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1775, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_148._Automaton = _BuildAutomaton_146()




CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_149, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1784, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1784, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_149._Automaton = _BuildAutomaton_147()




CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextDictionary'), CTD_ANON_40, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1814, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextCorpus'), CTD_ANON_41, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1823, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DocumentTermMatrix'), CTD_ANON_42, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1842, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModelNormalization'), CTD_ANON_152, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1850, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TextModelSimiliarity'), CTD_ANON_153, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1886, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1792, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1794, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1795, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1796, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1797, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1798, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1802, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1803, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1804, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1805, 8))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1792, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1793, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1794, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1795, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1796, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1797, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1798, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextDictionary')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1799, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextCorpus')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1800, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DocumentTermMatrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1801, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextModelNormalization')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1802, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TextModelSimiliarity')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1803, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1804, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1805, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_150._Automaton = _BuildAutomaton_148()




CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_151, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1834, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1834, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_151._Automaton = _BuildAutomaton_149()




CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1853, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1853, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_152._Automaton = _BuildAutomaton_150()




CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1889, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1889, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_153._Automaton = _BuildAutomaton_151()




CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParameterList'), CTD_ANON_43, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1968, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FactorList'), CTD_ANON_44, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1986, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CovariateList'), CTD_ANON_45, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1994, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PPMatrix'), CTD_ANON_46, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2012, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCovMatrix'), CTD_ANON_158, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2031, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ParamMatrix'), CTD_ANON_47, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2060, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaseCumHazardTables'), CTD_ANON_161, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2079, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EventValues'), CTD_ANON_48, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2111, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1904, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1906, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1907, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1908, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1909, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1910, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1912, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1913, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1915, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1917, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1918, 8))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1919, 8))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1920, 8))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1904, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1905, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1906, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1907, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1908, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1909, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1910, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ParameterList')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1911, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FactorList')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1912, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CovariateList')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1913, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PPMatrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1914, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PCovMatrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1915, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ParamMatrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1916, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'EventValues')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1917, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BaseCumHazardTables')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1918, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1919, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1920, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_154._Automaton = _BuildAutomaton_152()




CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_155, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1979, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1979, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_155._Automaton = _BuildAutomaton_153()




CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_156, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Matrix'), CTD_ANON_77, scope=CTD_ANON_156, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 158, 2)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2005, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2006, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2005, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Matrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2006, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_156._Automaton = _BuildAutomaton_154()




CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2023, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2023, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_157._Automaton = _BuildAutomaton_155()




CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PCovCell'), CTD_ANON_159, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2047, 2)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2034, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2034, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PCovCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2035, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_158._Automaton = _BuildAutomaton_156()




CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2050, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2050, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_159._Automaton = _BuildAutomaton_157()




CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_160, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2071, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2071, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_160._Automaton = _BuildAutomaton_158()




CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_161, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaselineStratum'), CTD_ANON_162, scope=CTD_ANON_161, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2091, 2)))

CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell'), CTD_ANON_163, scope=CTD_ANON_161, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2102, 2)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2082, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2082, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BaselineStratum')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2084, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2085, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_161._Automaton = _BuildAutomaton_159()




CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_162, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell'), CTD_ANON_163, scope=CTD_ANON_162, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2102, 2)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2094, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2095, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2094, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BaselineCell')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2095, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_162._Automaton = _BuildAutomaton_160()




CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_163, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2105, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2105, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_163._Automaton = _BuildAutomaton_161()




CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Item'), CTD_ANON_120, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1260, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Itemset'), CTD_ANON_121, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1271, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Constraints'), CTD_ANON_165, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2169, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SetPredicate'), CTD_ANON_166, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2195, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Sequence'), CTD_ANON_169, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2247, 2)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SequenceRule'), CTD_ANON_171, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2271, 2)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2146, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2148, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2149, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2150, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2151, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2152, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2153, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2155, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2156, 8))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2146, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2147, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2148, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2149, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Constraints')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2150, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Item')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2151, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Itemset')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2152, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2153, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Sequence')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2154, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SequenceRule')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2155, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2156, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_164._Automaton = _BuildAutomaton_162()




CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_165, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2172, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2172, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_165._Automaton = _BuildAutomaton_163()




CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_166, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_166, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2198, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2198, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 120, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_166._Automaton = _BuildAutomaton_164()




CTD_ANON_167._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_167, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2222, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_167._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2222, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_167._Automaton = _BuildAutomaton_165()




CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_168, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2231, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2231, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_168._Automaton = _BuildAutomaton_166()




CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Delimiter'), CTD_ANON_167, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2219, 2)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Time'), CTD_ANON_168, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SetReference'), CTD_ANON_170, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2263, 2)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2250, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2252, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2241, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2243, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2255, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2250, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SetReference')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2251, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2241, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Delimiter')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2242, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2243, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SetReference')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2244, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2255, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_169._Automaton = _BuildAutomaton_167()




CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_170, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2266, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2266, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_170._Automaton = _BuildAutomaton_168()




CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Delimiter'), CTD_ANON_167, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2219, 2)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Time'), CTD_ANON_168, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2228, 2)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AntecedentSequence'), CTD_ANON_49, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2306, 2)))

CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConsequentSequence'), CTD_ANON_50, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2313, 2)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2274, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2277, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2279, 8))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2274, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AntecedentSequence')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2275, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Delimiter')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2276, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2277, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ConsequentSequence')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2278, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Time')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2279, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_171._Automaton = _BuildAutomaton_169()




CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_172, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2301, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2301, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_172._Automaton = _BuildAutomaton_170()




CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesInputs'), CTD_ANON_51, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2341, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'BayesOutput'), CTD_ANON_53, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2359, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2323, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2325, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2326, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2327, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2328, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2329, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2332, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2333, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2323, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2324, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2325, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2326, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2327, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2328, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2329, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BayesInputs')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2330, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'BayesOutput')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2331, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2332, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2333, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_173._Automaton = _BuildAutomaton_171()




CTD_ANON_174._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_174, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2388, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_174._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2388, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_174._Automaton = _BuildAutomaton_172()




CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_175, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InlineTable'), CTD_ANON_11, scope=CTD_ANON_175, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 389, 2)))

CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'VerificationFields'), CTD_ANON_56, scope=CTD_ANON_175, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2405, 2)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2397, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2397, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'VerificationFields')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2398, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'InlineTable')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2399, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_175._Automaton = _BuildAutomaton_173()




CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_176, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LiftData'), CTD_ANON_178, scope=CTD_ANON_176, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2468, 2)))

CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ROC'), CTD_ANON_67, scope=CTD_ANON_176, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2548, 2)))

CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConfusionMatrix'), CTD_ANON_69, scope=CTD_ANON_176, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2571, 2)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2439, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2440, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2441, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2442, 8))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2439, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ConfusionMatrix')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2440, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LiftData')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2441, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ROC')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2442, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_176._Automaton = _BuildAutomaton_174()




CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelLiftGraph'), CTD_ANON_59, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2481, 2)))

CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OptimumLiftGraph'), CTD_ANON_60, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2489, 2)))

CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RandomLiftGraph'), CTD_ANON_61, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2497, 2)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2471, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2473, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2474, 8))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2471, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelLiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2472, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'OptimumLiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2473, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RandomLiftGraph')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2474, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_178._Automaton = _BuildAutomaton_175()




CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation'), CTD_ANON_58, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2424, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Segmentation'), CTD_ANON_180, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2645, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Regression'), CTD_ANON_183, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2711, 2)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree'), CTD_ANON_184, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2728, 2)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2625, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2627, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2628, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2629, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2630, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2631, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2632, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2636, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2637, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2638, 8))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2625, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2626, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2627, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2628, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelExplanation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2629, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2630, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2631, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Regression')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2633, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DecisionTree')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2634, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Segmentation')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2636, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2637, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2638, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_179._Automaton = _BuildAutomaton_176()




CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_180, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_180, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Segment'), CTD_ANON_181, scope=CTD_ANON_180, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2655, 2)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2648, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2649, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2648, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2649, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Segment')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2650, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_180._Automaton = _BuildAutomaton_177()




CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork'), CTD_ANON_108, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 898, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel'), CTD_ANON_114, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1026, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TreeModel'), CTD_ANON_123, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1303, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate'), CTD_ANON_125, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1362, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate'), CTD_ANON_126, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1385, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate'), CTD_ANON_127, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1405, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'True'), CTD_ANON_36, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1422, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'False'), CTD_ANON_37, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1429, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel'), CTD_ANON_129, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1462, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel'), CTD_ANON_134, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1547, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel'), CTD_ANON_138, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1626, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel'), CTD_ANON_154, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1901, 2)))

CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel'), CTD_ANON_173, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2320, 2)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2658, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2658, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimplePredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1355, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CompoundPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1356, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SimpleSetPredicate')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1357, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'True')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1358, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'False')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1359, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClusteringModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2661, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'GeneralRegressionModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2662, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NaiveBayesModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2663, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'NeuralNetwork')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2664, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RegressionModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2665, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RuleSetModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2666, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SupportVectorMachineModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2667, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TreeModel')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2668, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2669, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_181._Automaton = _BuildAutomaton_178()




CTD_ANON_182._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_182, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2701, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_182._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2701, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_182._Automaton = _BuildAutomaton_179()




CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable'), CTD_ANON_130, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1506, 2)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResultField'), CTD_ANON_182, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2698, 2)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2714, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2715, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2716, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2717, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2718, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2719, 8))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2714, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2715, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2716, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2717, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2718, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ResultField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2719, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RegressionTable')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2720, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_183._Automaton = _BuildAutomaton_180()




CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Targets'), CTD_ANON_20, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 855, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Node'), CTD_ANON_124, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 1333, 2)))

CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResultField'), CTD_ANON_182, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2698, 2)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2731, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2732, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2733, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2734, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2735, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2736, 8))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2731, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2732, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2733, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Targets')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2734, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2735, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ResultField')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2736, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Node')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2737, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_184._Automaton = _BuildAutomaton_181()




CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Extension'), CTD_ANON_2, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 52, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations'), CTD_ANON_14, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 429, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema'), CTD_ANON_16, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 572, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelStats'), CTD_ANON_17, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 631, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Output'), CTD_ANON_19, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 778, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification'), CTD_ANON_175, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2394, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeSeries'), CTD_ANON_186, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2785, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ExponentialSmoothing'), CTD_ANON_191, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2892, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SpectralAnalysis'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2957, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ARIMA'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2959, 2)))

CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SeasonalTrendDecomposition'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2961, 2)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2758, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2760, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2761, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2762, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=3L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2763, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2764, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2765, 8))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2766, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2767, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2768, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2769, 8))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2758, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MiningSchema')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2759, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Output')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2760, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelStats')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2761, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'LocalTransformations')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2762, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeSeries')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2763, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SpectralAnalysis')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2764, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ARIMA')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2765, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ExponentialSmoothing')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2766, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'SeasonalTrendDecomposition')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2767, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ModelVerification')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2768, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Extension')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2769, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_185._Automaton = _BuildAutomaton_182()




CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeValue'), CTD_ANON_187, scope=CTD_ANON_186, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2806, 2)))

CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeAnchor'), CTD_ANON_188, scope=CTD_ANON_186, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2817, 2)))

CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeException'), CTD_ANON_190, scope=CTD_ANON_186, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2869, 2)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2788, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2789, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2790, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeAnchor')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2788, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeException')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2789, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeValue')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2790, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_186._Automaton = _BuildAutomaton_183()




CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Timestamp'), CTD_ANON_6, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 217, 2)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2809, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Timestamp')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2809, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_187._Automaton = _BuildAutomaton_184()




CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeCycle'), CTD_ANON_189, scope=CTD_ANON_188, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2829, 2)))

CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeException'), CTD_ANON_190, scope=CTD_ANON_188, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2869, 2)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2820, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=2L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2821, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeCycle')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2820, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeException')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2821, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_188._Automaton = _BuildAutomaton_185()




CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2832, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_189._Automaton = _BuildAutomaton_186()




CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_190._Automaton = _BuildAutomaton_187()




CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'TimeValue'), CTD_ANON_187, scope=CTD_ANON_191, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2806, 2)))

CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Seasonality_ExpoSmooth'), CTD_ANON_192, scope=CTD_ANON_191, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2912, 2)))

CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Level'), CTD_ANON_193, scope=CTD_ANON_191, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2931, 2)))

CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Trend'), CTD_ANON_194, scope=CTD_ANON_191, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2939, 2)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2896, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2897, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2898, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Level')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2895, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Trend')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2896, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Seasonality_ExpoSmooth')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2897, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'TimeValue')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 2898, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_191._Automaton = _BuildAutomaton_188()




CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Array'), ArrayType, scope=CTD_ANON_192, location=pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 102, 1)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Array')), pyxb.utils.utility.Location('/Users/fengx3/Downloads/pmml-4-0.xsd', 115, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_192._Automaton = _BuildAutomaton_189()
