"""@file matrix_ops.py_in

@brief Help message functions for all matrix operations

@namespace linalg
"""


def matrix_info_help_message(schema_madlib, message, **kwargs):
    """
    Args:
        @param schema_madlib
        @param message
        @param kwargs

    Returns:
        STR.
    """
    dense_format = """
A dense matrix is represented as a distributed collection of 1-D arrays.
An example 3x10 matrix would be the below table:

 row_id |         row_vec
--------+-------------------------
   0    | {{9,6,5,8,5,6,6,3,10,8}}
   1    | {{8,2,2,6,6,10,2,1,9,9}}
   2    | {{3,9,9,9,8,6,3,9,5,6}}

The column names above can be user-defined - the matrix functions provide options
to input these column names. The default names expected are 'row_num' and 'val'.
"""
    sparse_format = """
A sparse matrix is represented using the row and column indices for each
non-zero entry of the matrix. This representation is useful for sparse matrices,
containing multiple zero elements. Given below is an example of a sparse 4x7 matrix
with just 6 out of 28 entries being non-zero.

Note: There should be exactly one tuple that has a NULL for the '<em>value</em>'
column. This tuple gives the dimensionality of the sparse matrix (the
dimensionality cannot be determined just by the entries since the last
row/column could have all zeros).

 row_id | col_id | value
--------+--------+-------
      0 |      0 |     9
      0 |      5 |     6
      0 |      6 |     6
      1 |      0 |     8
      2 |      0 |     3
      2 |      1 |     9
      4 |      7 |     NULL
(6 rows)

The column names above can be user-defined - the matrix functions provide options
to input these column names. The default names expected are 'row_num', 'col_num'
and 'val'.
    """
    message = message.lower()
    if not message:
        # TODO
        help_string = dense_format + sparse_format + """
            Run "SELECT matrix_info('dense');" or "SELECT matrix_info('sparse');"
            for examples of the specific data format.
        """
    elif message == 'dense':
        help_string = dense_format + """

-- Example to create dense matices
-- These matrices are used in all the matrix operation help message examples.

DROP TABLE IF EXISTS "matrix_A";
CREATE TABLE "matrix_A" (
    row_id integer,
    row_vec integer[]
);
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (0, '{{9,6,5,8,5,6,6,3,10,8}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (1, '{{8,2,2,6,6,10,2,1,9,9}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (2, '{{3,9,9,9,8,6,3,9,5,6}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (3, '{{6,4,2,2,2,7,8,8,0,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (4, '{{6,8,9,9,4,6,9,5,7,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (5, '{{4,10,7,3,9,5,9,2,3,4}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (6, '{{8,10,7,10,1,9,7,9,8,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (7, '{{7,4,5,6,2,8,1,1,4,8}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (8, '{{8,8,8,5,2,6,9,1,8,3}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (9, '{{4,6,3,2,6,4,1,2,3,8}}');

DROP TABLE IF EXISTS "matrix_B";
CREATE TABLE "matrix_B" (
    row_id integer,
    row_vec integer[]
);
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (0, '{{9,10,2,4,6,5,3,7,5,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (1, '{{5,3,5,2,8,6,9,7,7,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (2, '{{0,1,2,3,2,7,7,3,10,1}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (3, '{{2,9,0,4,3,6,8,6,3,4}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (4, '{{3,8,7,7,0,5,3,9,2,10}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (5, '{{5,3,1,7,6,3,5,3,6,4}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (6, '{{4,8,4,4,2,7,10,0,3,3}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (7, '{{4,6,0,1,3,1,6,6,9,8}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (8, '{{6,5,1,7,2,7,10,6,0,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (9, '{{1,4,4,4,8,5,2,8,5,5}}');
"""
    elif message == 'sparse':
        # TODO
        help_string = sparse_format + """
        -- Example data for sparse matrices
CREATE TABLE "mat_A_sparse" (
    "rowNum" integer,
    col_num integer,
    entry integer
);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (0, 0, 9);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (0, 1, 6);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (0, 7, 3);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (0, 8, 10);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (0, 9, 8);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (1, 0, 8);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (1, 1, 2);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (1, 2, 2);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (1, 3, 6);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (2, 5, 6);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (2, 6, 3);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (7, 0, 7);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (8, 2, 8);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (8, 3, 5);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (9, 1, 6);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (9, 2, 3);
INSERT INTO "mat_A_sparse" ("rowNum", col_num, entry) VALUES (10, 10, NULL);

CREATE TABLE "mat_B_sparse" (
    row_id integer,
    col_id integer,
    val integer
);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (0, 0, 9);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (0, 7, 3);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (1, 1, 2);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (1, 2, 2);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (1, 3, 6);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (9, 1, 6);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (9, 2, 3);
INSERT INTO "mat_B_sparse" (row_id, col_id, val) VALUES (10, 10, NULL);
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_add('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ----------------------------------------------------------------------


def matrix_add_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix addition
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix addition

This function provides addition of two matrices either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_add('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_add('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

SELECT {schema_madlib}.matrix_add(
    'matrix_a',     -- Name of the table containing 1st matrix
    'a_args',       -- String argument containing matrix_a specific arguments
                    --     (see matrix arguments below for options)
    'matrix_b',     -- Name of the table containing 2nd matrix
    'b_args',       -- String argument containing matrix_b specific arguments
                    --     (see matrix arguments below for options)
    'matrix_out'    -- Name of the table to store result matrix
    'out_args',     -- String argument containing matrix_out specific arguments
                    --     (see matrix arguments below for options)
);

------------------------------------------------------------
                    MATRIX ARGUMENTS
------------------------------------------------------------
A string containing multiple named arguments of the form "name=value".
This argument is used as a container for multiple parameters related to a single
matrix.

The following parameters are supported for this string argument:
    - row: (Default: 'row_num') Name of the column containing row index of the matrix.
    - col: (Default: 'col_num') Name of the column containing column index of the matrix.
    - val: (Default: 'val') Name of the column containing the entries of the matrix.
                            For a dense matrix, this should be of an ARRAY type.

These string arguments can be NULL if the default values are to be used.

If not provided, out_args uses same value as a_args.

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    '{{row}}'       -- Row index for each row of the matrix
    '{{val}}'       -- Each row vector

-- Sparse format
    '{{row}}'        -- Row index for each element
    '{{col}}'        -- Column index for each element
    '{{val}}'        -- Value for each element

The column names in {{}} are set using the options provided in output
matrix arguments (out_args).
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes A + B

----------------------- Dense format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

SELECT madlib.matrix_add('"mat_A"', 'row=row_id, val=row_vec',
                         '"mat_B"', 'row=row_id, val=vector',
                         'mat_r', 'val=vector');
SELECT * FROM mat_r ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A_sparse" and "matrix_B_sparse" can be obtained from
--      SELECT matrix_info('sparse');

SELECT madlib.matrix_add('"mat_A_sparse"', 'row="rowNum", val=entry',
                         '"mat_B_sparse"', 'row=row_id, col=col_id, val=vector',
                         'matrix_r_sparse', 'col=col_out');
SELECT madlib.matrix_densify('matrix_r_sparse',
                             'row="rowNum", col=col_out, val=entry',
                             'matrix_r');
SELECT * FROM matrix_r ORDER BY "rowNum";
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_add('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


def matrix_mult_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix Multiplicationn
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix multiplication

This function provides multiplication of two matrices either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_mult('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_mult('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

SELECT {schema_madlib}.matrix_mult(
    'matrix_a',     -- Name of the table containing 1st matrix
    'a_args',       -- String argument containing matrix_a specific arguments
                    --     (see matrix arguments below for options)
    'matrix_b',     -- Name of the table containing 2nd matrix
    'b_args',       -- String argument containing matrix_b specific arguments
                    --     (see matrix arguments below for options)
    'matrix_out'    -- Name of the table to store result matrix
    'out_args',     -- String argument containing matrix_out specific arguments
                    --     (see matrix arguments below for options)
);

------------------------------------------------------------
                    MATRIX ARGUMENTS
------------------------------------------------------------
A string containing multiple named arguments of the form "name=value".
This argument is used as a container for multiple parameters related to a single
matrix.

The following parameters are supported for this string argument:
    row: (Default: 'row_num') Name of the column containing row index of the matrix.
    col: (Default: 'col_num') Name of the column containing column index of the matrix.
    val: (Default: 'val') Name of the column containing the entries of the matrix.
                          For a dense matrix, this should be of an ARRAY type.
    trans: (Default: False) Boolean flag to indicate if the matrix should be
                              transposed before the operation.

These string arguments can be NULL if the default values are to be used.

If not provided, out_args uses same value as a_args.

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    '{{row}}'       -- Row index for each row of the matrix
    '{{val}}'       -- Each row vector

-- Sparse format
    '{{row}}'        -- Row index for each element
    '{{col}}'        -- Column index for each element
    '{{val}}'        -- Value for each element

The column names in {{}} are set using the options provided in output
matrix arguments (out_args).
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes A * B'

----------------------- Dense format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

SELECT madlib.matrix_mult('"mat_A"', 'row=row_id, val=row_vec',
                         '"mat_B"', 'row=row_id, val=vector, trans=true',
                         'mat_r', 'val=vector');
SELECT * FROM mat_r ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A_sparse" and "matrix_B_sparse" can be obtained from
--      SELECT matrix_info('sparse');

SELECT madlib.matrix_add('"mat_A_sparse"', 'row="rowNum", val=entry',
                         '"mat_B_sparse"', 'row=row_id, col=col_id, val=vector, trans=true',
                         'matrix_r_sparse', 'col=col_out');
SELECT * FROM matrix_r ORDER BY "rowNum";
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_mult('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


def matrix_trans_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix transposition
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix transposition

This function provides transposition of a matrix either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_trans('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_trans('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

SELECT {schema_madlib}.matrix_trans(
    'matrix_in',    -- Name of the table containing input matrix
    'in_args',      -- String argument containing matrix_in arguments
                    --     (see matrix arguments below for options)
    'matrix_r'      -- Name of the table to store result matrix
);

------------------------------------------------------------
                    MATRIX ARGUMENTS
------------------------------------------------------------
A string containing multiple named arguments of the form "name=value".
This argument is used as a container for multiple parameters related to a single
matrix.

The following parameters are supported for this string argument:
    row: (Default: 'row_num') Name of the column containing row index of the matrix.
    col: (Default: 'col_num') Name of the column containing column index of the matrix.
    val: (Default: 'val') Name of the column containing the entries of the matrix.
                          For a dense matrix, this should be of an ARRAY type.

These string arguments can be NULL if the default values are to be used.

If not provided, out_args uses same value as in_args.

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    {{row}}        -- Row id for each row of the matrix
    {{val}}       -- Each row vector

-- Sparse format
    {{row}}        -- Row id for each element
    {{col}}        -- Column id for each element
    {{val}}         -- Value for each element
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes B'

----------------------- Dense format --------------------------------
-- Data for "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

SELECT madlib.matrix_trans('"mat_B"', 'row=row_id, val=vector',
                           'mat_r');
SELECT * FROM mat_r ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A_sparse" can be obtained from
--      SELECT matrix_info('sparse');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_trans('"matrix_A_sparse"', 'row="rowNum", val=entry',
                           '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_trans('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


# ------------------------------------------------------------------------------
