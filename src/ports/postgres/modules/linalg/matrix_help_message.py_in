"""@file matrix_ops.py_in

@brief Help message functions for all matrix operations

@namespace linalg
"""


def matrix_info(schema_madlib, message, **kwargs):
    """
    Args:
        @param schema_madlib
        @param message
        @param kwargs

    Returns:
        STR.
    """
    message = message.lower()
    if not message:
        # TODO
        help_string = """ Add general information about dense and sparse formats """
    elif message == 'dense':
        help_string = """
        Add more information about dense matrices

-- Example to create dense matices
-- These matrices are used in all the matrix operation help message examples.

DROP TABLE IF EXISTS "matrix_A";
CREATE TABLE "matrix_A" (
    row_id integer,
    row_vec integer[]
);
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (0, '{{9,6,5,8,5,6,6,3,10,8}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (1, '{{8,2,2,6,6,10,2,1,9,9}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (2, '{{3,9,9,9,8,6,3,9,5,6}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (3, '{{6,4,2,2,2,7,8,8,0,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (4, '{{6,8,9,9,4,6,9,5,7,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (5, '{{4,10,7,3,9,5,9,2,3,4}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (6, '{{8,10,7,10,1,9,7,9,8,7}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (7, '{{7,4,5,6,2,8,1,1,4,8}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (8, '{{8,8,8,5,2,6,9,1,8,3}}');
INSERT INTO "matrix_A" (row_id, row_vec) VALUES (9, '{{4,6,3,2,6,4,1,2,3,8}}');

DROP TABLE IF EXISTS "matrix_B";
CREATE TABLE "matrix_B" (
    row_id integer,
    row_vec integer[]
);
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (0, '{{9,10,2,4,6,5,3,7,5,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (1, '{{5,3,5,2,8,6,9,7,7,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (2, '{{0,1,2,3,2,7,7,3,10,1}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (3, '{{2,9,0,4,3,6,8,6,3,4}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (4, '{{3,8,7,7,0,5,3,9,2,10}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (5, '{{5,3,1,7,6,3,5,3,6,4}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (6, '{{4,8,4,4,2,7,10,0,3,3}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (7, '{{4,6,0,1,3,1,6,6,9,8}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (8, '{{6,5,1,7,2,7,10,6,0,6}}');
INSERT INTO "matrix_B" (row_id, row_vec) VALUES (9, '{{1,4,4,4,8,5,2,8,5,5}}');
"""
    elif message == 'sparse':
        # TODO
        help_string = """ Add information about sparse matrices

        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_add('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ----------------------------------------------------------------------


def matrix_add_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix addition
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix addition

This function provides addition of two matrices either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_add('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_add('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

-- Dense format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_add(
    'matrix_a',     -- Name of the table containing 1st matrix
    'matrix_b',     -- Name of the table containing 2nd matrix
    'matrix_r'      -- Name of the table to store result matrix
);

-- Sparse format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_add(
    'matrix_a',     -- Name of the table containing 1st matrix
    'a_row',        -- Name of the column containing the row id for 1st matrix.
    'a_col',        -- Name of the column containing the column id for 1st matrix.
    'a_val',        -- Name of the column containing the values for 1st matrix.
    'matrix_b',     -- Name of the table containing 2nd matrix
    'b_row',        -- Name of the column containing the row id for 2nd matrix.
    'b_col',        -- Name of the column containing the column id for 2nd matrix.
    'b_val',        -- Name of the column containing the values for 2nd matrix.
    'matrix_r'      -- Name of the table to store result matrix
);

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    'row_id'        -- Row id for each row of the matrix
    'row_vec'       -- Each row vector

-- Sparse format
    'row_id'        -- Row id for each element
    'col_id'        -- Column id for each element
    'value'         -- Value for each element
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes A + B

----------------------- Dense format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_add('"matrix_A"', '"matrix_B"', '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('sparse');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_add('"matrix_A"', 'row_id', 'col_id', 'val',
                         '"matrix_B"', 'row_id', 'col_id', 'val',
                         '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_add('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


def matrix_mult_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix Multiplicationn
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix multiplication

This function provides multiplication of two matrices either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_mult('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_mult('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

-- Dense format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_mult(
    'matrix_a',     -- Name of the table containing 1st matrix
    a_trans,        -- Boolean flag indicating if matrix_a should be transposed before multiplication
    'matrix_b',     -- Name of the table containing 2nd matrix
    b_trans,        -- Boolean flag indicating if matrix_b should be transposed before multiplication
    'matrix_r'      -- Name of the table to store result matrix
);

-- Sparse format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_mult(
    'matrix_a',     -- Name of the table containing 1st matrix
    'a_row',        -- Name of the column containing the row id for 1st matrix.
    'a_col',        -- Name of the column containing the column id for 1st matrix.
    'a_val',        -- Name of the column containing the values for 1st matrix.
    a_trans,        -- Boolean flag indicating if matrix_a should be transposed before multiplication
    'matrix_b',     -- Name of the table containing 2nd matrix
    'b_row',        -- Name of the column containing the row id for 2nd matrix.
    'b_col',        -- Name of the column containing the column id for 2nd matrix.
    'b_val',        -- Name of the column containing the values for 2nd matrix.
    b_trans,        -- Boolean flag indicating if matrix_b should be transposed before multiplication
    'matrix_r'      -- Name of the table to store result matrix
);

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    'row_id'        -- Row id for each row of the matrix
    'row_vec'       -- Each row vector

-- Sparse format
    'row_id'        -- Row id for each element
    'col_id'        -- Column id for each element
    'value'         -- Value for each element
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes A * B^T, where B^T represents the transpose of matrix B.

----------------------- Dense format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_mult('"matrix_A"', FALSE,
                          '"matrix_B"', TRUE,
                          '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('sparse');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_mult('"matrix_A"', 'row_id', 'col_id', 'val', FALSE
                          "matrix_B"', 'row_id', 'col_id', 'val', TRUE
                          '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_mult('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


def matrix_trans_help_message(schema_madlib, message, **kwargs):
    """ Help message for Matrix transposition
    """
    if not message:
        help_string = """
------------------------------------------------------------
                        SUMMARY
------------------------------------------------------------
Functionality: Matrix transposition

This function provides transposition of two matrices either in dense or sparse format.

For more details on the function usage:
    SELECT {schema_madlib}.matrix_trans('usage');
For an example on using this function:
    SELECT {schema_madlib}.matrix_trans('example');
For more details on the two input formats (dense or sparse):
    SELECT {schema_madlib}.matrix_info();
        """
    elif message.lower().strip() in ['usage', 'help', '?']:
        help_string = """
------------------------------------------------------------
                        USAGE
------------------------------------------------------------

-- Dense format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_trans(
    'matrix_a',     -- Name of the table containing 1st matrix
    'matrix_b',     -- Name of the table containing 2nd matrix
    'matrix_r'      -- Name of the table to store result matrix
);

-- Sparse format -----------------------------------------------------------
SELECT {schema_madlib}.matrix_trans(
    'matrix_a',     -- Name of the table containing 1st matrix
    'a_row',        -- Name of the column containing the row id for 1st matrix.
    'a_col',        -- Name of the column containing the column id for 1st matrix.
    'a_val',        -- Name of the column containing the values for 1st matrix.
    'matrix_b',     -- Name of the table containing 2nd matrix
    'b_row',        -- Name of the column containing the row id for 2nd matrix.
    'b_col',        -- Name of the column containing the column id for 2nd matrix.
    'b_val',        -- Name of the column containing the values for 2nd matrix.
    'matrix_r'      -- Name of the table to store result matrix
);

------------------------------------------------------------
                        OUTPUT
------------------------------------------------------------
The output table ('matrix_r' above) has the following columns

-- Dense format
    'row_id'        -- Row id for each row of the matrix
    'row_vec'       -- Each row vector

-- Sparse format
    'row_id'        -- Row id for each element
    'col_id'        -- Column id for each element
    'value'         -- Value for each element
        """
    elif message.lower().strip() in ['example', 'examples']:
        help_string = """
------------------------------------------------------------
                        EXAMPLE
------------------------------------------------------------
-- Below example computes A + B

----------------------- Dense format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('dense');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_trans('"matrix_A"', '"matrix_B"', '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;

----------------------- Sparse format --------------------------------
-- Data for "matrix_A" and "matrix_B" can be obtained from
--      SELECT matrix_info('sparse');

DROP TABLE IF EXISTS "matrix_R";
SELECT madlib.matrix_trans('"matrix_A"', 'row_id', 'col_id', 'val',
                         '"matrix_B"', 'row_id', 'col_id', 'val',
                         '"matrix_R"');
SELECT * FROM "matrix_R" ORDER BY row_id;
        """
    else:
        help_string = "No such option. Use {schema_madlib}.matrix_trans('usage')"
    return help_string.format(schema_madlib=schema_madlib)
# ------------------------------------------------------------


# ------------------------------------------------------------------------------
