"""@file matrix_ops.py_in

@namespace linalg
"""

import plpy
from utilities.utilities import __mad_version
from utilities.utilities import unique_string
from utilities.validate_args import get_cols
from utilities.validate_args import is_col_array
from utilities.validate_args import table_exists
from utilities.validate_args import table_is_empty
from utilities.validate_args import columns_exist_in_table

version_wrapper = __mad_version()
string_to_array = version_wrapper.select_vecfunc()
array_to_string = version_wrapper.select_vec_return()


def _assert(condition, msg):
    if not condition:
        plpy.error(msg)


def _is_sparse(row, col, val):
    if row is None or col is None or val is None:
        return False
    else:
        return True


def _validate_output_table(outtable):
    _assert(outtable is not None and outtable.replace('"', '').strip() != '',
            'invalid output table')


# If the source table is already formatted as needed, do nothing,
# Otherwise, create a new temp table containing the data in the needed format (if possible).
# Returns true if a new table was generated.  Returns false otherwise.
def cast_dense_input_table_to_correct_columns(schema_madlib, matrix_in,
                                              matrix_out, row_id):
    _validate_output_table(matrix_out)
    cols = get_cols(matrix_in, schema_madlib)
    createTable = False
    if len(cols) == 2:
        cols.remove(row_id)
        if not is_col_array(matrix_in, cols[0]):
            plpy.error("SVD error: Data column should be of type array!")
        if cols[0] != "row_vec" or row_id != "row_id":
            plpy.execute(
                """
                CREATE TEMP TABLE {matrix_out} as
                    SELECT {row_id} as row_id, {vec} as row_vec
                    FROM {matrix_in}
                """.format(matrix_out=matrix_out,
                           row_id=row_id, vec=cols[0], matrix_in=matrix_in))
            createTable = True
    else:
        plpy.execute(
            """
            SELECT {schema_madlib}.__matrix_column_to_array_format (
                '{matrix_in}', '{row_id}', '{matrix_out}', False)
            """.format(schema_madlib=schema_madlib, matrix_in=matrix_in,
                       row_id=row_id,
                       matrix_out=matrix_out))
        createTable = True
    return createTable


def _validate_sparse(matrix, row, col, val):
    _assert(table_exists(matrix), "The input table {0} doesn't exist".format(matrix))
    _assert(columns_exist_in_table(matrix, [row, col, val]),
            "one or more expected columns (e.g. {row}, {col}, {val})"
            " don't exist in the table representing a sparse matrix".format(**locals()))
    _assert(not table_is_empty(matrix), 'the input table is empty')
    rv = plpy.execute("""
        SELECT count(*) cnt FROM {matrix} WHERE {val} IS NULL
        """.format(matrix=matrix, val=val))
    _assert(len(rv) == 1, 'more than one NULL values found in the value column')


def _validate_dense(matrix, checkCol=True):
    _assert(table_exists(matrix), "The input table {0} doesn't exist".format(matrix))
    if checkCol:
        _assert(columns_exist_in_table(matrix, ['row_id', 'row_vec']),
                "one or more expected columns(e.g. row_id, row_vec) "
                "don't exist in the table representing a dense matrix".format(**locals()))
        _assert(is_col_array(matrix, 'row_vec'),
                "invalid row_vec column - array expected")
    _assert(not table_is_empty(matrix), 'the input table is empty')


def _validate_block(matrix):
    _assert(table_exists(matrix), "The input table {0} doesn't exist".format(matrix))
    _assert(columns_exist_in_table(matrix, ['row_id', 'col_id', 'block']),
            "one or more expected columns(e.g. row_id, col_id, block)"
            " don't exist in the table representing a block matrix")
    _assert(is_col_array(matrix, 'block'),
            'invalid block column - array expected')
    _assert(not table_is_empty(matrix), 'the input table is empty')


def get_dims(matrix, row=None, col=None, val=None, is_block=False):
    row_dim = None
    col_dim = None
    if is_block:
        _validate_block(matrix)
        rv1 = plpy.execute("""
            SELECT
                max(row_id) as max_row_id,
                max(col_id) as max_col_id
            FROM
                {matrix}
            """.format(matrix=matrix))[0]
        rv2 = plpy.execute("""
            SELECT
                (array_upper(block, 1) - array_lower(block, 1) + 1) AS block_row_dim,
                (array_upper(block, 2) - array_lower(block, 2) + 1) AS block_col_dim
            FROM
                {matrix}
            WHERE
                row_id = 0 and col_id = 0
            """.format(matrix=matrix))[0]
        rv3 = plpy.execute("""
            SELECT
                (array_upper(block, 1) - array_lower(block, 1) + 1) AS block_row_dim,
                (array_upper(block, 2) - array_lower(block, 2) + 1) AS block_col_dim
            FROM
                {matrix}
            WHERE
                row_id = {max_row_id} and col_id = {max_col_id}
            """.format(matrix=matrix,
                       max_row_id=rv1['max_row_id'],
                       max_col_id=rv1['max_col_id']))[0]

        row_dim = rv1['max_row_id'] * rv2['block_row_dim'] + rv3['block_row_dim']
        col_dim = rv1['max_col_id'] * rv2['block_col_dim'] + rv3['block_col_dim']
        return [row_dim, col_dim]

    if _is_sparse(row, col, val):
        _validate_sparse(matrix, row, col, val)
        rv = plpy.execute("""
            SELECT
                {row} AS row_dim,
                {col} AS col_dim
            FROM
                {matrix}
            WHERE
                {val} is NULL
            """.format(matrix=matrix, row=row, col=col, val=val))
        _assert(len(rv) == 1,
                'no dimension information retrieved from the input sparse matrix')
        row_dim = rv[0]['row_dim']
        col_dim = rv[0]['col_dim']
    else:
        _validate_dense(matrix)
        rv = plpy.execute("""
            SELECT
                count(*) AS row_dim
            FROM
                {matrix}
            """.format(matrix=matrix))
        _assert(len(rv) == 1,
                'no dimension information retrieved from the input dense matrix')
        row_dim = rv[0]['row_dim']

        rv = plpy.execute("""
            SELECT
                (array_upper(row_vec, 1) - array_lower(row_vec, 1) + 1) AS
                col_dim
            FROM
                {matrix}
            LIMIT 1
            """.format(matrix=matrix))
        _assert(len(rv) == 1, 'no dimension information retrieved')
        col_dim = rv[0]['col_dim']

    _assert(
        row_dim is not None and col_dim is not None and
        row_dim > 0 and col_dim > 0,
        'invalid dimension')
    return (row_dim, col_dim)


def matrix_sparsify(matrix_in, matrix_out, use_temp_table):
    _validate_dense(matrix_in)
    _validate_output_table(matrix_out)

    temp = ''
    if use_temp_table is None:
        plpy.error("Input error: invalid input for a logical value!")
    if use_temp_table:
        temp = 'TEMP'

    (row_dim, col_dim) = get_dims(matrix_in)
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id, col_id, value
        FROM
        (
            SELECT
                row_id,
                unnest(row_vec) AS value,
                generate_series(0, {col_dim} - 1) AS col_id
            FROM
                {matrix_in}
        ) t1
        WHERE
            value <> 0
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(temp=temp, matrix_in=matrix_in, matrix_out=matrix_out,
                   col_dim=col_dim))
    plpy.execute("""
        INSERT INTO {matrix_out} VALUES({row_dim}, {col_dim}, NULL)
        """.format(matrix_out=matrix_out, row_dim=row_dim, col_dim=col_dim))


def matrix_densify(schema_madlib, matrix_in, in_row, in_col, in_val, matrix_out,
                   use_temp_table):
    _validate_sparse(matrix_in, in_row, in_col, in_val)
    _validate_output_table(matrix_out)

    temp = ''
    if use_temp_table is None:
        plpy.error("Input error: invalid input for a logical value!")
    if use_temp_table:
        temp = 'TEMP'

    (row_dim, col_dim) = get_dims(matrix_in, in_row, in_col, in_val)
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            {in_row} AS row_id,
            {schema_madlib}.__matrix_densify_agg(
                {col_dim}, {in_col}, {in_val}) AS row_vec
        FROM
            {matrix_in}
        WHERE
            {in_val} IS NOT NULL
        GROUP BY
            {in_row}
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib, temp=temp,
                   matrix_in=matrix_in, in_row=in_row, in_col=in_col, in_val=in_val,
                   col_dim=col_dim, matrix_out=matrix_out))

    plpy.execute("""
        INSERT INTO {matrix_out}
        SELECT
            row_id, row_vec
        FROM
        (
            SELECT row_id
            FROM generate_series(0, {row_dim} - 1) AS row_id
            WHERE row_id NOT IN
                    (
                        SELECT {in_row}
                        FROM {matrix_in}
                        GROUP BY {in_row}
                    )
        ) t1,
        (
            SELECT array_agg(val * 0) AS row_vec
            FROM generate_series(0, {col_dim} - 1) AS val
        ) t2
        """.format(matrix_out=matrix_out, matrix_in=matrix_in,
                   in_row=in_row, row_dim=row_dim, col_dim=col_dim))


def matrix_trans(schema_madlib, matrix_in, in_row, in_col, in_val, matrix_out,
                 use_temp_table):
    if use_temp_table is None:
        plpy.error("Input error: invalid input for a logical value!")
    if _is_sparse(in_row, in_col, in_val):
        return _matrix_trans_sparse(
            schema_madlib, matrix_in, in_row, in_col, in_val, matrix_out,
            use_temp_table)
    else:
        return _matrix_trans_dense(
            schema_madlib, matrix_in, matrix_out, use_temp_table)


def _matrix_trans_sparse(schema_madlib, matrix_in, in_row, in_col, in_val,
                         matrix_out, use_temp_table):
    _validate_sparse(matrix_in, in_row, in_col, in_val)
    _validate_output_table(matrix_out)

    temp = ''
    if use_temp_table:
        temp = 'TEMP'
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            {in_row} AS col_id,
            {in_col} AS row_id,
            {in_val} AS value
        FROM
            {matrix_in}
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (col_id)')
        """.format(matrix_in=matrix_in, in_row=in_row, in_col=in_col, in_val=in_val,
                   matrix_out=matrix_out, temp=temp))


def _matrix_trans_dense(schema_madlib, matrix_in,
                        matrix_out, use_temp_table=False):
    _validate_dense(matrix_in)
    _validate_output_table(matrix_out)

    temp = 'TEMP' if use_temp_table else ''

    (row_dim, col_dim) = get_dims(matrix_in)
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            col_id AS row_id,
            {schema_madlib}.__matrix_densify_agg(
                {row_dim}, row_id, value) AS row_vec
        FROM
        (   SELECT row_id,
                   unnest(row_vec) AS value,
                   generate_series(0, array_upper(row_vec, 1) - 1) AS col_id
            FROM
                {matrix_in}
        ) t1
        GROUP BY
           col_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib, matrix_in=matrix_in,
                   matrix_out=matrix_out, row_dim=row_dim, temp=temp))


def matrix_mult(schema_madlib, matrix_a, a_row, a_col, a_val, a_trans,
                matrix_b, b_row, b_col, b_val, b_trans, matrix_out):

    if a_trans is None or b_trans is None:
        plpy.error("Input error: invalid logical values (a_trans or b_trans)!")

    matrix_out1 = unique_string() + "_a1"
    if a_trans:
        matrix_trans(schema_madlib, matrix_a, a_row, a_col, a_val, matrix_out1, False)
        matrix_a = matrix_out1
        if _is_sparse(a_row, a_col, a_val):
            a_row = 'row_id'
            a_col = 'col_id'
            a_val = 'value'

    matrix_out2 = unique_string() + "_a2"
    if b_trans:
        matrix_trans(
            schema_madlib, matrix_b, b_row, b_col, b_val, matrix_out2, False)
        matrix_b = matrix_out2
        if _is_sparse(b_row, b_col, b_val):
            b_row = 'row_id'
            b_col = 'col_id'
            b_val = 'value'

    # both matrix_a and matrix_b are dense
    if not _is_sparse(a_row, a_col, a_val) and not _is_sparse(b_row, b_col, b_val):
        _matrix_mult_dense(schema_madlib, matrix_a, matrix_b, matrix_out, False)
        plpy.execute("drop table if exists {matrix_out2}".format(matrix_out2=matrix_out2))
        return

    # sparsify matrix_a if not sparse
    matrix_out3 = unique_string() + "_a3"
    if not _is_sparse(a_row, a_col, a_val):
        matrix_sparsify(matrix_a, matrix_out3, False)
        matrix_a = matrix_out3
        a_row = 'row_id'
        a_col = 'col_id'
        a_val = 'value'

    # sparsify matrix_b if not sparse
    matrix_out4 = unique_string() + "_a4"
    if not _is_sparse(b_row, b_col, b_val):
        matrix_sparsify(matrix_b, matrix_out4, False)
        matrix_b = matrix_out4
        b_row = 'row_id'
        b_col = 'col_id'
        b_val = 'value'

    matrix_out5 = unique_string() + "_a5"
    _matrix_mult_sparse(
        schema_madlib, matrix_a, a_row, a_col, a_val, matrix_b, b_row, b_col,
        b_val, matrix_out5, False)

    matrix_densify(schema_madlib, matrix_out5, 'row_id', 'col_id',
                   'value', matrix_out, False)

    plpy.execute("drop table if exists {matrix_out1}".format(matrix_out1=matrix_out1))
    plpy.execute("drop table if exists {matrix_out2}".format(matrix_out2=matrix_out2))
    plpy.execute("drop table if exists {matrix_out3}".format(matrix_out3=matrix_out3))
    plpy.execute("drop table if exists {matrix_out4}".format(matrix_out4=matrix_out4))
    plpy.execute("drop table if exists {matrix_out5}".format(matrix_out5=matrix_out5))


def _matrix_mult_sparse(schema_madlib, matrix_a, a_row, a_col, a_val,
                        matrix_b, b_row, b_col, b_val, matrix_out,
                        use_temp_table=False):
    _validate_sparse(matrix_a, a_row, a_col, a_val)
    _validate_sparse(matrix_b, b_row, b_col, b_val)
    _validate_output_table(matrix_out)
    a_dim = get_dims(matrix_a, a_row, a_col, a_val)
    b_dim = get_dims(matrix_b, b_row, b_col, b_val)
    _assert(min(a_dim) > 0 and min(b_dim) > 0, 'invalid dimension')
    _assert(a_dim[1] == b_dim[0],
            'dimension mismatch for matrix multiplication')

    temp = ''
    if use_temp_table:
        temp = 'TEMP'
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id, col_id, sum(value) AS value
        FROM
        (
            SELECT
                a.{a_row} AS row_id,
                b.{b_col} AS col_id,
                a.{a_val}::float8 * b.{b_val}::float8 AS value
            FROM
                {matrix_a} AS a,
                {matrix_b} AS b
            WHERE
                a.{a_val} IS NOT NULL AND
                b.{b_val} IS NOT NULL AND
                a.{a_col} = b.{b_row}
        ) t
        GROUP BY
            row_id, col_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(temp=temp,
                   matrix_a=matrix_a, a_row=a_row, a_col=a_col, a_val=a_val,
                   matrix_b=matrix_b, b_row=b_row, b_col=b_col, b_val=b_val,
                   matrix_out=matrix_out))
    plpy.execute("""
        INSERT INTO {matrix_out} VALUES ({row_count}, {col_count}, NULL)
        """.format(matrix_out=matrix_out,
                   row_count=a_dim[0],
                   col_count=b_dim[1]))


def _matrix_mult_dense(schema_madlib, matrix_a, matrix_b, matrix_out,
                       use_temp_table):
    _validate_dense(matrix_a)
    _validate_dense(matrix_b)
    _validate_output_table(matrix_out)
    a_dim = get_dims(matrix_a)
    b_dim = get_dims(matrix_b)
    _assert(min(a_dim) > 0 and min(b_dim) > 0, 'invalid dimension')
    _assert(a_dim[1] == b_dim[0],
            'dimension mismatch for matrix multiplication')

    temp = ''
    if use_temp_table:
        temp = 'TEMP'
    matrix_b_trans = unique_string() + "_a6"
    _matrix_trans_dense(schema_madlib, matrix_b, matrix_b_trans, False)

    matrix_r_sparse = unique_string() + "_a7"
    plpy.execute("""
        CREATE TEMP TABLE {matrix_r_sparse}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            a.row_id AS row_id,
            b.row_id AS col_id,
            {schema_madlib}.array_dot(
                a.row_vec::float8[], b.row_vec::float8[]) AS value
        FROM
            {matrix_a} AS a, {matrix_b_trans} AS b
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib,
                   matrix_a=matrix_a,
                   matrix_b_trans=matrix_b_trans,
                   matrix_r_sparse=matrix_r_sparse))

    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id,
            {schema_madlib}.__matrix_densify_agg(
                {col_dim}, col_id, value) AS row_vec
        FROM
            {matrix_r_sparse}
        GROUP BY
            row_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib,
                   temp=temp, matrix_out=matrix_out, col_dim=b_dim[1],
                   matrix_r_sparse=matrix_r_sparse))
    plpy.execute("DROP TABLE IF EXISTS {matrix_r_sparse}".format(matrix_r_sparse=matrix_r_sparse))
    plpy.execute("DROP TABLE IF EXISTS {matrix_b_trans}".format(matrix_b_trans=matrix_b_trans))


def matrix_square(schema_madlib, matrix_in, matrix_out):
    _validate_dense(matrix_in)
    _validate_output_table(matrix_out)
    dim = get_dims(matrix_in)
    _assert(min(dim) > 0, 'invalid dimension')

    _assert(dim[1] == dim[0],
            'Matrix error: Matrix square can only be computed for a square matrix')
    matrix_out_sparse = unique_string() + "_a8"
    plpy.execute("""
        CREATE TEMP TABLE {matrix_out_sparse}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            a.row_id AS row_id,
            b.row_id AS col_id,
            {schema_madlib}.array_dot(a.row_vec, b.row_vec) AS value
        FROM
            {matrix_in} AS a, {matrix_in} AS b
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib,
                   matrix_in=matrix_in,
                   matrix_out_sparse=matrix_out_sparse))

    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id,
            {schema_madlib}.__matrix_densify_agg(
                {col_dim}, col_id, value) AS row_vec
        FROM
            {matrix_out_sparse}
        GROUP BY
            row_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
                 """.format(schema_madlib=schema_madlib,
                            matrix_out=matrix_out, col_dim=dim[0],
                            matrix_out_sparse=matrix_out_sparse))


def matrix_block_mult(schema_madlib, matrix_a, matrix_b, matrix_out):
    _validate_block(matrix_a)
    _validate_block(matrix_b)
    _validate_output_table(matrix_out)

    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id, col_id, {schema_madlib}.__matrix_mem_sum(block) AS block
        FROM
        (
            SELECT
                a.row_id AS row_id,
                b.col_id AS col_id,
                {schema_madlib}.matrix_mem_mult(a.block, b.block) AS block
            FROM
               {matrix_a} AS a JOIN {matrix_b} AS b ON (a.col_id = b.row_id)
        ) t1
        GROUP BY row_id, col_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
    """.format(schema_madlib=schema_madlib,
               matrix_a=matrix_a, matrix_b=matrix_b, matrix_out=matrix_out))


def matrix_block_square(schema_madlib, matrix_in, matrix_out):
    _validate_block(matrix_in)
    _validate_output_table(matrix_out)

    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id, col_id, {schema_madlib}.__matrix_mem_sum(block) AS block
        FROM
        (
        SELECT
            a.row_id AS row_id,
            b.row_id AS col_id,
            {schema_madlib}.matrix_mem_mult(a.block, b.block, true) AS block
        FROM
           {matrix_in} AS a JOIN {matrix_in} AS b ON (a.col_id = b.col_id)
        ) t1
        GROUP BY row_id, col_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
    """.format(schema_madlib=schema_madlib,
               matrix_in=matrix_in, matrix_out=matrix_out))


def matrix_block_trans(schema_madlib, matrix_in, matrix_out, use_temp_table=False):
    _validate_block(matrix_in)
    _validate_output_table(matrix_out)

    temp = ''
    if use_temp_table:
        temp = 'TEMP'

    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id AS col_id, col_id AS row_id,
            {schema_madlib}.matrix_mem_trans(block) AS block
        FROM
            {matrix_in}
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (col_id)')
    """.format(temp=temp, schema_madlib=schema_madlib,
               matrix_in=matrix_in, matrix_out=matrix_out))


def _matrix_column_to_array_format(source_table, row_id, target_table, istemp=False):
    """
    Convert a dense matrix in the column format into the array format
    """
    _validate_output_table(target_table)

    row = plpy.execute("""
        SELECT nspname AS table_schema, relname AS table_name
        FROM pg_class AS c, pg_namespace AS nsp
        WHERE c.oid = '{source_table}'::regclass::oid AND
              c.relnamespace = nsp.oid
        """.format(source_table=source_table))
    _assert(len(row) > 0, "Matrix OP error: The input table doesn't exist")
    table_schema = row[0]['table_schema']
    table_name = row[0]['table_name']

    numeric_types = set(['smallint', 'integer', 'bigint',
                         'real', 'numeric', 'double precision'])
    all_columns = plpy.execute("""
        SELECT column_name, data_type
        FROM
            information_schema.columns
        WHERE
            table_schema = '{table_schema}' AND
            table_name = '{table_name}'
        ORDER BY ordinal_position
        """.format(table_schema=table_schema,
                   table_name=table_name))

    all_col_names = [column['column_name'] for column in all_columns]
    num_col_names = set(column['column_name'] for column in all_columns
                        if column['data_type'] in numeric_types)

    _assert(set(all_col_names) == num_col_names, 'Not all columns are numeric!')
    _assert(row_id in all_col_names, 'No row_id in the input table')

    all_col_names.remove(row_id)

    plpy.execute('DROP TABLE IF EXISTS ' + target_table)
    plpy.execute("""
        CREATE {temp_str} TABLE {target_table}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            {row_id}::integer as row_id, array[{val_col_names}] AS row_vec
        FROM
            {source_table}
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(target_table=target_table, row_id=row_id,
                   source_table=source_table,
                   temp_str=("", "TEMP")[istemp],
                   val_col_names=','.join(all_col_names)))


def matrix_blockize(schema_madlib, matrix_in, row_dim, col_dim, matrix_out):
    _assert(row_dim > 0 and col_dim > 0, 'invalid block dimension')
    _validate_dense(matrix_in, checkCol=False)
    _validate_output_table(matrix_out)

    rv = plpy.execute('SELECT count(*) AS total_row FROM ' + matrix_in)
    total_row = rv[0]['total_row']
    residual = total_row % row_dim
    border_row = (total_row / row_dim) * row_dim

    plpy.execute('DROP TABLE IF EXISTS ' + matrix_out)
    plpy.execute("""
        CREATE TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            brow_id AS row_id,
            bcol_id AS col_id,
            {schema_madlib}.__matrix_blockize_agg(
                row_id, row_vec, row_dim) AS block
        FROM
        (
            SELECT
                row_id,
                row_id / {row_dim} AS brow_id,
                CASE WHEN row_id < {border_row}
                    THEN {row_dim}
                    ELSE {residual}
                END AS row_dim,
                {schema_madlib}.__matrix_row_split(row_vec, {col_dim}) AS row_vec,
                generate_series(0, ceil((array_upper(row_vec, 1) -
                    array_lower(row_vec, 1) + 1)::FLOAT8 / {col_dim})::INT4 - 1) as bcol_id
            FROM
                {matrix_in}
        ) t1
        GROUP BY brow_id, bcol_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
    """.format(schema_madlib=schema_madlib,
               matrix_in=matrix_in, matrix_out=matrix_out,
               row_dim=row_dim, col_dim=col_dim,
               residual=residual, border_row=border_row))


def matrix_unblockize(schema_madlib, matrix_in, matrix_out):
    _validate_block(matrix_in)
    _validate_output_table(matrix_out)

    rv = plpy.execute("""
        SELECT
            array_upper(block, 1) - array_lower(block, 1) + 1 AS row_dim,
            array_upper(block, 2) - array_lower(block, 2) + 1 AS col_dim
        FROM
            {matrix_in}
        WHERE
            row_id = 0 and col_id = 0
        """.format(matrix_in=matrix_in))
    row_dim = rv[0]['row_dim']
    col_dim = rv[0]['col_dim']

    rv = plpy.execute("""
        SELECT max(col_id) AS max_colid FROM {matrix_in} WHERE row_id = 0
        """.format(matrix_in=matrix_in))
    max_colid = rv[0]['max_colid']

    rv = plpy.execute("""
        SELECT
            array_upper(block, 2) - array_lower(block, 2) + 1 AS col_residual
        FROM
            {matrix_in}
        WHERE
            row_id = 0 AND col_id = {max_colid}
        """.format(matrix_in=matrix_in, max_colid=max_colid))
    col_residual = rv[0]['col_residual']

    total_col_dim = max_colid * col_dim + col_residual

    plpy.execute('DROP TABLE IF EXISTS ' + matrix_out)
    plpy.execute("""
        CREATE TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            row_id,
            {schema_madlib}.__matrix_unblockize_agg(
                {total_col_dim}, col_id * {col_dim}, row_vec) AS row_vec
        FROM
        (
            SELECT
                row_id * {row_dim} + generate_series(0,
                    array_upper(block, 1) - array_lower(block, 1)) AS row_id,
                col_id AS col_id,
                {schema_madlib}.__matrix_unnest_block(block) AS row_vec
            FROM
                {matrix_in}
        ) t1
        GROUP BY
            row_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib,
                   matrix_in=matrix_in, matrix_out=matrix_out,
                   row_dim=row_dim, col_dim=col_dim, total_col_dim=total_col_dim))


def create_temp_sparse_matrix_table_with_dims(source_table,
                                              out_table,
                                              row_id, col_id, value,
                                              row_dim, col_dim):
    """
    Make a copy of the input sparse table and add (row_dim, col_dim, NULL) to it

    This function is the specific call for sparse matrices and creates a temp
    table which is a copy of the source table. After creation, the tuples
    (row_dim, col_dim, NULL) is added to (row_id, col_id, value)

    Args:
        @param source_table Source table (sparse matrix)
        @param output_table Output table (sparse matrix)
        @param row_dim Row dimensions
        @param col_dim Column dimensions
    Returns:
        None
    """
    plpy.execute("""
                 CREATE TABLE {out_table} as
                     SELECT
                         {row_id} as row_id,
                         {col_id} as col_id,
                         {value} as value
                     FROM {source_table}
                     WHERE {value} is not NULL
                 """.format(row_id=row_id,
                            col_id=col_id,
                            value=value,
                            source_table=source_table,
                            out_table=out_table))

    plpy.execute("""INSERT INTO {out_table} VALUES
                    ({row_dim}, {col_dim}, NULL)
                 """.format(out_table=out_table, row_dim=row_dim,
                            col_dim=col_dim))


def matrix_norm(schema_madlib, matrix_a, norm_type, **kwargs):
    """
    Perform a matrix norm operation on a dense matrix
    Args:
        @param schema_madlib    Name of the schema where MADlib is installed
        @param matrix_a         Name of the source table
        @param norm_type        Name of the output table

    Returns:
        @param norm

    Throws:
        plpy.error if any argument is invalid

    """

    # Check for null values
    if matrix_a is None:
        plpy.error("Matrix Norm Error: NULL input table is not valid")
    if norm_type is None:
        norm_type = 'fro'

    # Add any supported norm types here for easy error checking
    SUPPORTED_NORM_TYPES = ['fro']
    if norm_type not in SUPPORTED_NORM_TYPES:
        plpy.error("Matrix Norm Error: Supported norm types are (%s)",
                   ','.join(SUPPORTED_NORM_TYPES))

    norm = plpy.execute(
        """
        SELECT sqrt(sum(s)) as p
        FROM (
            SELECT
                {schema_madlib}.array_dot(row_vec, row_vec) as s
            FROM
                {source_table}
        ) Q1
        """.format(source_table=matrix_a,
                   schema_madlib=schema_madlib))

    # Return the norm
    return norm[0]['p']


def matrix_scale_and_add(schema_madlib,
                         matrix_a,
                         matrix_b,
                         scale,
                         matrix_out,
                         **kwargs):
    """
    Perform a matrix scale operation on a dense matrix, e.g, A + c*B.
    Args:
        @param schema_madlib    Name of the schema where MADlib is installed
        @param matrix_a         Matrix input A
        @param matrix_b         Matrix input B
        @param scale            Scale in the scale and add operation
        @param matrix_out         Matrix R

    Returns:
        @param norm

    Throws:
        plpy.error if any argument is invalid

    """

    # Check for null values
    if (matrix_a is None) or (matrix_b is None) or (matrix_out is None):
        plpy.error("Matrix error : NULL input/output table name is not valid")
    if scale is None:
        plpy.error("Matrix error : Scale cannot be NULL")

    # Create a dense matrix table
    plpy.execute(
        """
        CREATE TABLE {matrix_out} AS
            SELECT row_id,
                   {madlib}.array_add(a.row_vec,
                        {madlib}.array_scalar_mult(b.row_vec,
                                                   ({scale})::DOUBLE PRECISION))
                        as row_vec
            FROM
                {matrix_a} as a join {matrix_b} as b using (row_id)
        """.format(madlib=schema_madlib,
                   matrix_a=matrix_a,
                   matrix_b=matrix_b,
                   matrix_out=matrix_out,
                   scale=scale))


def _matrix_add_sparse(schema_madlib, matrix_a, a_row, a_col, a_val,
                       matrix_b, b_row, b_col, b_val, matrix_out,
                       use_temp_table=False):
    _validate_sparse(matrix_a, a_row, a_col, a_val)
    _validate_sparse(matrix_b, b_row, b_col, b_val)
    _validate_output_table(matrix_out)
    a_dim = get_dims(matrix_a, a_row, a_col, a_val)
    b_dim = get_dims(matrix_b, b_row, b_col, b_val)
    _assert(min(a_dim) > 0 and min(b_dim) > 0, 'invalid dimension')
    _assert(a_dim[0] == b_dim[0] and a_dim[1] == b_dim[1],
            'dimension mismatch for matrix add')

    temp = ''
    if use_temp_table:
        temp = 'TEMP'
    plpy.execute('DROP TABLE IF EXISTS %s' % matrix_out)
    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            a.{a_row} AS row_id,
            b.{b_col} AS col_id,
            a.{a_val}::float8 + b.{b_val}::float8 AS value
        FROM
            {matrix_a} AS a,
            {matrix_b} AS b
        WHERE
            a.{a_val} IS NOT NULL AND
            b.{b_val} IS NOT NULL AND
            a.{a_row} = b.{b_row} AND
            a.{a_col} = b.{a_col}
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(temp=temp,
                   matrix_a=matrix_a, a_row=a_row, a_col=a_col, a_val=a_val,
                   matrix_b=matrix_b, b_row=b_row, b_col=b_col, b_val=b_val,
                   matrix_out=matrix_out))
    plpy.execute("""
        INSERT INTO {matrix_out} VALUES ({row_count}, {col_count}, NULL)
        """.format(matrix_out=matrix_out,
                   row_count=a_dim[0],
                   col_count=a_dim[1]))


def _matrix_add_dense(schema_madlib, matrix_a, matrix_b, matrix_out,
                      use_temp_table=False):
    _validate_dense(matrix_a)
    _validate_dense(matrix_b)
    _validate_output_table(matrix_out)
    a_dim = get_dims(matrix_a)
    b_dim = get_dims(matrix_b)
    _assert(min(a_dim) > 0 and min(b_dim) > 0, 'invalid dimension')
    _assert(a_dim[0] == b_dim[0] and a_dim[1] == b_dim[1],
            'dimension mismatch for matrix add')

    temp = '' if not use_temp_table else 'TEMP'

    plpy.execute("""
        CREATE {temp} TABLE {matrix_out}
        m4_ifdef(`__POSTGRESQL__', `',
            `WITH (APPENDONLY=TRUE,COMPRESSTYPE=QUICKLZ)') AS
        SELECT
            a.row_id AS row_id,
            {schema_madlib}.array_add(
                a.row_vec::float8[],
                b.row_vec::float8[]) AS row_vec
        FROM
            {matrix_a} AS a, {matrix_b} AS b
        WHERE
            a.row_id = b.row_id
        m4_ifdef(`__POSTGRESQL__', `',
            `DISTRIBUTED BY (row_id)')
        """.format(schema_madlib=schema_madlib,
                   matrix_a=matrix_a,
                   matrix_b=matrix_b,
                   matrix_out=matrix_out,
                   temp=temp))


def matrix_add(schema_madlib, matrix_a, a_row, a_col, a_val,
               matrix_b, b_row, b_col, b_val, matrix_out):
    # both matrix_a and matrix_b are sparse
    if _is_sparse(a_row, a_col, a_val) and _is_sparse(b_row, b_col, b_val):
        _matrix_add_sparse(schema_madlib, matrix_a, a_row, a_col, a_val,
                           matrix_b, b_row, b_col, b_val, matrix_out, False)
        return

    # sparsify matrix_a if sparse
    matrix_out1 = unique_string() + "_a1"
    if _is_sparse(a_row, a_col, a_val):
        matrix_densify(schema_madlib, matrix_a, a_row, a_col, a_val, matrix_out1, False)
        matrix_a = matrix_out1

    # sparsify matrix_b if sparse
    matrix_out2 = unique_string() + "_a2"
    if _is_sparse(b_row, b_col, b_val):
        matrix_densify(schema_madlib, matrix_b, b_row, b_col, b_val, matrix_out2, False)
        matrix_b = matrix_out2

    _matrix_add_dense(schema_madlib, matrix_a, matrix_b, matrix_out, False)

    plpy.execute("DROP TABLE IF EXISTS {matrix_out1}".format(matrix_out1=matrix_out1))
    plpy.execute("DROP TABLE IF EXISTS {matrix_out2}".format(matrix_out2=matrix_out2))
