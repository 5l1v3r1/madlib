# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
from os import path
# Add utilites module to the pythonpath.
sys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__)))))


import unittest
from mock import *
import sys
import plpy_mock as plpy

m4_changequote(`<!', `!>')
class UtilitiesTestCase(unittest.TestCase):
    def setUp(self):
        patches = {
            'plpy': plpy
        }
        self.plpy_mock_execute = MagicMock()
        plpy.execute = self.plpy_mock_execute

        self.module_patcher = patch.dict('sys.modules', patches)
        self.module_patcher.start()

        import utilities
        self.subject = utilities

        self.default_source_table = "source"
        self.default_output_table = "output"
        self.default_ind_var = "indvar"
        self.default_dep_var = "depvar"
        self.default_module = "unittest_module"
        self.optimizer_params1 = 'max_iter=10, optimizer::text="irls", precision=1e-4'
        self.optimizer_params2 = 'max_iter=.01, optimizer=newton-irls, precision=1e-5'
        self.optimizer_params3 = 'max_iter=10, 10, optimizer=, lambda={1,"2,2",3,4}'
        self.optimizer_params4 = ('max_iter=10, optimizer="irls",'
                                  'precision=0.02.01, lambda={1,2,3,4}')
        self.optimizer_params5 = ('max_iter=10, optimizer="irls",'
                                  'precision=0.02, PRECISION=2., lambda={1,2,3,4}')
        self.optimizer_types = {'max_iter': int, 'optimizer': str, 'optimizer::text': str,
                                'lambda': list, 'precision': float}

    def tearDown(self):
        self.module_patcher.stop()

    def test_preprocess_optimizer(self):
        self.assertEqual(self.subject.preprocess_keyvalue_params(self.optimizer_params1),
                         ['max_iter=10', 'optimizer::text="irls"', 'precision=1e-4'])
        self.assertEqual(self.subject.preprocess_keyvalue_params(self.optimizer_params2),
                         ['max_iter=.01', 'optimizer=newton-irls', 'precision=1e-5'])
        self.assertEqual(self.subject.preprocess_keyvalue_params(self.optimizer_params3),
                         ['max_iter=10', 'lambda={1,"2,2",3,4}'])
        self.assertEqual(self.subject.preprocess_keyvalue_params(self.optimizer_params4),
                         ['max_iter=10', 'optimizer="irls"', 'precision=0.02.01', 'lambda={1,2,3,4}'])

    def test_extract_optimizers(self):
        self.assertEqual({'max_iter': 10, 'optimizer::text': '"irls"', 'precision': 0.0001},
                         self.subject.extract_keyvalue_params(self.optimizer_params1, self.optimizer_types))
        self.assertEqual({'max_iter': 10, 'lambda': ['1', '"2,2"', '3', '4']},
                         self.subject.extract_keyvalue_params(self.optimizer_params3, self.optimizer_types))
        self.assertEqual({'max_iter': '10', 'optimizer': '"irls"', 'precision': '0.02.01',
                          'lambda': '{1,2,3,4}'},
                         self.subject.extract_keyvalue_params(self.optimizer_params4))
        self.assertEqual({'max_iter': '10', 'optimizer': '"irls"',
                          'PRECISION': '2.', 'precision': '0.02',
                          'lambda': '{1,2,3,4}'},
                         self.subject.extract_keyvalue_params(self.optimizer_params5,
                                                 allow_duplicates=False,
                                                 lower_case_names=False
                                                 ))
        self.assertRaises(ValueError,
                          self.subject.extract_keyvalue_params, self.optimizer_params2, self.optimizer_types)
        self.assertRaises(ValueError,
                          self.subject.extract_keyvalue_params, self.optimizer_params5, allow_duplicates=False)
        self.assertRaises(ValueError,
                          self.subject.extract_keyvalue_params, self.optimizer_params4, self.optimizer_types)

    def test_split_delimited_string(self):
        self.assertEqual(['max_iter=10', 'optimizer::text="irls"', 'precision=1e-4'],
                         self.subject.split_quoted_delimited_str(self.optimizer_params1, quote='"'))
        self.assertEqual(['a', 'b', 'c'], self.subject.split_quoted_delimited_str('a,    b, c', quote='|'))
        self.assertEqual(['a', '|b, c|'], self.subject.split_quoted_delimited_str('a,    |b, c|', quote='|'))
        self.assertEqual(['a', '"b, c"'], self.subject.split_quoted_delimited_str('a, "b, c"'))
        self.assertEqual(['"a^5,6"', 'b', 'c'], self.subject.split_quoted_delimited_str('"a^5,6",    b, c', quote='"'))
        self.assertEqual(['"A""^5,6"', 'b', 'c'], self.subject.split_quoted_delimited_str('"A""^5,6",    b, c', quote='"'))

    def test_collate_plpy_result(self):
        plpy_result1 = [{'classes': '4', 'class_count': 3},
                        {'classes': '1', 'class_count': 18},
                        {'classes': '5', 'class_count': 7},
                        {'classes': '3', 'class_count': 3},
                        {'classes': '6', 'class_count': 7},
                        {'classes': '2', 'class_count': 7}]
        self.assertEqual(self.subject.collate_plpy_result(plpy_result1),
                         {'classes': ['4', '1', '5', '3', '6', '2'],
                          'class_count': [3, 18, 7, 3, 7, 7]})
        self.assertEqual(self.subject.collate_plpy_result([]), {})
        self.assertEqual(self.subject.collate_plpy_result([{'class': 'a'},
                                              {'class': 'b'},
                                              {'class': 'c'}]),
                         {'class': ['a', 'b', 'c']})

if __name__ == '__main__':
    unittest.main()
